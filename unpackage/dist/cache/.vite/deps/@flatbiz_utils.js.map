{
  "version": 3,
  "sources": ["../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/lang/is-empty.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-field-to-label-value.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-filter.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-find.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-find-index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-max.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-min.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-pick.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-reorder.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/object/clone-object.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/uuid.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-set-uid.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-split.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-to-map.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/array-total.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/generate-int-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/is-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/list-in-list.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/random-sort.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/to-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/array/two-array-element-change.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/date-normalize.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/compare.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/date-detail.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/date-new.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/is-date.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/format.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/date/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/dom/find-parents-element.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/dom/get-scroll-node.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/dom/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/image/base64-to-file.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/image/file-to-base64.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/image/image-compress.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/noop/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/number/is-number.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/object/enum-values.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/object/map-to-list.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/object/object-get-object.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/polyfill/array-at.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/polyfill/object-is.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/polyfill/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/calculate.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/fen2wan.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/fen2yuan.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/format.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/remove-zero.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/split.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/wan2fen.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/yuan2fen.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/price/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/props/attach-properties-to-component.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/props/compose-props.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/sleep/index.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/trim.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/cut-string.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/format.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/get-value-or-default.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/json-string.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/value-is-equal.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/string/xml-validate.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/system/cache.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/system/env.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/system/webview.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/system/window.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/table/merge-cell.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tiled-array-to-tree.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-field-change.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-each-adaptive.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-filter.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-item-delete.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-leaf-parents-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-to-tiled-map.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-node-parents-list.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-to-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/tree/tree-to-tiled-array.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/ensure-slash.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/to-link-path.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/url-join.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/get-module-url.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/is-http-url.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/path-compare.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/remove-slash.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/to-full-path.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/to-link-path-with-query.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/uri/url-route.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/validator/is-18idcard.ts", "../../../../../node_modules/@flatbiz/utils/dist/@flatbiz/utils/src/validator/regexp.ts"],
  "sourcesContent": ["/**\n * 是否为空\n * ```\n * value === undefined || value === null;\n * ```\n */\nexport const isUndefinedOrNull = (value) => {\n  return value === undefined || value === null;\n};\n", "import { extend } from '@dimjs/utils';\nimport { isUndefinedOrNull } from '../lang/is-empty.js';\nimport type { LabelValueItem, TPlainObject } from '../types/index.js';\n\n/**\n * 数组中的对象字段，转成label、value字段名对象，主要用于弹框中的数据源转换\n * @param dataList\n * @param fieldNames\n * @param isReserve 是否保留原字段，默认值：true\n * @returns\n * ```\n * 例如：[{ id: 1, name: '张三' }] => [{ id: 1, name: '张三', value: 1, label: '张三' }]\n * ```\n */\nexport const arrayField2LabelValue = (\n  dataList: TPlainObject[],\n  fieldNames?: { label?: string; value?: string },\n  isReserve?: boolean\n) => {\n  const dataListNew = dataList || [];\n  const fieldNamesNew = extend({ label: 'label', value: 'value' }, fieldNames);\n  const isReserveNew = isUndefinedOrNull(isReserve) ? true : isReserve;\n  return dataListNew.map((item) => {\n    let respData = {\n      label: item[fieldNamesNew.label],\n      value: item[fieldNamesNew.value],\n    } as TPlainObject;\n    if (isReserveNew) {\n      respData = extend({}, item, respData);\n    }\n    return respData;\n  }) as Array<LabelValueItem & { [key: string]: any }>;\n};\n", "import type { TAny } from '../types/index.js';\n\n/**\n * array.filter严谨查询，使用 === 进行比较\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * @returns\n * ```\n * 例如：\n * 1. arrayFilter([1,2,3], 2) => [2]\n * 2. arrayFilter([{ age: 1, name: 'zhansan' },{ age: 2, name: 'lisi' },{ age: 3, name: 'wangwu' }], 2, 'age') => [{ age: 2,name: 'lisi' }]\n * ```\n */\nexport const arrayFilter = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.filter((item) => {\n      return item === targetValue;\n    });\n  }\n  return dataListNew.filter((item) => {\n    return item?.[fieldName] === targetValue;\n  });\n};\n\n/**\n * array.filter不严谨查询，使用 == 进行比较\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayFilterByLoosely([1,2,3], 2) => 2\n * 2. arrayFilterByLoosely([{ age: 1, name: 'zhansan' }], 1, 'age') => { age: 1, name: 'zhansan' }\n * 3. arrayFilterByLoosely([{ age: 1, name: 'zhansan' }], '1', 'age') => { age: 1, name: 'zhansan' }\n * ```\n */\nexport const arrayFilterByLoosely = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.filter((item) => {\n      return item == targetValue;\n    });\n  }\n  return dataListNew.filter((item) => {\n    return item?.[fieldName] == targetValue;\n  });\n};\n", "import type { TAny } from '../types/index.js';\n\n/**\n * array.find严谨查询，使用 === 进行比较\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayFind([1,2,3], 2) => 2\n * 2. arrayFind([{ age: 1, name: 'zhansan' }], 1, 'age') => { age: 1, name: 'zhansan' }\n * 3. arrayFind([{ age: 1, name: 'zhansan' }], '1', 'age', true) => { age: 1, name: 'zhansan' }\n * ```\n */\nexport const arrayFind = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.find((item) => {\n      return item === targetValue;\n    });\n  }\n  return dataListNew.find((item) => {\n    return item[fieldName] === targetValue;\n  });\n};\n\n/**\n * array.find不严谨查询，使用 == 进行比较\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayFindByLoosely([1,2,3], 2) => 2\n * 2. arrayFindByLoosely([{ age: 1, name: 'zhansan' }], 1, 'age') => { age: 1, name: 'zhansan' }\n * 3. arrayFindByLoosely([{ age: 1, name: 'zhansan' }], '1', 'age') => { age: 1, name: 'zhansan' }\n * ```\n */\nexport const arrayFindByLoosely = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.find((item) => {\n      return item == targetValue;\n    });\n  }\n  return dataListNew.find((item) => {\n    return item[fieldName] == targetValue;\n  });\n};\n", "import type { TAny } from '../types/index.js';\n\n/**\n * array.findIndex严谨查询，使用 === 进行比较\n * ```\n * 使用 === 进行比较\n * ```\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayFindIndex([1,2,3], 2) => 2\n * 2. arrayFindIndex([{ age: 1, name: 'zhansan' }], 1, 'age') => { age: 1, name: 'zhansan' }\n * 3. arrayFindIndex([{ age: 1, name: 'zhansan' }], '1', 'age', true) => { age: 1, name: 'zhansan' }\n * ```\n */\nexport const arrayFindIndex = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.findIndex((item) => {\n      return item === targetValue;\n    });\n  }\n  return dataListNew.findIndex((item) => {\n    return item[fieldName] === targetValue;\n  });\n};\n\n/**\n * array.findIndex不严谨查询，使用 == 进行比较\n * @param array\n * @param targetValue\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayFindIndex([1,2,3], 2) => 2\n * 2. arrayFindIndex([{ age: 1, name: 'zhansan' }], 1, 'age') => { age: 1, name: 'zhansan' }\n * 3. arrayFindIndex([{ age: 1, name: 'zhansan' }], '1', 'age', true) => { age: 1, name: 'zhansan' }\n * ```\n */\nexport const arrayFindIndexByLoosely = (\n  dataList: TAny[],\n  targetValue: string | number | boolean | undefined | null,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  if (!fieldName) {\n    return dataListNew.findIndex((item) => {\n      return item == targetValue;\n    });\n  }\n  return dataListNew.findIndex((item) => {\n    return item[fieldName] == targetValue;\n  });\n};\n", "import { isNumber, isPlainObject } from '@dimjs/lang';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 数组中指定数值字段最大值\n * @param array\n * @param fieldKey 数值字段，如果数组项为Object\n * @returns\n */\nexport const arrayMax = (\n  array: Array<TPlainObject | number>,\n  fieldKey?: string\n) => {\n  let max: number | undefined;\n  array.forEach((item) => {\n    let itemValue = item as number;\n    if (isPlainObject(item) && fieldKey && isNumber(item[fieldKey])) {\n      itemValue = item[fieldKey] as number;\n    }\n    if (!max) max = itemValue;\n    max = itemValue > max ? itemValue : max;\n  });\n  return max as number;\n};\n", "import { isNumber, isPlainObject } from '@dimjs/lang';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 数组中指定数值字段最小值\n * @param array\n * @param fieldKey 数值字段，如果数组项为Object\n * @returns\n */\nexport const arrayMin = (\n  array: Array<TPlainObject | number>,\n  fieldKey?: string\n) => {\n  let min: number | undefined;\n  array.forEach((item) => {\n    let itemValue = item as number;\n    if (isPlainObject(item) && fieldKey && isNumber(item[fieldKey])) {\n      itemValue = item[fieldKey] as number;\n    }\n    if (!min) min = itemValue;\n    min = itemValue < min ? itemValue : min;\n  });\n  return min as number;\n};\n", "import type { TAny } from '../types/index.js';\nimport { arrayFilter, arrayFilterByLoosely } from './array-filter.js';\n\n/**\n * 根据条件在大数组中 挑选 出目标数据，严谨查询，使用 === 进行比较\n * @param array 大数组\n * @param targetValue 待挑选数据\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayPick([1,2,3], 2) => 2\n * 2. arrayPick([{ age: 1, name: 'zhansan' }], 1, 'age') => [{ age: 1, name: 'zhansan' }]\n * 3. arrayPick([{ age: 1, name: 'zhansan' }], '1', 'age') => []\n * ```\n */\nexport const arrayPick = (\n  dataList: TAny[],\n  targetValue: Array<string | number | boolean>,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  let result = [] as TAny[];\n  targetValue.forEach((value) => {\n    const target = arrayFilter(dataListNew, value, fieldName);\n    if (target) {\n      result = result.concat(target);\n    }\n  });\n  return result;\n};\n\n/**\n * 根据条件在大数组中 挑选 出目标数据，不严谨查询，使用 == 进行比较\n * @param array 大数组\n * @param targetValue 待挑选数据\n * @param fieldName 如果数组元素是对象，则为查找对象元素key值\n * ```\n * 例如：\n * 1. arrayPickByLoosely([1,2,3], [2]) => [2]\n * 2. arrayPickByLoosely([{ age: 1, name: 'zhansan' }], [1], 'age') => [{ age: 1, name: 'zhansan' }]\n * 3. arrayPickByLoosely([{ age: 1, name: 'zhansan' }], ['1'], 'age') => [{ age: 1, name: 'zhansan' }]\n * ```\n */\nexport const arrayPickByLoosely = (\n  dataList: TAny[],\n  targetValue: Array<string | number | boolean>,\n  fieldName?: string\n) => {\n  const dataListNew = dataList || [];\n  let result = [] as TAny[];\n  targetValue.forEach((value) => {\n    const target = arrayFilterByLoosely(dataListNew, value, fieldName);\n    if (target) {\n      result = result.concat(target);\n    }\n  });\n  return result;\n};\n", "import { arrayRemove } from '@dimjs/utils';\nimport type { TAny } from '../types/index.js';\n\n/**\n * 一维数组中两个元素交换位置\n * @param array\n * @param sourceIndex 来源索引\n * @param targetIndex 目标索引\n * ```\n * 1. sourceIndex、targetIndex超出array长度，数组不做任何处理\n * ```\n */\nexport const arrayReorder = (\n  array: TAny[],\n  sourceIndex: number,\n  targetIndex: number\n) => {\n  const result = Array.from(array);\n  if (sourceIndex > array.length - 1 || targetIndex > array.length - 1) {\n    console.warn('指定交换索引值超出数组长度');\n    return array;\n  }\n  //删除并记录 删除元素\n  const [removed] = result.splice(sourceIndex, 1);\n  //将原来的元素添加进数组\n  result.splice(targetIndex, 0, removed);\n  return result;\n};\n\n/**\n * 二维数组中的两个元素变更位置\n * @param arrays 二位数组\n * @param source 来源元素信息 index: 操作元素所有，parentIndex：操作元素的一维数组索引\n * @param target 目标元素信息 index: 操作元素所有，parentIndex：操作元素的一维数组索引\n * @returns\n */\nexport const arraysReorder = (\n  arrays: TAny[][],\n  source: { index: number; parentIndex: number },\n  target: { index: number; parentIndex: number }\n) => {\n  const sourceItems = arrays[source.parentIndex];\n  const sourceTarget = sourceItems[source.index];\n\n  const sourceItemsNew = arrayRemove(sourceItems, sourceTarget);\n\n  arrays[source.parentIndex] = sourceItemsNew;\n\n  const targetItems = arrays[target.parentIndex];\n  const newOverItems = [\n    ...targetItems.slice(0, target.index),\n    sourceTarget,\n    ...targetItems.slice(target.index, targetItems.length),\n  ];\n  arrays[target.parentIndex] = newOverItems;\n\n  return arrays;\n};\n", "/**\n * 深拷贝对象，对象中只能存在 JSON 支持的类型\n * ```\n * 例如\n * 1. cloneObject({ x: 1 })\n * 2. cloneObject([{ x: 1 }])\n * ```\n */\nexport const cloneObject = <T extends object>(obj: T): T => {\n  return JSON.parse(JSON.stringify(obj)) as T;\n};\n", "import { cache } from '@dimjs/utils';\n\nconst uuidFactory = (() => {\n  const now = `${Date.now()}`;\n  return cache(`uuid-${now.substring(now.length - 4, now.length)}-`, 100);\n})();\n\nexport const getUuid = () => {\n  return uuidFactory();\n};\n", "import { cloneObject } from '../object/clone-object.js';\nimport { getUuid } from '../string/uuid.js';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 为数组添加uid唯一值字段\n * @param array 对象数组\n * @param options.uidKeyName uid字段名称，默认值：uid\n * @param options.returnNewArray 是否返回新数组，默认为false\n */\nexport const arraySetUid = (\n  array: TPlainObject[],\n  options?: {\n    /** uid字段名称 */\n    uidFieldName?: string;\n    /** 是否返回新数组 */\n    returnNewArray?: boolean;\n  }\n) => {\n  const uidFieldNameFt = options?.uidFieldName || 'uid';\n  const arrayFt = options?.returnNewArray ? cloneObject(array) : array;\n  arrayFt.forEach((item) => {\n    item[uidFieldNameFt] = getUuid();\n  });\n  return arrayFt;\n};\n", "import type { TAny } from '../types/index.js';\n\n/**\n * 分割数组\n * @param array\n * @param length 分割长度\n * @returns\n */\nexport const arraySplit = (array: TAny[], length: number) => {\n  if (length <= 0) return [];\n  let index = 0;\n  const newArray: TAny[][] = [];\n  while (index < array.length) {\n    newArray.push(array.slice(index, (index += length)));\n  }\n  return newArray;\n};\n", "import type { TPlainObject } from '../types/define.js';\n\n/**\n * 数组 转 键值对Map\n * ```\n * 例如：\n * [{ id: 1, name: '张三' }, { id: 2, name: '李四' }]\n * =>\n * { 1: { id: 1, name: '张三' }, 2: { id: 2, name: '李四' } }\n * ```\n */\nexport const arrayToMap = (dataList: TPlainObject[], uidName: string) => {\n  const result: TPlainObject = {};\n  dataList.forEach((item) => {\n    result[item[uidName]] = item;\n  });\n  return result;\n};\n", "import { isNumber, isPlainObject } from '@dimjs/lang';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 数组字段求和\n * @param array\n * @param fieldKey 求和字段，如果数组项为Object\n * @returns\n */\nexport const arrayTotal = (\n  array: Array<TPlainObject | number>,\n  fieldKey?: string\n) => {\n  let total = 0;\n  array.forEach((item) => {\n    if (typeof item === 'number') {\n      total += item;\n    } else if (isPlainObject(item) && fieldKey && isNumber(item[fieldKey])) {\n      total += item[fieldKey];\n    }\n  });\n  return total;\n};\n", "/**\n * 生成连续数字数组\n * @param from 连续数字起始值（包含）\n * @param to 连续数字结束值（不包含）\n * ```\n * generateIntArray(0, 5) => [0, 1, 2, 3, 4]\n * ```\n */\nexport function generateIntArray(from: number, to: number) {\n  const array: number[] = [];\n  for (let i = from; i < to; i++) {\n    array.push(i);\n  }\n  return array;\n}\n", "import { isArray } from '@dimjs/lang';\n\n/**\n * 是否为非空数组\n * ```\n * 结果true满足\n * 1. 必须为数组\n * 2. 数组长度大于0\n * ```\n */\nexport const isNotEmptyArray = (value: any) =>\n  isArray(value) && value.length > 0;\n\n/**\n * 是否为空数组\n * ```\n * 结果true满足\n * 1. 必须为数组\n * 2. 数组为空\n * ```\n */\nexport const isEmptyArray = (value: any) =>\n  isArray(value) && value.length === 0;\n", "import { isUndefinedOrNull } from '../lang/is-empty.js';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 通过规则字段 来源数组 并入 目标数组\n * @param sourceList 来源数组\n * @param targetList 目标数组\n * @param inRuleFieldName 匹配数组item相同的规则字段，默认值: value\n *\n * ```\n * listInList([{ value: 1, name: '张三', age: 100 }], [{ value: 1, age: 20, sex: 1 }], 'value')\n * =>\n * [{ value: 1, name: '张三', age: 20, sex: 1 }]\n * ```\n */\nexport const listInList = (\n  sourceList: TPlainObject[],\n  targetList: TPlainObject[],\n  inRuleFieldName = 'value'\n) => {\n  const resultList = targetList.map((item) => {\n    const target = sourceList.find(\n      (sourceItem) =>\n        !isUndefinedOrNull(item[inRuleFieldName]) &&\n        sourceItem[inRuleFieldName] === item[inRuleFieldName]\n    );\n    return { ...item, ...target };\n  });\n  return resultList as TPlainObject[];\n};\n", "/**\n * 数组随机排序\n * @param array\n * @returns\n */\nexport const arrayRandomSort = <T>(array: T[]) => {\n  return array.sort(() => {\n    return Math.random() > 0.5 ? -1 : 1;\n  });\n};\n", "import { isArray } from '@dimjs/lang';\nimport { isUndefinedOrNull } from '../lang/is-empty.js';\n\n/**\n * 转数组\n * @param array\n * @returns\n * ```\n * 例如\n * 1. undefined or null => []\n * 2. [1,2,3] => [1,2,3]\n * 2. 任意其他数据A => [A]\n * ```\n */\nexport const toArray = <T>(value?: unknown) => {\n  if (isUndefinedOrNull(value)) return [];\n  if (isArray(value)) return value as T[];\n  return [value] as T[];\n};\n", "import type { TAny } from '../types/index.js';\n\n/**\n * 两个数组中元素变换\n * ```\n * 1. sourceIndex、targetIndex超出长度，数组不做任何处理\n * ```\n */\nexport const twoArrayElementPositionChange = (\n  sourceArray: TAny[],\n  targetArray: TAny[],\n  sourceIndex: number,\n  targetIndex: number\n) => {\n  if (!sourceArray[sourceIndex]) {\n    return {\n      sourceArray,\n      targetArray,\n    };\n  }\n  targetArray.splice(targetIndex, 0, sourceArray[sourceIndex]);\n  sourceArray.splice(sourceIndex, 1);\n  return {\n    sourceArray,\n    targetArray,\n  };\n};\n", "import { dateNormalize as dateNormalizeNew } from '@dimjs/utils';\nimport type { DateType } from './types.js';\n/**\n * 指定数据转日期格式\n * @param dateInput\n * @returns\n */\nexport const dateNormalize = (dateInput: DateType) => {\n  if (!dateInput) {\n    throw new Error(`Invalid Date : \"${String(dateInput)}\"`);\n  }\n  return dateNormalizeNew(dateInput);\n};\n", "import { dateNormalize } from './date-normalize.js';\nimport type { DateType } from './types.js';\n\n/**\n * 日期比较：大于等于\n */\nexport const dateTimeGte = (date1: DateType, date2: DateType) => {\n  const date1Fmt = dateNormalize(date1);\n  const date2Fmt = dateNormalize(date2);\n  return new Date(date1Fmt).getTime() >= new Date(date2Fmt).getTime();\n};\n\n/**\n * 日期比较：大于\n */\nexport const dateTimeGt = (date1: DateType, date2: DateType) => {\n  const date1Fmt = dateNormalize(date1);\n  const date2Fmt = dateNormalize(date2);\n  return new Date(date1Fmt).getTime() > new Date(date2Fmt).getTime();\n};\n\n/**\n * 日期比较：等于\n */\nexport const dateTimeEq = (date1: DateType, date2: DateType) => {\n  const date1Fmt = dateNormalize(date1);\n  const date2Fmt = dateNormalize(date2);\n  return new Date(date1Fmt).getTime() === new Date(date2Fmt).getTime();\n};\n\n/**\n * 判断目标日期是否在指定区间内，包含临界值\n * @param targetDate\n * @param minDate\n * @param maxDate\n * ```\n * 例如：targetDate >= minDate && targetDate <= maxDate\n * ```\n */\nexport const dateTimeIn = (\n  targetDate: DateType,\n  minDate: DateType,\n  maxDate: DateType\n) => {\n  return dateTimeGte(targetDate, minDate) && dateTimeGte(maxDate, targetDate);\n};\n", "import { dateNormalize } from './date-normalize.js';\nimport type { DateType } from './types.js';\n\nconst weekConfig = {\n  1: '一',\n  2: '二',\n  3: '三',\n  4: '四',\n  5: '五',\n  6: '六',\n  7: '日',\n};\n\n/**\n * 日期解析\n * @param dateInput\n * @returns\n * ```\n * 1. 解析后月份 1～12\n * 2. 解析后星期 1～7\n * ```\n */\nexport const dateDetail = (dateInput: DateType) => {\n  const dateInstance = dateNormalize(dateInput);\n  const week = dateInstance.getDay();\n  const type7Week = week === 0 ? 7 : week;\n  return {\n    y: dateInstance.getFullYear(),\n    m: dateInstance.getMonth() + 1,\n    d: dateInstance.getDate(),\n    h: dateInstance.getHours(),\n    mi: dateInstance.getMinutes(),\n    s: dateInstance.getSeconds(),\n    ms: dateInstance.getMilliseconds(),\n    week: type7Week,\n    weekString: weekConfig[type7Week],\n    instance: dateInstance,\n  };\n};\n", "import { dateNew as dateNewNew } from '@dimjs/utils';\nimport { dateNormalize } from './date-normalize.js';\nimport type { DateType } from './types.js';\n/**\n * 在日期【'y' | 'm' | 'd' | 'h' | 'mi' | 's'】中进行加减值处理\n * @param dateInput\n * @param mode 类型 'y' | 'm' | 'd' | 'h' | 'mi' | 's'\n * @param number\n * @returns\n */\nexport const dateNew = (\n  dateInput: DateType,\n  mode: 'y' | 'm' | 'd' | 'h' | 'mi' | 's',\n  number: number\n) => {\n  return dateNewNew(dateNormalize(dateInput), mode, number);\n};\n", "import { dateNormalize } from './date-normalize.js';\nimport type { DateType } from './types.js';\n\n/**\n * 判断日期是否合法\n * @returns boolean\n */\nexport const isDate = (dateInput: DateType) => {\n  try {\n    return !!dateNormalize(dateInput);\n  } catch (_error) {\n    return false;\n  }\n};\n", "import { dateFormat as dateFormatNew } from '@dimjs/utils';\nimport { dateNormalize } from './date-normalize.js';\nimport { isDate } from './is-date.js';\nimport type { DateFormatType, DateType } from './types.js';\n\nexport const dateFormat = (\n  dateInput: DateType,\n  format: DateFormatType = 'YYYY-MM-DD'\n) => {\n  if (!isDate(dateInput)) {\n    return `${dateInput || ''}`;\n  }\n  return dateFormatNew(dateNormalize(dateInput), format);\n};\n", "import { dateTimeEq, dateTimeGt, dateTimeGte, dateTimeIn } from './compare.js';\nimport { dateDetail } from './date-detail.js';\nimport { dateNew } from './date-new.js';\nimport { dateNormalize } from './date-normalize.js';\nimport { dateFormat } from './format.js';\nimport { isDate } from './is-date.js';\n\nexport * from './types.js';\n\ntype FlatbizDate = {\n  /**\n   * 判断是否为合法日期\n   */\n  isDate: typeof isDate;\n  /**\n   * 日期格式化，默认格式：YYYY-MM-DD\n   */\n  format: typeof dateFormat;\n  /**\n   * 日期比较：大于等于\n   */\n  gte: typeof dateTimeGte;\n  /**\n   * 日期比较：大于\n   */\n  gt: typeof dateTimeGt;\n  /**\n   * 日期比较：等于\n   */\n  eq: typeof dateTimeEq;\n  /**\n   * 判断目标日期是否在指定区间内，包含临界值\n   * @param targetDate\n   * @param minDate\n   * @param maxDate\n   * ```\n   * 例如：targetDate e>= minDate && targetDate <= maxDate\n   * ```\n   */\n  in: typeof dateTimeIn;\n  /**\n   * 日期详情\n   * ```\n   * 1. 解析日期中的【'y' |'m' |'d' |'h' |'mi' |'s' |'ms' |'week'】数据\n   * 2. 解析后月份 1～12\n   * 3. 解析后星期 1～7\n   * ```\n   */\n  detail: typeof dateDetail;\n  /**\n   * 日期修改\n   * ```\n   * 对日期【'y' | 'm' | 'd' | 'h' | 'mi' | 's'】中进行加减值处理\n   * ```\n   */\n  update: typeof dateNew;\n  /**\n   * 指定数据转日期格式\n   */\n  dateNormalize: typeof dateNormalize;\n};\n\nexport const flatbizDate: FlatbizDate = {\n  isDate: isDate,\n  format: dateFormat,\n  gte: dateTimeGte,\n  gt: dateTimeGt,\n  eq: dateTimeEq,\n  detail: dateDetail,\n  update: dateNew,\n  in: dateTimeIn,\n  dateNormalize: dateNormalize,\n};\n", "/**\n * 查找层层父节点中的目标元素\n * @param originNode  起始节点\n * @param verify 判断是否为目标节点\n */\nexport const findParentsElement = (\n  originNode: HTMLElement | null,\n  verify: (node: HTMLElement) => boolean\n) => {\n  while (originNode != null) {\n    if (verify(originNode)) {\n      return originNode;\n    }\n    originNode = originNode.parentNode as HTMLElement;\n  }\n  return null;\n};\n", "type ScrollElement = HTMLElement | Window | Document;\n\nconst overflowScrollReg = /scroll|auto/i;\nconst defaultRoot = window;\n\nfunction isElement(node: Element) {\n  const ELEMENT_NODE_TYPE = 1;\n  return (\n    node.tagName !== 'HTML' &&\n    node.tagName !== 'BODY' &&\n    node.nodeType === ELEMENT_NODE_TYPE\n  );\n}\n\n/**\n * 查询指定节点层层父节点中第一个原生滚动节点\n * @param el\n * @param root\n * https://github.com/youzan/vant/issues/3823\n */\nexport function getScrollNode(\n  el: Element,\n  root: ScrollElement | null | undefined = defaultRoot\n) {\n  let node = el;\n\n  while (node && node !== root && isElement(node)) {\n    const { overflowY } = window.getComputedStyle(node);\n    if (overflowScrollReg.test(overflowY)) {\n      return node;\n    }\n    node = node.parentNode as Element;\n  }\n\n  return root;\n}\n", "import { getUuid } from '../string/uuid.js';\nimport { findParentsElement } from './find-parents-element.js';\nimport { getScrollNode } from './get-scroll-node.js';\n\nexport interface BodyAppendDivElementProps {\n  divElement: HTMLDivElement;\n  elementId: string;\n}\n\nconst bodyAppendDivElement = (id?: string): BodyAppendDivElementProps => {\n  const div = document.createElement('div');\n  const idNew = id || `id_${Date.now()}`;\n  div.setAttribute('id', idNew);\n  document.body.append(div);\n  return {\n    divElement: div,\n    elementId: idNew,\n  };\n};\n\nconst createDivElement = (id?: string) => {\n  const div = document.createElement('div');\n  const idNew = id || `id_${getUuid()}`;\n  div.setAttribute('id', idNew);\n  return div;\n};\n\n// 删除body的子节点\nconst removeBodyChild = (element: string) => {\n  try {\n    document.body.removeChild(document.querySelector(element) as Node);\n  } catch (_error) {\n    //\n  }\n};\n\nexport const dom = {\n  bodyAppendDivElement,\n  createDivElement,\n  removeBodyChild,\n  /**\n   * 查询指定节点层层父节点中第一个原生滚动节点\n   * @param el\n   * @param root\n   * https://github.com/youzan/vant/issues/3823\n   */\n  getScrollNode,\n  /**\n   * 查找层层父节点中的目标元素\n   * @param originNode  起始节点\n   * @param verify 判断是否为目标节点\n   */\n  findParentsElement,\n};\n", "export const base64ToFile = (dataurl, filename) => {\n  //将base64转换为文件\n  const arr = dataurl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, { type: mime });\n};\n", "export const fileToBase64: (file: File) => Promise<string> = (file) => {\n  return new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function () {\n        const base64 = reader.result as string;\n        resolve(base64);\n      };\n      reader.onerror = function (error) {\n        reject(error);\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n", "import { extend } from '@dimjs/utils';\nimport type { TAny } from '../types/index.js';\nimport { base64ToFile } from './base64-to-file.js';\nimport { fileToBase64 } from './file-to-base64.js';\n\nexport type TImageCompressOptions = {\n  /** 质量比例 0~1 */\n  quality?: number;\n  /** 图片宽高等比缩小 0~1 */\n  ratio?: number;\n  /**\n   * 压缩阀值（单位 MB）\n   * 小于阈值不压缩\n   */\n  threshold?: number;\n  /** 压缩后图片格式后缀，如果不设置，则根据图片原格式后缀 */\n  suffix?: 'jpg' | 'png';\n};\n\n/**\n * 图片压缩\n * ```\n * 只支持 jpg、jpeg、png\n * quality：默认值 0.5\n * ratio: 默认值 1\n * threshold: 默认值 1\n * ```\n */\nexport const imageCompressToBase64 = (\n  imageFile: File,\n  options?: TImageCompressOptions\n) => {\n  const optionsNew = extend({ quality: 0.5, ratio: 1, threshold: 1 }, options);\n\n  return new Promise<{ base64: string; imageName: string; suffix: string }>(\n    (resolve, reject) => {\n      const suffix = imageFile.name.substring(\n        imageFile.name.lastIndexOf('.') + 1,\n        imageFile.name.length\n      );\n      const imageName = imageFile.name.substring(\n        0,\n        imageFile.name.lastIndexOf('.')\n      );\n      const imageSuffix = options?.suffix || suffix;\n      const base64Suffix =\n        imageSuffix.toLocaleLowerCase() === 'jpg' ? 'jpeg' : imageSuffix;\n      const isLegal = ['png', 'jpg', 'jpeg'].includes(\n        base64Suffix.toLocaleLowerCase()\n      );\n      void fileToBase64(imageFile)\n        .then((imgBase64: string) => {\n          let needCompress = true;\n          if (!isLegal) {\n            console.info(`${suffix} 文件格式不支持压缩`);\n            needCompress = false;\n          }\n          const fileMb = imageFile.size / 1024 / 1024;\n          if (fileMb < optionsNew.threshold) {\n            needCompress = false;\n          }\n          if (!needCompress) {\n            resolve({\n              base64: imgBase64,\n              imageName,\n              suffix: base64Suffix,\n            });\n            return;\n          }\n          const imgage = new Image();\n          imgage.src = imgBase64;\n          imgage.onload = function () {\n            const that = this as TAny;\n            const width = that.width * optionsNew.ratio;\n            const height = that.height * optionsNew.ratio;\n            const canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n            ctx.drawImage(that, 0, 0, width, height);\n            const base64 = canvas.toDataURL(\n              `image/${base64Suffix}`,\n              optionsNew.quality\n            );\n            resolve({\n              base64,\n              imageName,\n              suffix: base64Suffix,\n            });\n          };\n        })\n        .catch(reject);\n    }\n  );\n};\n\n/**\n * 图片压缩\n * ```\n * 只支持 jpg、jpeg、png\n * quality：默认值 0.5\n * ratio: 默认值 1\n * threshold: 默认值 1\n * ```\n */\nexport const imageCompressToFormData = (\n  imageFile: File,\n  formDataKey: string,\n  options?: TImageCompressOptions\n) => {\n  return new Promise((resolve, reject) => {\n    const suffix = imageFile.name.split('.').at(-1) || '';\n    const isLegal = ['png', 'jpg', 'jpeg'].includes(suffix.toLocaleLowerCase());\n    if (!isLegal) {\n      console.info(`${suffix} 文件格式不支持压缩`);\n      const formData = new FormData();\n      formData.append(formDataKey, imageFile);\n      resolve(formData);\n      return;\n    }\n    void imageCompressToBase64(imageFile, options)\n      .then((compressInfo) => {\n        const { base64, imageName, suffix } = compressInfo;\n        const array = [] as number[];\n        const bytes = window.atob(base64.split(',')[1]);\n        for (let i = 0; i < bytes.length; i++) {\n          array.push(bytes.charCodeAt(i));\n        }\n        const blob = new Blob([new Uint8Array(array)], {\n          type: `image/${suffix}`,\n        });\n        const formData = new FormData();\n        formData.append(formDataKey, blob, `${imageName}.${suffix}`);\n        resolve(formData);\n      })\n      .catch(reject);\n  });\n};\n\n/**\n * 图片压缩\n * ```\n * 只支持 jpg、jpeg、png\n * quality：默认值 0.5\n * ratio: 默认值 1\n * threshold: 默认值 1\n * ```\n */\nexport const imageCompressToFile = (\n  imageFile: File,\n  options?: TImageCompressOptions\n) => {\n  const suffix = imageFile.name.split('.').at(-1) || '';\n  const isLegal = ['png', 'jpg', 'jpeg'].includes(suffix.toLocaleLowerCase());\n  if (!isLegal) {\n    console.info(`${suffix} 文件格式不支持压缩`);\n    return imageFile;\n  }\n  return new Promise<File>((resolve, reject) => {\n    void imageCompressToBase64(imageFile, options)\n      .then((compressInfo) => {\n        const { base64, imageName, suffix } = compressInfo;\n        const file = base64ToFile(base64, `${imageName}.${suffix}`);\n        resolve(file);\n      })\n      .catch(reject);\n  });\n};\n", "export const noop = () => {\n  //\n};\n", "/**\n * 判断是否为数字（包括字符串数字）\n * ```\n * isNumber(123) // true\n * isNumber('123') // true\n * isNumber('123a') // false\n * isNumber(undefined) // false\n * isNumber(null) // false\n * isNumber('') // false\n * ```\n */\nexport const isNumber = (num: string | number) => {\n  if (num === '' || num === undefined || num === null) {\n    return false;\n  }\n  return !isNaN(Number(num));\n};\n", "/**\n * 获取枚举类型 value 数组\n * @param enumeration 枚举类型\n * @returns\n * ```\n * 例如：\n * enum AdminTypeEnum {\n *  superAdmin = 1,\n *  generalAdmin = 0,\n * }\n * =>\n * [1,0]\n * ```\n */\nexport const enumValues = <T extends object>(\n  enumeration: T\n): Array<T[keyof T]> => {\n  /**\n   * enum AdminTypeEnum {\n   *  superAdmin = 1,\n   *  generalAdmin = 0,\n   * }\n   * == Object.keys(AdminTypeEnum) ==>\n   * ['0', '1', 'superAdmin', 'generalAdmin']\n   */\n  const keys = Object.keys(enumeration).filter((k) => isNaN(Number(k)));\n\n  return keys.map((k) => enumeration[k]) as Array<T[keyof T]>;\n};\n", "export type MapToListDefaultItem<V> = { label: string; value: V };\n\n/**\n * 对象转数组（精确）\n * @param mapData map对象\n * @param valueList value数组\n * @param labelName 自定义map key值属性名称，默认：value\n * @param valueName 自定义map value值属性名称，默认：label\n * @returns\n * ```\n * 由于map对象再获取key列表时，都是字符串类型数组，无法精确获取key类型，所以通过valueList来获取key的精确类型\n * const adminTypeMap = {\n *    1:'superAdmin',\n *    2:'generalAdmin',\n * }\n * mapToListExact<MapToListDefaultItem<number>>(adminTypeMap, [1,2])\n * =>\n * 默认值转出格式\n * [{ label: 'superAdmin', value: 1 },{ label: 'generalAdmin', value: 2 }]\n * ```\n */\nexport const mapToListExact = <T extends object>(\n  mapData: Record<string, unknown>,\n  valueList: Array<string | number>,\n  labelName = 'label',\n  valueName = 'value',\n  colorMap?: Record<string | number, string>\n) => {\n  const tempList: Array<any> = [];\n  valueList.map((value) => {\n    tempList.push({\n      [labelName]: mapData[value as string],\n      [valueName]: value,\n      color: colorMap?.[value],\n    });\n  });\n  return tempList as T[];\n};\n\n/**\n * 对象转数组（非精确转换，精确转换使用mapToListExact）\n * @param map 对象\n * @param labelName 自定义map key值属性名称，默认：value\n * @param valueName 自定义map value值属性名称，默认：label\n * @returns\n * ```\n * 例如\n * const adminType = {\n *    1:'superAdmin',\n *    2:'generalAdmin',\n * }\n * mapToListExact<MapToListDefaultItem<number>>(adminType, [1,2])\n * =>\n * 默认值转出格式\n * [{ label: 'superAdmin', value: '1' },{ label: 'generalAdmin', value: '2' }]\n * ```\n */\nexport const mapToList = <T extends object>(\n  map: Record<string, unknown>,\n  labelName = 'label',\n  valueName = 'value'\n) => {\n  const list: Array<any> = [];\n  Object.keys(map).forEach((key) => {\n    const obj = {\n      [labelName]: map[key],\n      [valueName]: key,\n    };\n    list.push(obj);\n  });\n  return list as T[];\n};\n", "import type { TPlainObject } from '../types/index.js';\n\n/**\n * 从对象数据中，根据规则筛选对象\n * @param data\n * @param keyList\n * @returns\n *\n */\nexport const objectGetObject = (\n  objectData?: TPlainObject,\n  keyList?: Array<string | { beforeKey: string; afterKey: string }>\n) => {\n  if (!objectData || !keyList || !keyList.length) return {};\n  const result = {} as TPlainObject;\n\n  keyList.forEach((temp) => {\n    const targetKey = typeof temp === 'string' ? temp : temp.beforeKey;\n    const resultKey = typeof temp === 'string' ? temp : temp.afterKey;\n    const objectKeys = Object.keys(objectData);\n    if (objectKeys.includes(targetKey) && resultKey) {\n      result[resultKey] = objectData[targetKey];\n    }\n  });\n\n  return result;\n};\n", "if (!Array.prototype.at) {\n  Object.defineProperty(Array.prototype, 'at', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: function at(n) {\n      n = Math.trunc(n) || 0;\n      if (n < 0) n += this.length;\n      if (n < 0 || n >= this.length) return undefined;\n      return this[n];\n    },\n  });\n}\n", "if (!Object.is) {\n  Object.is = function (x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  };\n}\n", "import './array-at';\nimport './object-is';\n\nexport const polyfill = () => {\n  console.log('@flatbiz/utils polyfill');\n};\n", "import type { PriceOption } from '@dimjs/utils';\nimport { extend, price } from '@dimjs/utils';\n\n/**\n * 金额计算：加\n */\nexport const add = (\n  amt: string | number,\n  amt2: string | number,\n  option?: PriceOption\n) => {\n  return price(amt, extend({ precision: 10 }, option)).add(amt2).value;\n};\n\n/**\n * 金额计算：减\n */\nexport const subtract = (\n  amt: string | number,\n  amt2: string | number,\n  option?: PriceOption\n) => {\n  return price(amt, extend({ precision: 10 }, option)).subtract(amt2).value;\n};\n\n/**\n * 金额计算：乘\n */\nexport const multiply = (\n  amt: string | number,\n  amt2: string | number,\n  option?: PriceOption\n) => {\n  return price(amt, extend({ precision: 10 }, option)).multiply(amt2).value;\n};\n\n/**\n * 金额计算：除\n */\nexport const divide = (\n  amt: string | number,\n  amt2: string | number,\n  option?: PriceOption\n) => {\n  return price(amt, extend({ precision: 10 }, option)).divide(amt2).value;\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\n/**\n * 金额转换 分 => 万元\n */\nexport const priceFen2wan = (\n  amt?: string | number,\n  defaultValue: string | number = 0\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  return price(amt).divide(1000000).value;\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\n/**\n * 金额转换 分 => 元\n */\nexport const priceFen2yuan = (\n  amt?: string | number,\n  defaultValue: string | number = 0\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  return price(amt).divide(100).value;\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\n/**\n * 格式化金额保留小数点后2位\n */\nexport const priceFormat = (\n  amt?: string | number,\n  defaultValue: string | number = 0,\n  options?: {\n    /** 是否显示分隔符，默认值：true */\n    separator?: boolean;\n    /** 小数点后位数，默认：2 */\n    precision?: number;\n  }\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  const separator = options?.separator === false ? '' : ',';\n  const precision = options?.precision ? options.precision : 2;\n  return price(amt, { precision, symbol: '', separator }).format();\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\n/**\n * 金额去除小数点尾号零（会四舍五入处理，默认添加分隔符）\n * ```\n * 例如：\n * 19.00 => 19\n * 19.90 => 19.9\n * 1999.90 => 1,999.9\n * 99.9999 => 100\n * ```\n */\nexport const priceRemoveTailZero = (\n  amt?: string | number,\n  defaultValue: string | number = 0,\n  options?: {\n    /** 是否显示分隔符，默认值：true */\n    separator: boolean;\n  }\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  amt = price(amt, { precision: 2, symbol: '', separator: '' }).format();\n  const priceFt = String(parseFloat(amt)).split('.');\n  const separator = options?.separator === false ? '' : ',';\n  const firstValue = price(priceFt[0], {\n    precision: 0,\n    symbol: '',\n    separator,\n  }).format();\n  return `${firstValue}${priceFt[1] ? `.${priceFt[1]}` : ''}`;\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\n/**\n * 金额分割（会四舍五入处理，默认添加分隔符）\n * ```\n * 例如：\n * 19.09 => ['19', '.09']\n * 99.00 => ['99', '.00']\n * 99.999 => ['100', '.00']\n * ```\n */\nexport const priceSplit = (\n  amt?: string | number,\n  defaultValue: string | number = 0,\n  options?: {\n    /** 是否显示分隔符，默认值：true */\n    separator?: boolean;\n    /** 小数点后位数，默认：2 */\n    precision?: number;\n  }\n): string[] => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return [defaultValue as string, ''];\n    }\n    amt = defaultValue;\n  }\n  const precision = options?.precision ? options.precision : 2;\n\n  const priceFt = price(amt, { precision, symbol: '', separator: '' })\n    .format()\n    .split('.');\n\n  const separator = options?.separator === false ? '' : ',';\n\n  const firstValue = price(priceFt[0], {\n    precision: 0,\n    symbol: '',\n    separator,\n  }).format();\n  return [firstValue, `.${priceFt[1]}`];\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\nexport const priceWan2fen = (\n  amt?: string | number,\n  defaultValue: string | number = 0\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  return price(amt).multiply(1000000).value;\n};\n", "import { price } from '@dimjs/utils';\nimport { isNumber } from '../number/is-number.js';\n\nexport const priceYuan2fen = (\n  amt?: string | number,\n  defaultValue: string | number = 0\n) => {\n  if (amt === undefined || amt === null || !isNumber(amt)) {\n    if (!isNumber(defaultValue)) {\n      return defaultValue as string;\n    }\n    amt = defaultValue;\n  }\n  return price(amt).multiply(100).value;\n};\n", "import { add, divide, multiply, subtract } from './calculate.js';\nimport { priceFen2wan } from './fen2wan.js';\nimport { priceFen2yuan } from './fen2yuan.js';\nimport { priceFormat } from './format.js';\nimport { priceRemoveTailZero } from './remove-zero.js';\nimport { priceSplit } from './split.js';\nimport { priceWan2fen } from './wan2fen.js';\nimport { priceYuan2fen } from './yuan2fen.js';\n\ntype FlatbizPrice = {\n  /**\n   * 金额转换 分 => 元\n   */\n  fen2yuan: typeof priceFen2yuan;\n  /**\n   * 金额转换  元 => 分\n   */\n  yuan2fen: typeof priceYuan2fen;\n  /**\n   * 金额转换 分 => 万\n   */\n  fen2wan: typeof priceFen2wan;\n  /**\n   * 金额转换  万 => 分\n   */\n  wan2fen: typeof priceWan2fen;\n  /**\n   * 金额小数点尾号去零\n   * ```\n   * 例如：\n   * 19.90 => 19.9\n   * 19.00 => 19\n   * ```\n   */\n  removeTailZero: typeof priceRemoveTailZero;\n  /**\n   * 格式化金额保留小数点后2位\n   */\n  format: typeof priceFormat;\n  /**\n   * 金额分割\n   * ```\n   * 例如：\n   * 19.09 => ['19', '.09']\n   * 99.00 => ['99', '.00']\n   * ```\n   */\n  split: typeof priceSplit;\n  /**\n   * 金额计算：加\n   */\n  add: typeof add;\n  /**\n   * 金额计算：减\n   */\n  subtract: typeof subtract;\n  /**\n   * 金额计算：乘\n   */\n  multiply: typeof multiply;\n  /**\n   * 金额计算：除\n   */\n  divide: typeof divide;\n};\n\nexport const flatbizPrice: FlatbizPrice = {\n  fen2yuan: priceFen2yuan,\n  fen2wan: priceFen2wan,\n  yuan2fen: priceYuan2fen,\n  wan2fen: priceWan2fen,\n  removeTailZero: priceRemoveTailZero,\n  format: priceFormat,\n  split: priceSplit,\n  add: add,\n  subtract: subtract,\n  multiply: multiply,\n  divide: divide,\n};\n", "export function attachPropertiesToComponent<\n  C,\n  P extends Record<string, unknown>,\n>(component: C, properties: P): C & P {\n  const ret = component as Record<string, unknown>;\n  for (const key in properties) {\n    if (Object.prototype.hasOwnProperty.call(properties, key)) {\n      ret[key] = properties[key];\n    }\n  }\n  return ret as C & P;\n}\n", "import { isUndefined } from '@dimjs/lang';\nimport type { TAny } from '../types/index.js';\n\n/**\n * 合并执行 originProps、patchProps中存在的相同命名函数，\n * @param originProps 原对象数据\n * @param patchProps 补丁对象数据\n * @param isMerge 是否浅合并对象，默认值：true\n * ```\n * 1. 主要用于 react 组件函数合并\n * ```\n */\nexport const composeProps = <\n  T extends Record<string, TAny>,\n  P extends Record<string, TAny>,\n>(\n  originProps: T,\n  patchProps: P,\n  isMerge?: boolean\n) => {\n  const isMergeNew = isUndefined(isMerge) ? true : isMerge;\n  const composedProps: Record<string, TAny> = {\n    ...originProps,\n    ...(isMergeNew ? patchProps : {}),\n  };\n\n  Object.keys(patchProps).forEach((key) => {\n    const func = patchProps[key];\n    if (typeof func === 'function') {\n      composedProps[key] = (...args: TAny[]) => {\n        func(...args);\n        return originProps[key]?.(...args);\n      };\n    }\n  });\n  return composedProps as T & P;\n};\n", "/**\n * 延迟\n * @param time 毫米\n * @returns\n */\nexport const sleep = (time: number) =>\n  new Promise((resolve) => setTimeout(resolve, time));\n", "import { isString } from '@dimjs/lang';\n\n/**\n * 清除空格，可清除前后空格或所有空格\n * @param str\n * @param cancelGlobal 取消所有，只清除前后空格\n */\nexport const trim = (str: string, cancelGlobal?: boolean): string => {\n  if (!str || !isString(str)) return str;\n  const patt = cancelGlobal ? /(^\\s+)|(\\s+$)/g : /\\s/g;\n  return str.replace(patt, '');\n};\n", "import { trim } from './trim.js';\n\n/**\n * 获取字符串字节长度\n * @param str\n * @returns\n */\nexport const getStrByteLen = (str: string) => {\n  const c = str.match(/[^x00-xff]/gi);\n  return str.length + (c == null ? 0 : c.length);\n};\n\n/**\n * 根据字节长度截取字符串\n * @param str\n * @param bytes\n * @returns\n */\nexport const subStringByBytes = (str: string, bytes: number) => {\n  let len = 0;\n  for (let i = 0; i < str.length; i++) {\n    len += str.charCodeAt(i) > 255 ? 2 : 1;\n    if (len > bytes) {\n      return str.substring(0, i);\n    }\n  }\n  return str;\n};\n\n/**\n * 根据[字节长度]来截取字符串\n * @param str 待截取字符数据\n * @param len 截取字节长度\n * @param flow 溢出符，默认...\n */\nexport const cutString = (\n  str: string,\n  bytes: number,\n  flow?: string\n): string => {\n  str = trim(str || '', true);\n  if (!str) return '';\n  const cutStr = subStringByBytes(str, bytes);\n  if (str.length > cutStr.length) {\n    return `${cutStr}${flow || '...'}`;\n  }\n  return cutStr;\n};\n", "import { isArray } from '@dimjs/lang';\nimport { trim } from './trim.js';\n\n/**\n * 字符串格式化\n * @param value 字符串\n * @param format 格式化间隙\n * @returns\n * ```\n * format('18512345678', [3, 4, 4]) => ['185', '1234', '5678']\n * format('18512345678', [3, 2]) => ['185', '12', '345678']\n * format('18512345678', [3, 20]) => ['185', '12345678']\n * format('18512345678', []) => ['18512345678']\n * ```\n */\nexport const stringFormat = (value: string, format: number[]) => {\n  try {\n    const newValue = trim(value || '');\n    if (!isArray(format) || format.length === 0) return [newValue];\n    const accumulation: { min: number; max: number }[] = [];\n    format.forEach((item, index) => {\n      if (index === 0) {\n        accumulation.push({ min: 0, max: item });\n      } else {\n        const preValue = accumulation[index - 1].max;\n        const currentValue = item + preValue;\n        accumulation.push({ min: preValue, max: currentValue });\n        if (index === format.length - 1 && currentValue < newValue.length) {\n          accumulation.push({ min: currentValue, max: newValue.length });\n        }\n      }\n    });\n    const strArray: string[] = [];\n    accumulation.forEach((item) => {\n      const temp = newValue.substring(item.min, item.max);\n      if (temp) {\n        strArray.push(temp);\n      }\n    });\n    return strArray;\n  } catch (error) {\n    console.error(error);\n  }\n  return [];\n};\n", "import { isUndefinedOrNull } from '../lang/index.js';\nimport type { TAny } from '../types/index.js';\n\n/**\n * 获取 value，如果为undefined、null，则返回 defaultValue\n * ```\n * 1. getValueOrDefault(undefined, '-') => '-'\n * 2. getValueOrDefault(0, '-') => 0\n * ```\n */\nexport const getValueOrDefault = (value: TAny, defaultValue: TAny) => {\n  return isUndefinedOrNull(value) ? defaultValue : value;\n};\n", "/**\n * json string 转 json 对象\n * ```\n * 非json字符串会抛异常\n * ```\n */\nexport const jsonStringToJsonObject = (jsonString: string) => {\n  try {\n    window['__json_string_transform'] = null;\n    let jsonValue = jsonString;\n    let count = 0;\n    while (typeof jsonValue != 'object') {\n      eval(`window.__json_string_transform=${jsonValue} `);\n      jsonValue = window['__json_string_transform'];\n      if (count === 10) {\n        throw new Error(`数据解析异常，【${jsonString}】`);\n      }\n      count++;\n    }\n    return jsonValue;\n  } catch (error: any) {\n    throw new Error(error?.message);\n  }\n};\n", "import { isArray } from '@dimjs/lang';\nimport { isUndefinedOrNull } from '../lang/is-empty.js';\nimport type { TAny } from '../types/index.js';\n\n/**\n * 两个值比较，只用于string、number类型的值比较\n * @param firstValue string、number\n * @param secondValue string、number、Array<string | number>\n * @returns\n * ```\n * 1. 不用区分具体是string还是number\n * 2. secondValue为数组时，firstValue只要和数组中的任意值相等，即返回true\n * ```\n */\nexport const valueIsEqual = (\n  firstValue?: string | number | boolean,\n  secondValue?: string | number | boolean | Array<string | number | boolean>\n) => {\n  const newFirst = !isUndefinedOrNull(firstValue) ? String(firstValue) : null;\n  if (isArray(secondValue)) {\n    const newSecond = (secondValue as TAny[]).map((item) => {\n      return !isUndefinedOrNull(item) ? String(item) : null;\n    });\n    return newSecond.findIndex((item) => newFirst === item) >= 0;\n  } else {\n    const newSecond = !isUndefinedOrNull(secondValue)\n      ? String(secondValue)\n      : null;\n    return newFirst === newSecond;\n  }\n};\n", "/**\n * 验证xml格式的正确性\n * ```\n *  result / true 验证通过\n *  result / false 验证不通过，message为失败描述\n * ```\n */\nexport const xmlValidate = (xmlContent: string) => {\n  // errorCode 0是xml正确，1是xml错误，2是无法验证\n  let errorCode = 0;\n  let errorMessage;\n  // code for IE\n  if (window['ActiveXObject']) {\n    const xmlDoc = new window['ActiveXObject']('Microsoft.XMLDOM');\n    xmlDoc.async = 'false';\n    xmlDoc.loadXML(xmlContent);\n\n    if (xmlDoc.parseError.errorCode != 0) {\n      errorMessage = `错误code: ${xmlDoc.parseError.errorCode} \\n`;\n      errorMessage = `${errorMessage} 错误原因: ${xmlDoc.parseError.reason} \\n`;\n      errorMessage = `${errorMessage} 错误位置: ${xmlDoc.parseError.line}`;\n      errorCode = 1;\n    } else {\n      errorMessage = '格式正确';\n    }\n  }\n  // code for Mozilla, Firefox, Opera, chrome, safari,etc.\n  else if (document.implementation['createDocument']) {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');\n    const error = xmlDoc.getElementsByTagName('parsererror');\n    if (error.length > 0) {\n      if (xmlDoc.documentElement.nodeName == 'parsererror') {\n        errorCode = 1;\n        errorMessage = xmlDoc.documentElement.childNodes[0].nodeValue;\n      } else {\n        errorCode = 1;\n        errorMessage = xmlDoc.getElementsByTagName('parsererror')[0].innerHTML;\n      }\n    } else {\n      errorMessage = '格式正确';\n    }\n  } else {\n    errorCode = 2;\n    errorMessage = '浏览器不支持验证，无法验证xml正确性';\n  }\n  return {\n    message: errorMessage,\n    result: errorCode == 0 ? true : false,\n  };\n};\n", "const storageKey = 'flatbiz';\n\nexport const localStorageCache = {\n  set: (key: string, value: Record<string, unknown>) => {\n    localStorage.setItem(`${storageKey}_${key}`, JSON.stringify(value));\n  },\n  get: (key: string) => {\n    try {\n      const value = localStorage.getItem(`${storageKey}_${key}`);\n      if (value) {\n        return JSON.parse(value) as Record<string, unknown>;\n      }\n    } catch (_error) {\n      //\n    }\n    return {} as Record<string, unknown>;\n  },\n  remove: (key: string) => {\n    localStorage.removeItem(`${storageKey}_${key}`);\n  },\n};\n\nexport const sessionStorageCache = {\n  set: (key: string, value: Record<string, unknown>) => {\n    sessionStorage.setItem(`${storageKey}_${key}`, JSON.stringify(value));\n  },\n  get: (key: string) => {\n    try {\n      const value = sessionStorage.getItem(`${storageKey}_${key}`);\n      if (value) {\n        return JSON.parse(value) as Record<string, unknown>;\n      }\n    } catch (_error) {\n      //\n    }\n    return {} as Record<string, unknown>;\n  },\n  remove: (key: string) => {\n    sessionStorage.removeItem(`${storageKey}_${key}`);\n  },\n};\n", "import { getQueryString } from '@dimjs/utils';\n\nexport const isMockMeEnv = () => {\n  const env = getQueryString('env');\n\n  return env === 'me';\n};\n\nexport const isMockDevEnv = () => {\n  const env = getQueryString('env');\n  return env === 'dev';\n};\n\n/** 是否为mac系统（包含iphone手机） */\nexport const isMacEnv = () => {\n  return /macintosh|mac os x/i.test(navigator.userAgent);\n};\n\n/** 是否为windows系统 */\nexport const isWindowsEnv = () => {\n  return /windows|win32|win64/i.test(navigator.userAgent);\n};\n", "/**\n * Mozilla/5.0 (Linux; Android 8.0.0; ALP-AL00 Build/HUAWEIALP-AL00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/63.0.3239.111 Mobile Safari/537.36/TcFinancial/9.01.06\n * return webview userAgent string.\n */\nexport const userAgent = () => {\n  return typeof navigator !== 'undefined'\n    ? navigator.userAgent.toLowerCase()\n    : '';\n};\n\n/**\n * Check if device is iphone, ipad.\n * @param ua client webview userAgent\n */\nexport const isIphone = () => {\n  return /(iphone|ipad)/i.test(userAgent());\n};\n\nexport const isMac = () => {\n  return /macintosh/i.test(userAgent());\n};\n\nexport const isIphoneOrMac = () => {\n  return isMac() && isIphone();\n};\n\n/**\n * Check if device is android.\n * @param ua client webview userAgent\n */\nexport const isAndroid = () => {\n  return /(android)/i.test(userAgent());\n};\n\n/**\n * 判断当前是否是fabric webview, 拥有插件调用能力\n * Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1 Fabric@inhome/1.0.0 Fabric/NoWebview\n * Fabric容器标识 `Fabric@inhome/1.0.0`\n * Fabric容器下通过?ntv_history打开的多一个标识 `Fabric/DisableWebview`注意此标识必须在应用级注入禁用标识, 并且不能随意改变策略, 否则定会出现兼容性问题.\n * @param ua\n */\nexport const isFabricWebview = (ua = userAgent()) => {\n  const isFabric = new RegExp('fabric@', 'i').test(ua);\n  // 目前`Fabric/DisableWebview`强制禁用fabric 能力,即便处于 fabric 容器\n  // FIXME:目前 native 处理`Fabric/NoWebview`行为不一致, 所以此处 强制 always 配置 `Fabric/DisableWebview`\n  const isDisallowFabric = new RegExp('Fabric/DisableWebview', 'i').test(ua);\n  return isFabric && !isDisallowFabric;\n};\n", "import { getUuid } from '../string/uuid.js';\nimport type { TPlainObject } from '../types/define.js';\n\nexport const getGlobalData = <T>() => {\n  return (window['GLOBAL'] || {}) as T;\n};\n\nexport const getWindow = <T>(key: string) => {\n  return window[key] as T;\n};\n\nexport const setWindow = (data: TPlainObject) => {\n  Object.keys(data).map((key) => {\n    window[key] = data[key];\n  });\n};\n\n/**\n * Web浏览器打开新窗口，替代window.open\n * ```\n * 直接使用window.open会被浏览器拦截\n * ```\n */\nexport const openNewWindow = (url: string) => {\n  const id = getUuid();\n  const aElement = document.createElement('a');\n  aElement.setAttribute('href', url);\n  aElement.setAttribute('target', '_blank');\n  aElement.setAttribute('id', id);\n  aElement.click();\n  setTimeout(() => {\n    aElement.parentNode?.removeChild(aElement);\n  }, 200);\n};\n", "import { isArray, isNumber, isString } from '@dimjs/lang';\nimport { cloneObject } from '../object/clone-object.js';\nimport { flatbizPrice } from '../price/index.js';\nimport { valueIsEqual } from '../string/index.js';\nimport { type TAny, type TPlainObject } from '../types/index.js';\n\n/**\n * 表格合并单元格计算\n *```\n * 操作字段包括合并字段、统计字段\n * 1. 合并字段用于计算单元格合并的格数\n * 2. 统计字段用于统计数值（数字类型），必须依赖于合并字段\n *\n * 计算完成后会在数据中添加部分字段\n * 1. 设置mergeFields mergeKey数组后，会在每一条数据中添加 [mergeKey]RowSpan合并单元格数量字段\n * 2. 设置mergeFields statisticKey后，会在数据中添加 [mergeKey]RowTotal统计字段\n *\n * 写法1：不存在统计字段\n *  tableMergeCellCalculate([], ['key1', 'key2'])\n * 写法2：存在统计字段\n *  tableMergeCellCalculate([], [{ mergeKey: 'key1' }, { mergeKey: 'key2', statisticKey: 'key3' }])\n *\n * demo： https://fex.qa.tcshuke.com/docs/admin/main/table/cell-merge\n *\n *```\n */\nexport const tableMergeCellCalculate = (\n  /** 内部会对数据进行拷贝操作 */\n  dataSource: TPlainObject[],\n  mergeFields:\n    | string[]\n    | {\n        /** 合并字段 */\n        mergeKey: string;\n        /** 统计字段 */\n        statisticKey?: string;\n      }[],\n  /** 分页信息 */\n  pagination?: {\n    pageNo: number;\n    pageSize: number;\n  }\n) => {\n  if (!isArray(dataSource) || dataSource.length === 0) return [];\n  const pageNo = pagination?.pageNo;\n  const pageSize = pagination?.pageSize;\n  if (pageNo === undefined || pageSize === undefined) {\n    dataSource = cloneObject(dataSource);\n  } else {\n    dataSource = cloneObject(\n      dataSource.slice((pageNo - 1) * pageSize, pageNo * pageSize)\n    );\n  }\n  if (!isArray(mergeFields) || mergeFields.length === 0) return dataSource;\n\n  const mergeFieldsGroup = [] as string[][];\n  mergeFields.forEach((item, index) => {\n    const mergeKey = (isString(item) ? item : item.mergeKey) as string;\n    if (index === 0) {\n      mergeFieldsGroup.push([mergeKey]);\n    } else {\n      mergeFieldsGroup.push([...mergeFieldsGroup[index - 1], mergeKey]);\n    }\n  });\n\n  function theSameSort(originalData: TPlainObject[], fieldList: string[]) {\n    let newOriginalData = [] as TPlainObject[];\n    const fieldValueList = originalData.map((originalItem) => {\n      const originalValue = fieldList\n        .map((temp) => originalItem[temp])\n        .join('_');\n      return originalValue;\n    });\n    const newFieldValueList = Array.from(new Set(fieldValueList));\n\n    newFieldValueList.map((filedValue) => {\n      const tempList = originalData.filter((originalItem) => {\n        const originalValue = fieldList\n          .map((temp) => originalItem[temp])\n          .join('_');\n        return filedValue === originalValue;\n      });\n      newOriginalData = newOriginalData.concat(tempList);\n    });\n    return newOriginalData;\n  }\n\n  // 对数据源进行排序\n  let newDataSource = dataSource;\n  mergeFieldsGroup.forEach((fields) => {\n    newDataSource = theSameSort(newDataSource, fields);\n  });\n\n  const dataSourceValueGroup = [] as TPlainObject[][];\n  mergeFieldsGroup.forEach((fieldsGroupItem) => {\n    const fieldValueList = [] as TPlainObject[];\n    newDataSource.forEach((dataSourceItem) => {\n      let mergeValue = null as unknown as TPlainObject;\n      fieldsGroupItem.forEach((fieldItem) => {\n        if (!mergeValue) {\n          mergeValue = {\n            value: dataSourceItem[fieldItem],\n            fields: fieldsGroupItem,\n            // item: dataSourceItem,\n          };\n        } else {\n          mergeValue = {\n            value: `${mergeValue.value}_${dataSourceItem[fieldItem]}`,\n            fields: fieldsGroupItem,\n          };\n        }\n      });\n      fieldValueList.push(mergeValue);\n    });\n    dataSourceValueGroup.push(fieldValueList);\n  });\n  const newDataSourceValueGroup = [] as TPlainObject[][];\n  dataSourceValueGroup.forEach((fieldValueList) => {\n    const newFieldValueList = [] as TPlainObject[];\n    fieldValueList.forEach((item, index) => {\n      if (index === 0) {\n        newFieldValueList.push({ ...item, count: 1 });\n      } else {\n        const targetIndex = newFieldValueList.findIndex((newItem) =>\n          valueIsEqual(newItem.value as string, item.value as string)\n        );\n        if (targetIndex >= 0) {\n          newFieldValueList[targetIndex].count =\n            (newFieldValueList[targetIndex].count as number) + 1;\n        } else {\n          newFieldValueList.push({ ...item, count: 1 });\n        }\n      }\n    });\n    newDataSourceValueGroup.push(newFieldValueList);\n  });\n  const valueUseList = [] as string[];\n  newDataSource.forEach((dataSourceItem) => {\n    newDataSourceValueGroup.forEach((item) => {\n      item.forEach((fieldValueItem) => {\n        const mergeValueList = [] as TAny[];\n        fieldValueItem.fields.forEach((fieldItem) => {\n          mergeValueList.push(dataSourceItem[fieldItem]);\n        });\n        const mergeValue = mergeValueList.join('_');\n        if (valueIsEqual(mergeValue, fieldValueItem.value as string)) {\n          const lastField =\n            fieldValueItem.fields[fieldValueItem.fields.length - 1];\n          if (!valueUseList.find((temp) => valueIsEqual(temp, mergeValue))) {\n            valueUseList.push(mergeValue);\n            dataSourceItem[`${lastField}RowSpan`] = fieldValueItem.count;\n          } else {\n            dataSourceItem[`${lastField}RowSpan`] = 0;\n          }\n        }\n      });\n    });\n  });\n  // 添加序号\n  let _mergeSerialNumber = 1;\n  newDataSource.forEach((item) => {\n    const target = mergeFields[0];\n    const mergeKey = typeof target === 'string' ? target : target.mergeKey;\n    if (item[`${mergeKey}RowSpan`] > 0) {\n      item['_mergeSerialNumber'] = _mergeSerialNumber;\n      _mergeSerialNumber += 1;\n    }\n  });\n\n  const targetList: { mergeKey: string; statisticKey: string }[] = [];\n  mergeFields.forEach((item) => {\n    if (item.statisticKey) {\n      targetList.push({\n        mergeKey: item.mergeKey,\n        statisticKey: item.statisticKey,\n      });\n    }\n  });\n  if (targetList.length > 0) {\n    targetList.forEach((statisticItem) => {\n      newDataSource.forEach((item, index) => {\n        const rowSpanValue = item[`${statisticItem.mergeKey}RowSpan`] as number;\n        if (rowSpanValue && rowSpanValue > 0) {\n          item[`${statisticItem.mergeKey}RowTotal`] = newDataSource\n            .slice(index, index + rowSpanValue)\n            .reduce((total, node) => {\n              const itemTotal = node[statisticItem.statisticKey];\n              return isNumber(itemTotal)\n                ? flatbizPrice.add(total, itemTotal)\n                : total;\n            }, 0);\n        }\n      });\n    });\n  }\n\n  return newDataSource;\n};\n", "import { isArray } from '@dimjs/lang';\nimport { arrayToMap } from '../array/array-to-map.js';\nimport { cloneObject } from '../object/clone-object.js';\nimport type { TPlainObject } from '../types/define.js';\n\n/**\n * 由平铺数组转为树数组\n */\nexport const tiledArrayToTree = (\n  dataList: TPlainObject[],\n  fieldNames: {\n    idKeyName: string;\n    pIdKeyName: string;\n    childrenKeyName: string;\n  },\n  // 是否为根节点（根节点可以为多个）\n  isRootNode: (dataItem: TPlainObject) => boolean\n) => {\n  if (!dataList.length) return [];\n  const dataListClone = cloneObject(dataList);\n  const rootNodeList: TPlainObject[] = [];\n  const { idKeyName, pIdKeyName, childrenKeyName } = fieldNames;\n  const dataListMap = arrayToMap(dataListClone, idKeyName);\n  dataListClone.forEach((item) => {\n    const isRootItem = isRootNode(item);\n    if (isRootItem) {\n      rootNodeList.push(item);\n      return;\n    }\n    const parent = dataListMap[item[pIdKeyName]];\n    if (parent) {\n      const parentChildren = parent[childrenKeyName];\n      if (isArray(parentChildren)) {\n        parentChildren.push(item);\n      } else {\n        parent[childrenKeyName] = [item];\n      }\n    }\n  });\n  if (!rootNodeList.length) {\n    console.warn('数据中未查询到根节点');\n    return [];\n  }\n  return rootNodeList;\n};\n", "import { isArray } from '@dimjs/lang';\nimport type { TPlainObject } from '../types/define.js';\n\n/**\n * 树结构数据，复制字段数据为新字段值（配置方式）\n * ```\n * 1. changeFieldNames => { '原字段': '新字段' }，原字段与新字段同时存在\n * 2. childrenName tree结构数据children字段名称，默认值：children\n * ```\n */\nexport const treeFieldNameChange = (\n  treeList: TPlainObject[],\n  changeFieldNames: TPlainObject<string>,\n  childrenName?: string\n) => {\n  const childrenKey = childrenName || 'children';\n  const changeFieldList = Object.keys(changeFieldNames);\n  function loopHandle(dataItem) {\n    if (!dataItem) return;\n    changeFieldList.forEach((fieldKey) => {\n      dataItem[changeFieldNames[fieldKey]] = dataItem[fieldKey];\n    });\n\n    if (dataItem[childrenKey] && isArray(dataItem[childrenKey])) {\n      dataItem[childrenKey].map((node) => {\n        loopHandle(node);\n      });\n    }\n  }\n\n  treeList.forEach((dataItem) => {\n    loopHandle(dataItem);\n  });\n\n  return treeList;\n};\n\n/**\n * 树结构数据，复制字段数据为新字段值（适配器方式）\n * ```\n * 1. treeItemAdapter 适配器，可在返回值添加新字段数据\n * 2. childrenName tree结构数据children字段名称，默认值：children\n * ```\n */\nexport const treeFieldNameChangeAdapter = (\n  treeList: TPlainObject[],\n  treeItemAdapter: (treeItem: TPlainObject) => TPlainObject,\n  childrenName?: string\n) => {\n  const childrenKey = childrenName || 'children';\n  function loopHandle(dataItem) {\n    if (!dataItem) return;\n    const adapterResult = treeItemAdapter(dataItem);\n    if (adapterResult) {\n      Object.keys(adapterResult).forEach((tempKey) => {\n        dataItem[tempKey] = adapterResult[tempKey];\n      });\n    }\n\n    if (dataItem[childrenKey] && isArray(dataItem[childrenKey])) {\n      dataItem[childrenKey].map((node) => {\n        loopHandle(node);\n      });\n    }\n  }\n\n  treeList.forEach((dataItem) => {\n    loopHandle(dataItem);\n  });\n\n  return treeList;\n};\n", "import type { TPlainObject } from '../types/define.js';\nimport { treeFieldNameChangeAdapter } from './tree-field-change.js';\n\n/**\n * 树结构数据递归遍历适配\n * ```\n * 1. adaptive 适配器，可在返回值添加新字段数据\n * 2. childrenName tree结构数据children字段名称，默认值：children\n * ```\n */\nexport const treeEachAdaptive = (\n  treeDataList: TPlainObject[],\n  adaptive: (data: TPlainObject) => TPlainObject,\n  childrenName?: string\n) => {\n  return treeFieldNameChangeAdapter(treeDataList, adaptive, childrenName);\n};\n", "import { isUndefined } from '@dimjs/lang';\nimport { isNotEmptyArray } from '../array/is-array.js';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 根据规则过滤tree数据\n * @param dataList tree 数据\n * @param filter 过滤条件 返回false 移除\n * @param options 配置项\n *\n * ```\n *  options配置项目中\n * 1. options.childrenName（tree数据数组节点key字段名称）\n *    默认值：children\n * 2. options.queryParentShowChildrenAll（过滤匹配到父节点是否显示全部子节点，默认值：true）\n *    true：匹配到父节点，则显示全部子节点\n *    false：未匹配到父节点，则移除所有子节点\n * ```\n */\nexport const treeFilter = (\n  dataList: TPlainObject[],\n  filter: (node) => boolean,\n  options?: {\n    childrenName?: string;\n    /** 过滤匹配到父节点是否显示全部子节点，默认：true */\n    queryParentShowChildrenAll?: boolean;\n  }\n) => {\n  const childrenName = options?.childrenName || 'children';\n  const queryParentShowChildrenAll = isUndefined(\n    options?.queryParentShowChildrenAll\n  )\n    ? true\n    : options?.queryParentShowChildrenAll;\n\n  return dataList.reduce((acc: TPlainObject[], node) => {\n    // 检查当前节点是否满足过滤条件\n    if (filter(node)) {\n      // 如果当前节点有子节点，递归地过滤子节点数组\n      if (isNotEmptyArray(node[childrenName])) {\n        if (queryParentShowChildrenAll) {\n          acc.push(node);\n          return acc;\n        }\n        node[childrenName] = treeFilter(node[childrenName], filter, options);\n        if (!isNotEmptyArray(node[childrenName])) {\n          node[childrenName] = undefined;\n        }\n        acc.push(node);\n      } else {\n        node[childrenName] = undefined;\n        acc.push(node);\n      }\n    } else {\n      if (isNotEmptyArray(node[childrenName])) {\n        node[childrenName] = treeFilter(node[childrenName], filter, options);\n        if (isNotEmptyArray(node[childrenName])) {\n          acc.push(node);\n        } else {\n          node[childrenName] = undefined;\n        }\n      }\n    }\n    return acc;\n  }, []);\n};\n", "import { isNotEmptyArray } from '../array/is-array.js';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 根据key值 删除 Tree数据节点以及所有子节点\n * @param key 待删除节点 key\n * @param treeList tree 数据\n * @param options tree 数据字段名称配置\n *\n */\nexport const treeItemDelete = (\n  key: string | number,\n  treeList: TPlainObject[],\n  options: { key: string; children: string }\n) => {\n  const childrenName = options.children;\n  return treeList.reduce((acc: TPlainObject[], node) => {\n    // 检查当前节点是否满足过滤条件\n    if (node[options.key] === key) {\n      // 如果当前节点有子节点，递归地过滤子节点数组\n      return acc;\n    } else {\n      if (isNotEmptyArray(node[childrenName])) {\n        node[childrenName] = treeItemDelete(key, node[childrenName], options);\n        if (!isNotEmptyArray(node[childrenName])) {\n          node[childrenName] = undefined;\n        }\n      }\n      acc.push(node);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n * 通过过滤器删除树形数据中的节点\n * @param treeList 树形数据\n * @param filter 过滤器 返回true 删除节点\n * @param childrenName\n *\n */\nexport const treeItemDeleteByFilter = (\n  treeList: TPlainObject[],\n  filter: (node: TPlainObject) => boolean,\n  childrenName?: string\n) => {\n  const childrenKey = childrenName || 'children';\n  return treeList.reduce((acc: TPlainObject[], node) => {\n    if (filter(node)) {\n      return acc;\n    } else {\n      if (isNotEmptyArray(node[childrenKey])) {\n        node[childrenKey] = treeItemDeleteByFilter(\n          node[childrenKey],\n          filter,\n          childrenKey\n        );\n        if (!isNotEmptyArray(node[childrenKey])) {\n          node[childrenKey] = undefined;\n        }\n      }\n      acc.push(node);\n    }\n    return acc;\n  }, []);\n};\n", "import { get } from '@dimjs/utils';\nimport { isUndefinedOrNull } from '../lang/index.js';\nimport type { TPlainObject } from '../types/index.js';\n\n/**\n * 树叶子节点的所有父节点列表\n * @deprecated 已过期，请使用 treeNodeParentsList 方法（入参中列表数据有区别，注意区分）\n * @param value 叶子节点值\n * @param treeTiledList 平铺树结构，可通过treeToArray 将tree数据转为tree平铺数据\n * @param hasSelf 返回是否包含叶子节点，默认值：false\n * @param fieldNames 字段配置，默认值 { value: 'value', parentValue: 'parentValue' }\n * ```\n * fieldNames.parentValue 可传多级，例如: 'parent.id'\n * ```\n */\nexport const treeLeafParentsArray = (\n  value: string | number,\n  treeTiledList: TPlainObject[],\n  hasSelf = false,\n  fieldNames?: { value: string; parentValue: string }\n) => {\n  const newFieldNames = {\n    value: 'value',\n    parentValue: 'parentValue',\n    ...fieldNames,\n  };\n  const tempList: TPlainObject[] = [];\n\n  function parseChildren(itemValue: string | number) {\n    const target = treeTiledList.find(\n      (temp) => temp[newFieldNames.value] === itemValue\n    );\n    if (target) {\n      tempList.push(target);\n      const parentValue = get(target, newFieldNames.parentValue);\n      if (!isUndefinedOrNull(parentValue)) {\n        parseChildren(parentValue);\n      }\n    }\n  }\n  parseChildren(value);\n  if (!hasSelf) {\n    if (tempList.length > 1) {\n      return tempList.splice(1, tempList.length - 1);\n    }\n    return [];\n  }\n  return tempList.reverse();\n};\n", "import type { TPlainObject } from '../types/define.js';\n\n/**\n * 树结构数据，由嵌套结构转成平铺【键值对】\n * @param treeDataList tree对象，数据中必须要有唯一值\n * @param fieldNames.value 数组对象中的唯一值\n * @param fieldNames.children 默认值：children\n * @param insertPIdKeyName pId字段名称，设置后树结构转为平铺结构时，会添加父子链路pId\n *\n *```\n * 例如：\n * [{ id: 1, name: '张三' }, { id: 2, name: '李四', chidren: [{ id: 3, name: '李四儿子', }] }]\n * =>\n * { 1: { id: 1, name: '张三' }, 2: { id: 2, name: '李四' }, 3: { id: 3, name: '李四儿子' } }\n * ```\n */\nexport const treeToTiledMap = (\n  treeDataList: TPlainObject[],\n  fieldNames: { value: string; children: string },\n  insertPIdFieldName?: string\n) => {\n  const childrenKey = fieldNames.children;\n  const valueKey = fieldNames.value;\n  const tempListMap: TPlainObject = {};\n  function parseChildren(nodeItem, pUid?) {\n    const uid = nodeItem[valueKey];\n    tempListMap[uid] = nodeItem;\n    if (insertPIdFieldName) {\n      nodeItem[insertPIdFieldName] = pUid;\n    }\n    if (nodeItem[childrenKey]) {\n      nodeItem[childrenKey].map((childrenIrem) => {\n        parseChildren(childrenIrem, uid);\n      });\n    }\n  }\n\n  treeDataList.forEach((node) => {\n    parseChildren(node);\n  });\n  return tempListMap;\n};\n", "import { cloneObject } from '../object/clone-object.js';\nimport type { TPlainObject } from '../types/index.js';\nimport { treeToTiledMap } from './tree-to-tiled-map.js';\n\n/**\n * 指定节点的所有父节点列表\n * @param value 叶子节点值\n * @param treeDataList 树结构数据\n * @param hasSelf 返回是否包含叶子节点，默认值：false\n * @param fieldNames 字段配置，默认值 { value: 'value', children: 'children' }\n * ```\n * 注意：树结构数据中节点value必须唯一不重复\n * ```\n */\nexport const treeNodeParentsList = (\n  value: string | number,\n  treeDataList: TPlainObject[],\n  hasSelf = false,\n  fieldNames?: { value: string; children: string }\n) => {\n  const valueKey = fieldNames?.value || 'value';\n  const childrenKey = fieldNames?.children || 'children';\n  const treeListFt = cloneObject(treeDataList);\n  const tempList: Array<string | number> = [];\n  const treeTiledMap = treeToTiledMap(\n    treeListFt,\n    {\n      value: valueKey,\n      children: childrenKey,\n    },\n    'pId'\n  );\n  let parentNode = treeTiledMap[value];\n  while (parentNode) {\n    const pId = parentNode.pId;\n    parentNode = treeTiledMap[pId];\n    if (parentNode) {\n      tempList.push(pId);\n    }\n  }\n  if (hasSelf) {\n    return [value, ...tempList];\n  }\n  return tempList;\n};\n", "import type { TPlainObject } from '../types/define.js';\n\n/**\n * 树结构数据，由嵌套结构转成平铺结构，返回值不改变原数据命名\n * @param dataList\n * @param childrenName\n * @param insertPId pId字段设置，设置后树结构转为平铺结构时，会添加父子链路pId\n */\nexport const treeToArray = (\n  treeDataList: TPlainObject[],\n  childrenName: string,\n  /**\n   * pId字段设置，设置后树结构转为平铺结构时，会添加父子链路pId\n   * ```\n   * idName：数组元素唯一值字段名称\n   * pIdKeyName: 向数组元素中添加pId的字段名称\n   * ```\n   */\n  insertPId?: { idName: string; pIdKeyName: string }\n) => {\n  const tempList: TPlainObject[] = [];\n  function parseChildren(nodeItem, pId) {\n    tempList.push(nodeItem);\n    if (insertPId) {\n      nodeItem[insertPId.pIdKeyName] = pId;\n    }\n    const uid = insertPId?.idName ? nodeItem[insertPId.idName] : undefined;\n    if (nodeItem[childrenName]) {\n      nodeItem[childrenName].map((node) => {\n        parseChildren(node, uid);\n      });\n    }\n  }\n\n  treeDataList.forEach((node) => {\n    parseChildren(node, undefined);\n  });\n  return tempList;\n};\n", "import { extend } from '@dimjs/utils';\nimport type { TAny, TPlainObject } from '../types/define.js';\nimport type { TreeTiledDataItem } from '../types/index.js';\n\n/**\n * 树结构数据，由嵌套结构转成平铺结构，返回数据格式根据fieldNames转换成 { value, label, parentValue }\n * @param dataList\n * @param fieldNames\n * @returns\n */\nexport const treeToTiledArray = (\n  dataList: TPlainObject[],\n  fieldNames?: { label?: string; value?: string; children?: string }\n) => {\n  const newFieldNames = extend(\n    {},\n    { label: 'label', value: 'value', children: 'children' },\n    fieldNames\n  );\n  const labelKey = newFieldNames.label;\n  const valueKey = newFieldNames.value;\n  const childrenKey = newFieldNames.children;\n  const tempList: Array<TreeTiledDataItem & { [key: string]: TAny }> = [];\n  function parseChildren(nodeItem, parentValue) {\n    tempList.push({\n      ...nodeItem,\n      label: nodeItem[labelKey],\n      value: nodeItem[valueKey],\n      parentValue,\n    });\n    if (nodeItem[childrenKey]) {\n      nodeItem[childrenKey].map((node) => {\n        parseChildren(node, nodeItem[valueKey]);\n      });\n    }\n  }\n\n  dataList.forEach((node) => {\n    parseChildren(node, undefined);\n  });\n\n  return tempList;\n};\n", "/**\n * 字符串前后斜线，拼接和取消\n * @param str\n * @param slashFix 默认值 true\n * @returns\n * ```\n * 例如：\n * 1. ensureSlash('/abc', true) => /abc/\n * 2. ensureSlash('abc', true) => /abc/\n * 3. ensureSlash('/abc/', false) => abc\n * ```\n *\n */\nexport const ensureSlash = (str: string, slashFix = true) => {\n  str = str.replace(/\\/$/, '').replace(/^\\//, '');\n  return slashFix ? `/${str}/` : str;\n};\n", "import { isArray } from '@dimjs/lang';\nimport { getQueryString, modifyQueryString } from '@dimjs/utils';\nimport { getWindow, isMockMeEnv } from '../system/index.js';\nimport type { TPlainObject } from '../types/define.js';\n\nconst userAgent = () => {\n  return navigator.userAgent.toLowerCase();\n};\n\nconst isFabricWebview = () => {\n  return new RegExp('fabric@', 'i').test(userAgent());\n};\n\n/**\n * 向path中拼接query数据，内部项目使用\n * ```\n * 1.默认query值\n *  1). env 非生产环境有效\n *  2). fabric-callback-key【webview通信key值】\n *  3). accessToken【env=me环境下有效】\n *  4). 业务流程参数 window.bizProcessUrlParam 配置的key值\n * 2.query中undefined会被过滤\n * ```\n */\nexport const toLinkPath = (path: string, query: TPlainObject = {}) => {\n  const newQauery = { ...query, ntv_indicator: '1' } as TPlainObject;\n  const env = getQueryString('env');\n  if (env && env !== 'prod') {\n    newQauery.env = env;\n  }\n\n  const media = getQueryString('media');\n  if (media) {\n    newQauery.media = media;\n  }\n\n  if (window['ntv_indicator'] === false || !isFabricWebview()) {\n    newQauery.ntv_indicator = undefined;\n  }\n\n  // 业务流程参数\n  const bizProcessUrlParam = getWindow<string[]>('bizProcessUrlParam');\n  if (isArray(bizProcessUrlParam) && bizProcessUrlParam.length > 0) {\n    bizProcessUrlParam.forEach((paramKey) => {\n      const keyValue = getQueryString(paramKey);\n      if (keyValue) {\n        newQauery[paramKey] = keyValue;\n      }\n    });\n  }\n\n  const fabricCallbackKey = getQueryString('fabric-callback-key') || '';\n  if (fabricCallbackKey) {\n    newQauery['fabric-callback-key'] = fabricCallbackKey;\n  }\n\n  const accessToken = getQueryString('accessToken') || '';\n  if (accessToken && isMockMeEnv()) {\n    newQauery.accessToken = accessToken;\n  }\n  // 将query中的值为 undefined 过滤了\n  const filterQuery = {} as TPlainObject;\n  Object.keys(newQauery).filter((key) => {\n    if (newQauery[key] !== undefined && newQauery[key] !== null) {\n      filterQuery[key] = newQauery[key];\n    }\n  });\n  return modifyQueryString(path, filterQuery);\n};\n", "export const urlJoin = (first: string, second: string) => {\n  return (\n    (first || '').replace(/\\/$/, '') + '/' + (second || '').replace(/^\\//, '')\n  );\n};\n\n/**\n * url片段拼接\n * @param first\n * @param second\n * @returns\n */\nexport const urlJoinMulti = (firstUrl: string, ...fragment: string[]) => {\n  let str = firstUrl;\n  fragment.forEach((item) => {\n    str = urlJoin(str, item);\n  });\n  return str;\n};\n", "import { getGlobalData } from '../system/window.js';\nimport type { TPlainObject } from '../types/define.js';\nimport { toLinkPath } from './to-link-path.js';\nimport { urlJoin } from './url-join.js';\n\n/**\n * 获取指定项目模块地址\n * @param module\n */\nexport const getModuleUrl = (module: string, query: TPlainObject = {}) => {\n  const global = getGlobalData<{ routeBaseName: string; hostUrl: string }>();\n  const routeBaseName: string = global.routeBaseName;\n  const hostUrl: string = global.hostUrl;\n  const urlBase = urlJoin(hostUrl, routeBaseName);\n  return toLinkPath(urlJoin(urlBase, module), query);\n};\n", "export const isHttpUri = (uri: string): boolean => {\n  return !uri\n    ? false\n    : uri.startsWith('//') || new RegExp('(https|http)?://').test(uri);\n};\n", "import { ensureSlash } from './ensure-slash.js';\n\n/**\n * 比较两个path是否相等\n * @param targetPath 目标path\n * @param comparedPath 被比较path\n * @returns\n */\nexport const pathEqual = (targetPath: string, comparedPath: string) => {\n  return (\n    ensureSlash(targetPath || '', true) ===\n    ensureSlash(comparedPath || '', true)\n  );\n};\n\n/**\n * 比较comparedPath是否包含targetPath\n * @param targetPath 目标path\n * @param comparedPath 被比较path\n * @returns\n */\nexport const pathEqualInclude = (targetPath: string, comparedPath: string) => {\n  return (\n    ensureSlash(comparedPath || '', true).indexOf(\n      ensureSlash(targetPath || '', true)\n    ) >= 0\n  );\n};\n", "import { isString } from '@dimjs/lang';\nimport { isUndefinedOrNull } from '../lang/is-empty.js';\n\n/**\n * 移除字符串前后斜线\n * @param str\n * @param position\n * @returns\n * ```\n * 例如：\n * 1. removeSlash('/abc', 'before') => abc\n * 2. removeSlash('/abc/', 'after') => /abc\n * 3. removeSlash('/abc/', 'before-after') => abc\n * ```\n *\n */\nexport const removeSlash = (\n  str: string,\n  position: 'before' | 'after' | 'before-after'\n) => {\n  if (!isString(str) || isUndefinedOrNull(str)) return '';\n  if (position === 'before' || position === 'before-after') {\n    if (str.startsWith('/')) {\n      str = str.substring(1);\n    }\n  }\n  if (position === 'after' || position === 'before-after') {\n    if (str.endsWith('/')) {\n      str = str.substring(0, str.length - 1);\n    }\n  }\n  return str;\n};\n", "import { isHttpUrl } from '@dimjs/utils';\n\n/**\n * 根据当前地址协议，获取完整的url地址\n * ```\n * 例如\n * //xxx.com => https://xxx.com\n * ```\n */\nexport const toFullPath = (url: string) => {\n  if (isHttpUrl(url)) {\n    if (url.startsWith('//')) {\n      return `${location.protocol}${url}`;\n    }\n  }\n  return url;\n};\n", "import { modifyQueryString, paramStrToJson } from '@dimjs/utils';\nimport type { TPlainObject } from '../types/define.js';\n\nexport const toLinkPathWithQuery = (path: string, query: TPlainObject = {}) => {\n  return modifyQueryString(\n    path,\n    Object.assign(paramStrToJson(window.location.href), query)\n  );\n};\n", "import { uriParse } from '@dimjs/utils';\nimport { getGlobalData } from '../system/index.js';\nimport { ensureSlash } from './ensure-slash.js';\nimport { isHttpUri } from './is-http-url.js';\n\nexport const getUrlRoute = (url: string) => {\n  if (!isHttpUri(url)) return url;\n  const pathname = uriParse(url || '').pathname || '';\n  const { routeBaseName } = getGlobalData<{ routeBaseName: string }>();\n  const route = ensureSlash(pathname, true).replace(\n    ensureSlash(routeBaseName, true),\n    ''\n  );\n  return `/${ensureSlash(route, false)}`;\n};\n", "import { dateFormat } from '../date/format.js';\n\nexport const is18IdCard = (sId: string) => {\n  if (!/^\\d{17}(\\d|X|x)$/.test(sId)) {\n    console.log(`[${sId}]:你输入的身份证长度或格式错误`);\n    return false;\n  }\n  //身份证城市\n  const aCity = {\n    11: '北京',\n    12: '天津',\n    13: '河北',\n    14: '山西',\n    15: '内蒙古',\n    21: '辽宁',\n    22: '吉林',\n    23: '黑龙江',\n    31: '上海',\n    32: '江苏',\n    33: '浙江',\n    34: '安徽',\n    35: '福建',\n    36: '江西',\n    37: '山东',\n    41: '河南',\n    42: '湖北',\n    43: '湖南',\n    44: '广东',\n    45: '广西',\n    46: '海南',\n    50: '重庆',\n    51: '四川',\n    52: '贵州',\n    53: '云南',\n    54: '西藏',\n    61: '陕西',\n    62: '甘肃',\n    63: '青海',\n    64: '宁夏',\n    65: '新疆',\n    71: '台湾',\n    81: '香港',\n    82: '澳门',\n    91: '国外',\n  };\n  if (!aCity[parseInt(sId.substring(0, 2))]) {\n    console.log(`[${sId}]:你的身份证地区非法`);\n    return false;\n  }\n\n  const sBirthday = `${sId.substring(6, 10)}/${sId.substring(10, 12)}/${sId.substring(12, 14)}`;\n\n  const d = new Date(sBirthday);\n  if (sBirthday != dateFormat(d, 'YYYY/MM/DD')) {\n    console.log(`[${sId}]:身份证上的出生日期非法`);\n    return false;\n  }\n\n  // 身份证号码校验\n  let sum = 0;\n  const weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n  const codes = '10X98765432';\n  for (let i = 0; i < sId.length - 1; i++) {\n    sum += (sId[i] as unknown as number) * weights[i];\n  }\n  const last = codes[sum % 11]; //计算出来的最后一位身份证号码\n  if (sId[sId.length - 1] != last) {\n    console.log(`[${sId}]:你输入的身份证号非法`);\n    return false;\n  }\n\n  return true;\n};\n", "export const flatbizRegExp = {\n  /** 汉字格式  */\n  chineseCharactersRegExp: /[\\u4e00-\\u9fa5]/,\n  /** 手机号格式  */\n  mobileRegExp: /^1[0-9]{10}$/,\n  /** 正整数格式 */\n  integerRegExp: /^[0-9]*$/,\n  /** 金额格式  */\n  amountRegExp: /^(([1-9]\\d*)|0)(\\.\\d{1,})?$/,\n  /** 密码格式：英文大小写、数字、符号[!@#$%^&*?.]其中两种及以上，长度8-20位 */\n  passwordRegExp:\n    /^.*(?=.{8,20})((?=.*\\d)(?=.*[A-Z]))|((?=.*\\d)(?=.*[a-z]))|((?=.*\\d)(?=.*[!@#$%^&*?.]))|((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[!@#$%^&*?.]))|((?=.*[a-z])(?=.*[!@#$%^&*?.])).*$/,\n  /** 8-20位数字和字母的组合 */\n  passwordRegExp2: /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,20}$/,\n};\n"],
  "mappings": "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",
  "names": ["isUndefinedOrNull", "value", "undefined", "arrayField2LabelValue", "dataList", "fieldNames", "isReserve", "dataListNew", "fieldNamesNew", "_extend", "label", "isReserveNew", "map", "item", "respData", "arrayFilter", "targetValue", "fieldName", "filter", "arrayFilterByLoosely", "arrayFind", "find", "arrayFindByLoosely", "arrayFindIndex", "findIndex", "arrayFindIndexByLoosely", "arrayMax", "array", "fieldKey", "max", "forEach", "itemValue", "_isPlainObject", "_isNumber", "arrayMin", "min", "arrayPick", "result", "target", "concat", "arrayPickByLoosely", "arrayReorder", "sourceIndex", "targetIndex", "Array", "from", "length", "console", "warn", "removed", "splice", "arraysReorder", "arrays", "source", "sourceItems", "parentIndex", "sourceTarget", "index", "sourceItemsNew", "_arrayRemove", "targetItems", "newOverItems", "slice", "cloneObject", "obj", "JSON", "parse", "stringify", "uuidFactory", "now", "Date", "_cache", "substring", "getUuid", "arraySetUid", "options", "uidFieldNameFt", "uidFieldName", "arrayFt", "returnNewArray", "arraySplit", "newArray", "push", "arrayToMap", "uidName", "arrayTotal", "total", "generateIntArray", "to", "i", "isNotEmptyArray", "_isArray", "isEmptyArray", "listInList", "sourceList", "targetList", "inRuleFieldName", "resultList", "sourceItem", "arrayRandomSort", "sort", "Math", "random", "toArray", "twoArrayElementPositionChange", "sourceArray", "targetArray", "dateNormalize", "dateInput", "Error", "String", "_dateNormalize", "dateTimeGte", "date1", "date2", "date1Fmt", "date2Fmt", "getTime", "dateTimeGt", "dateTimeEq", "dateTimeIn", "targetDate", "minDate", "maxDate", "weekConfig", "dateDetail", "dateInstance", "week", "getDay", "type7Week", "y", "getFullYear", "m", "getMonth", "d", "getDate", "h", "getHours", "mi", "getMinutes", "s", "getSeconds", "ms", "getMilliseconds", "weekString", "instance", "dateNew", "mode", "number", "_dateNew", "isDate", "_error", "dateFormat", "format", "_dateFormat", "flatbizDate", "gte", "gt", "eq", "detail", "update", "in", "findParentsElement", "originNode", "verify", "parentNode", "overflowScrollReg", "defaultRoot", "window", "isElement", "node", "ELEMENT_NODE_TYPE", "tagName", "nodeType", "getScrollNode", "el", "root", "overflowY", "getComputedStyle", "test", "bodyAppendDivElement", "id", "div", "document", "createElement", "idNew", "setAttribute", "body", "append", "divElement", "elementId", "createDivElement", "removeBodyChild", "element", "removeChild", "querySelector", "dom", "base64ToFile", "dataurl", "filename", "arr", "split", "mime", "match", "bstr", "atob", "n", "u8arr", "Uint8Array", "charCodeAt", "File", "type", "fileToBase64", "file", "Promise", "resolve", "reject", "reader", "FileReader", "readAsDataURL", "onload", "base64", "onerror", "error", "imageCompressToBase64", "imageFile", "optionsNew", "quality", "ratio", "threshold", "suffix", "name", "lastIndexOf", "imageName", "imageSuffix", "base64Suffix", "toLocaleLowerCase", "isLegal", "includes", "then", "imgBase64", "needCompress", "info", "fileMb", "size", "imgage", "Image", "src", "that", "width", "height", "canvas", "ctx", "getContext", "drawImage", "toDataURL", "catch", "imageCompressToFormData", "formDataKey", "at", "formData", "FormData", "compressInfo", "bytes", "blob", "Blob", "imageCompressToFile", "noop", "isNumber", "num", "isNaN", "Number", "enumValues", "enumeration", "keys", "Object", "k", "mapToListExact", "mapData", "valueList", "labelName", "valueName", "colorMap", "tempList", "color", "mapToList", "list", "key", "objectGetObject", "objectData", "keyList", "temp", "targetKey", "beforeKey", "resultKey", "afterKey", "objectKeys", "prototype", "defineProperty", "enumerable", "configurable", "writable", "trunc", "is", "x", "polyfill", "log", "add", "amt", "amt2", "option", "_price", "precision", "subtract", "multiply", "divide", "priceFen2wan", "defaultValue", "priceFen2yuan", "priceFormat", "separator", "symbol", "priceRemoveTailZero", "priceFt", "parseFloat", "firstValue", "priceSplit", "priceWan2fen", "priceYuan2fen", "flatbizPrice", "fen2yuan", "fen2wan", "yuan2fen", "wan2fen", "removeTailZero", "attachPropertiesToComponent", "component", "properties", "ret", "hasOwnProperty", "call", "composeProps", "originProps", "patchProps", "isMerge", "isMergeNew", "_isUndefined", "composedProps", "func", "args", "sleep", "time", "setTimeout", "trim", "str", "cancelGlobal", "_isString", "patt", "replace", "getStrByteLen", "c", "subStringByBytes", "len", "cutString", "flow", "cutStr", "stringFormat", "newValue", "accumulation", "preValue", "currentValue", "strArray", "getValueOrDefault", "jsonStringToJsonObject", "jsonString", "jsonValue", "count", "eval", "message", "valueIsEqual", "secondValue", "newFirst", "newSecond", "xmlValidate", "xmlContent", "errorCode", "errorMessage", "xmlDoc", "async", "loadXML", "parseError", "reason", "line", "implementation", "parser", "DOMParser", "parseFromString", "getElementsByTagName", "documentElement", "nodeName", "childNodes", "nodeValue", "innerHTML", "storageKey", "localStorageCache", "set", "localStorage", "setItem", "get", "getItem", "remove", "removeItem", "sessionStorageCache", "sessionStorage", "isMockMeEnv", "env", "_getQueryString", "isMockDevEnv", "isMacEnv", "navigator", "userAgent", "isWindowsEnv", "toLowerCase", "isIphone", "isMac", "isIphoneOrMac", "isAndroid", "isFabricWebview", "ua", "isFabric", "RegExp", "isDisallowFabric", "getGlobalData", "getWindow", "setWindow", "data", "openNewWindow", "url", "aElement", "click", "tableMergeCellCalculate", "dataSource", "mergeFields", "pagination", "pageNo", "pageSize", "mergeFieldsGroup", "mergeKey", "theSameSort", "originalData", "fieldList", "newOriginalData", "fieldValueList", "originalItem", "originalValue", "join", "newFieldValueList", "Set", "filedValue", "newDataSource", "fields", "dataSourceValueGroup", "fieldsGroupItem", "dataSourceItem", "mergeValue", "fieldItem", "newDataSourceValueGroup", "newItem", "valueUseList", "fieldValueItem", "mergeValueList", "lastField", "_mergeSerialNumber", "statisticKey", "statisticItem", "rowSpanValue", "reduce", "itemTotal", "tiledArrayToTree", "isRootNode", "dataListClone", "rootNodeList", "idKeyName", "pIdKeyName", "childrenKeyName", "dataListMap", "isRootItem", "parent", "parentChildren", "treeFieldNameChange", "treeList", "changeFieldNames", "childrenName", "childrenKey", "changeFieldList", "loopHandle", "dataItem", "treeFieldNameChangeAdapter", "treeItemAdapter", "adapterResult", "tempKey", "treeEachAdaptive", "treeDataList", "adaptive", "treeFilter", "queryParentShowChildrenAll", "acc", "treeItemDelete", "children", "treeItemDeleteByFilter", "treeLeafParentsArray", "treeTiledList", "hasSelf", "newFieldNames", "parentValue", "parseChildren", "_get", "reverse", "treeToTiledMap", "insertPIdFieldName", "valueKey", "tempListMap", "nodeItem", "pUid", "uid", "childrenIrem", "treeNodeParentsList", "treeListFt", "treeTiledMap", "pId", "treeToArray", "insertPId", "idName", "treeToTiledArray", "labelKey", "ensureSlash", "slashFix", "toLinkPath", "path", "query", "newQauery", "ntv_indicator", "media", "bizProcessUrlParam", "paramKey", "keyValue", "fabricCallbackKey", "accessToken", "filterQuery", "_modifyQueryString", "urlJoin", "first", "second", "urlJoinMulti", "firstUrl", "fragment", "getModuleUrl", "module", "global", "routeBaseName", "hostUrl", "urlBase", "isHttpUri", "uri", "startsWith", "pathEqual", "targetPath", "comparedPath", "pathEqualInclude", "indexOf", "removeSlash", "position", "endsWith", "toFullPath", "_isHttpUrl", "location", "protocol", "toLinkPathWithQuery", "assign", "_paramStrToJson", "href", "getUrlRoute", "pathname", "_uriParse", "route", "is18IdCard", "sId", "aCity", "parseInt", "sBirthday", "sum", "weights", "codes", "last", "flatbizRegExp", "chineseCharactersRegExp", "mobileRegExp", "integerRegExp", "amountRegExp", "passwordRegExp", "passwordRegExp2"]
}
