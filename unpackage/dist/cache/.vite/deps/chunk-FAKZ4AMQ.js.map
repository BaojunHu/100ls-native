{
  "version": 3,
  "sources": ["../../../../../node_modules/@dimjs/lang/dist/_rollupPluginBabelHelpers-BzjuU56d.js", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/type.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-plain-object.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-array.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-function.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-object-like.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-number.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-undefined.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-string.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-standard-browser-env.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-null.ts"],
  "sourcesContent": ["/*! @flatjs/forge MIT @dimjs/lang */\nfunction o(t){\"@babel/helpers - typeof\";return o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&\"function\"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?\"symbol\":typeof o},o(t)}export{o as _};\n//# sourceMappingURL=_rollupPluginBabelHelpers-BzjuU56d.js.map\n", "/**\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 2\n */\ntype ValueOf<T> = T[keyof T];\n\n/**\n * @description\n * An object that maps JavaScript types to their corresponding string representations.\n *\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 1\n */\nconst TYPES = {\n  boolean: 'boolean',\n  undefined: 'undefined',\n  number: 'number',\n  string: 'string',\n  '[object Object]': 'object',\n  '[object Function]': 'function',\n  '[object RegExp]': 'regexp',\n  '[object Array]': 'array',\n  '[object Date]': 'date',\n  '[object Error]': 'error',\n  '[object Blob]': 'blob',\n  '[object File]': 'file',\n  '[object DOMException]': 'domError',\n  '[object ArrayBuffer]': 'arrayBuffer',\n} as const;\n\n/**\n * @description\n * Returns the type of the given value.\n *\n * @param value - The value to determine the type of.\n * @returns The type of the value.\n *\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 3\n */\nexport function type(value): ValueOf<typeof TYPES> {\n  return (\n    TYPES[typeof value] ||\n    TYPES[Object.prototype.toString.call(value)] ||\n    (value ? 'object' : 'null')\n  );\n}\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is a `plain object`, that is, an object created by the Object constructor or one with a [[Prototype]] of null.\n *\n * @example\n * ``` ts\n * isPlainObject({ array: [] });\n * // => true\n * isPlainObject({});\n * // => true\n * isPlainObject(new A());\n * // => false\n * isPlainObject(null);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a plain object, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-plain-object\n */\nexport const isPlainObject = (value): boolean => {\n  if (type(value) !== 'object') {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.prototype;\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as an `Array` object.\n *\n * @example\n * ``` ts\n * isArray([]);\n * // => true\n * isArray(null);\n * // => false\n * isArray(undefined);\n * // => false\n * isArray({ length: 5 });\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is an array, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-array\n */\nexport const isArray = (value) => {\n  return Array.isArray(value) || type(value) === 'array';\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as a `Function` object.\n *\n * @example\n * ``` ts\n * isFunction(() => {});\n * // => true\n * isFunction(undefined);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a function, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-function\n */\nexport const isFunction = (value): value is () => void => {\n  return type(value) === 'function';\n};\n", "/**\n * @description\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @example\n * ``` ts\n * isObjectLike({});\n * // => true\n * isObjectLike([1, 2, 3]);\n * // => true\n * isObjectLike(() => ({}));\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns `true` if `value` is object-like, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-object-like\n */\nexport const isObjectLike = (value) => {\n  return value != null && typeof value == 'object';\n};\n", "import { isObjectLike } from './is-object-like.js';\nimport { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * @example\n * ``` ts\n * isNumber(123);\n * // => true\n * isNumber(NaN);\n * // => true\n * isNumber(Number.MIN_VALUE);\n * // => true\n * isNumber('123');\n * // => false\n * ```\n *\n * @note\n * To exclude Infinity, -Infinity, and NaN, which are classified as numbers\n *\n * @param value The value to check.\n * @returns Returns true if value is a number, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-number\n */\nexport const isNumber = (value): value is number => {\n  return (\n    type(value) === 'number' ||\n    (isObjectLike(value) &&\n      Object.prototype.toString.call(value) == '[object Number]')\n  );\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if value is undefined.\n *\n * @example\n * ``` ts\n * isUndefined(undefined);\n * // => true\n * isUndefined(null);\n * // => false\n * isUndefined({});\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is `undefined`, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-undefined\n */\nexport const isUndefined = (value?): boolean => {\n  return type(value) === 'undefined';\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @example\n * ``` ts\n * isString('');\n * // => true\n * isString(1);\n * // => false\n * isString({toString() {return '';}})\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a string, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-string\n */\nexport const isString = (value): value is string => {\n  return type(value) === 'string';\n};\n", "/**\n *  @docsCategory preference/lang\n */\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * @description\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n * - typeof window -> undefined\n * - typeof document -> undefined\n *\n * react-native:\n * - navigator.product -> 'ReactNative'\n *\n * nativescript\n * - navigator.product -> 'NativeScript' or 'NS'\n *\n * @docsCategory preference/lang\n * @codeFilter is-standard-browser-env\n */\nexport function isStandardBrowserEnv() {\n  if (\n    typeof navigator !== 'undefined' &&\n    (navigator.product === 'ReactNative' ||\n      navigator.product === 'NativeScript' ||\n      navigator.product === 'NS')\n  ) {\n    return false;\n  }\n  return canUseDOM;\n}\n", "/**\n * @description\n * Checks if `value` is `null`.\n *\n * @example\n * ``` ts\n * isNull(null);\n * // => true\n * isNull(undefined);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is null, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-null\n */\nexport const isNull = (value): boolean => {\n  return value === null;\n};\n"],
  "mappings": ";AACA,SAAS,EAAEA,IAAE;AAAC;AAA0B,SAAO,IAAE,cAAY,OAAO,UAAQ,YAAU,OAAO,OAAO,WAAS,SAASC,IAAE;AAAC,WAAO,OAAOA;AAAA,EAAC,IAAE,SAASA,IAAE;AAAC,WAAOA,MAAG,cAAY,OAAO,UAAQA,GAAE,gBAAc,UAAQA,OAAI,OAAO,YAAU,WAAS,OAAOA;AAAA,EAAC,GAAE,EAAED,EAAC;AAAC;;;ACc/P,IAAME,IAAQ,EACZC,SAAS,WACTC,WAAW,aACXC,QAAQ,UACRC,QAAQ,UACR,mBAAmB,UACnB,qBAAqB,YACrB,mBAAmB,UACnB,kBAAkB,SAClB,iBAAiB,QACjB,kBAAkB,SAClB,iBAAiB,QACjB,iBAAiB,QACjB,yBAAyB,YACzB,wBAAwB,cAAA;AAcnB,SAASC,GAAKC,IAAAA;AACnB,SACEN,EAAKO,EAAQD,EAAAA,CAAAA,KACbN,EAAMQ,OAAOC,UAAUC,SAASC,KAAKL,EAAAA,CAAAA,MACpCA,KAAQ,WAAW;AAExB;;;ICzBaM,IAAgB,SAAhBA,GAAiBC,IAAAA;AAC5B,MAAIC,GAAKD,EAAAA,MAAW,UAAU;AAC5B,WAAO;EACT;AACA,MAAME,KAAYC,OAAOC,eAAeJ,EAAAA;AACxC,SAAOE,OAAc,QAAQA,OAAcC,OAAOD;AACpD;;;ICNaG,IAAU,SAAVA,GAAWC,IAAAA;AACtB,SAAOC,MAAMF,QAAQC,EAAAA,KAAUE,GAAKF,EAAAA,MAAW;AACjD;;;ICNaG,IAAa,SAAbA,GAAcC,IAAAA;AACzB,SAAOC,GAAKD,EAAAA,MAAW;AACzB;;;ICDaE,IAAe,SAAfA,GAAgBC,IAAAA;AAC3B,SAAOA,MAAS,QAAQC,EAAOD,EAAAA,KAAS;AAC1C;;;ICKaE,KAAW,SAAXA,GAAYC,IAAAA;AACvB,SACEC,GAAKD,EAAAA,MAAW,YACfE,EAAaF,EAAAA,KACZG,OAAOC,UAAUC,SAASC,KAAKN,EAAAA,KAAU;AAE/C;;;ICZaO,KAAc,SAAdA,GAAeC,IAAAA;AAC1B,SAAOC,GAAKD,EAAAA,MAAW;AACzB;;;ICFaE,KAAW,SAAXA,GAAYC,IAAAA;AACvB,SAAOC,GAAKD,EAAAA,MAAW;AACzB;;;ACrBA,IAAME,KAAAA,CAAAA,EAAAA,OACGC,WAAW,eAClBA,OAAOC,YACPD,OAAOC,SAASC;AAuBX,SAASC,KAAAA;AACd,MAAA,OACSC,cAAc,gBACpBA,UAAUC,YAAY,iBACrBD,UAAUC,YAAY,kBACtBD,UAAUC,YAAY,OACxB;AACA,WAAO;EACT;AACA,SAAON;AACT;;;ICrBaO,IAAS,SAATA,GAAUC,IAAAA;AACrB,SAAOA,OAAU;AACnB;",
  "names": ["t", "o", "TYPES", "boolean", "undefined", "number", "string", "type", "value", "_typeof", "Object", "prototype", "toString", "call", "isPlainObject", "value", "type", "prototype", "Object", "getPrototypeOf", "isArray", "value", "Array", "type", "isFunction", "value", "type", "isObjectLike", "value", "_typeof", "isNumber", "value", "type", "isObjectLike", "Object", "prototype", "toString", "call", "isUndefined", "value", "type", "isString", "value", "type", "canUseDOM", "window", "document", "createElement", "isStandardBrowserEnv", "navigator", "product", "isNull", "value"]
}
