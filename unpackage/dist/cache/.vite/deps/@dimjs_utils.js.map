{
  "version": 3,
  "sources": ["../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-pad.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-chunk.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-flatten.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-flatten-deep.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-group-by.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-pad-length.ts", "../../../../../node_modules/@dimjs/utils/dist/array/@dimjs/utils/src/array/array-unique.ts", "../../../../../node_modules/@dimjs/utils/dist/bind/@dimjs/utils/src/bind/bind.ts", "../../../../../node_modules/@dimjs/utils/dist/class-names/@dimjs/utils/src/class-names/class-names.ts", "../../../../../node_modules/@dimjs/utils/dist/cookie/@dimjs/utils/src/cookie/cookie-read.ts", "../../../../../node_modules/@dimjs/utils/dist/cookie/@dimjs/utils/src/cookie/cookie-write.ts", "../../../../../node_modules/@dimjs/utils/dist/cookie/@dimjs/utils/src/cookie/cookie-remove.ts", "../../../../../node_modules/@dimjs/utils/dist/date/@dimjs/utils/src/date/time-remaining.ts", "../../../../../node_modules/@dimjs/utils/dist/debounce/@dimjs/utils/src/debounce/debounce.ts", "../../../../../node_modules/@dimjs/utils/dist/env/@dimjs/utils/src/env/get-env-name.ts", "../../../../../node_modules/@dimjs/utils/dist/env/@dimjs/utils/src/env/get-env-config.ts", "../../../../../node_modules/@dimjs/utils/dist/for-each/@dimjs/utils/src/for-each/for-each.ts", "../../../../../node_modules/@dimjs/utils/dist/get-ctx/@dimjs/utils/src/get-ctx/get-ctx.ts", "../../../../../node_modules/@dimjs/utils/dist/json/@dimjs/utils/src/json/parse.ts", "../../../../../node_modules/@dimjs/utils/dist/json/@dimjs/utils/src/json/deep-parse.ts", "../../../../../node_modules/@dimjs/utils/dist/json/@dimjs/utils/src/json/sort.ts", "../../../../../node_modules/@dimjs/utils/dist/json/@dimjs/utils/src/json/stringify.ts", "../../../../../node_modules/@dimjs/utils/dist/merge-options/@dimjs/utils/src/merge-options/simple-deep-clone.ts", "../../../../../node_modules/@dimjs/utils/dist/merge-options/@dimjs/utils/src/merge-options/merge-options.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/digit-length.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/enable-boundary-checking.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/strip.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/float2-fixed.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/times.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/divide.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/minus.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/plus.ts", "../../../../../node_modules/@dimjs/utils/dist/number/@dimjs/utils/src/number/round.ts", "../../../../../node_modules/@dimjs/utils/dist/remove-properties-by/@dimjs/utils/src/remove-properties-by/remove-properties-by.ts", "../../../../../node_modules/@dimjs/utils/dist/omit/@dimjs/utils/src/omit/omit.ts", "../../../../../node_modules/@dimjs/utils/dist/pick/@dimjs/utils/src/pick/pick.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/constant.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/validate.ts", "../../../../../node_modules/@dimjs/utils/dist/@dimjs/utils/src/semver/types.ts", "../../../../../node_modules/@dimjs/utils/dist/@dimjs/utils/src/semver/utils.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/eq.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/gt.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/gte.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/lt.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/lte.ts", "../../../../../node_modules/@dimjs/utils/dist/semver/@dimjs/utils/src/semver/normalize.ts", "../../../../../node_modules/@dimjs/utils/dist/set/@dimjs/utils/src/set/set.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-camel-case.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-capitalize.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-capitalize-all.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-clean.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-trim.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-format.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-format-bankcard.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-format-idcard.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-format-tel.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-kebab-case.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-repeat.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-pad.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-mask.ts", "../../../../../node_modules/@dimjs/utils/dist/string/@dimjs/utils/src/string/str-trans-camel.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/constant.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/array-to-tree.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/array-to-tree2.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/filter-tree.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/filter-tree-sync.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/find-ancestors.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/tree-to-array.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/update-tree.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/update-tree-sync.ts", "../../../../../node_modules/@dimjs/utils/dist/tree/@dimjs/utils/src/tree/walk-through-tree.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/combine-urls.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/has-query-string.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/is-absolute-url.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/is-same-origin.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/params-clean.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/params-serialize.ts", "../../../../../node_modules/@dimjs/utils/dist/uri/@dimjs/utils/src/uri/remove-query-string.ts", "../../../../../node_modules/@dimjs/utils/dist/uuid/@dimjs/utils/src/uuid/uuid.ts"],
  "sourcesContent": ["/**\n * @description\n * Module for returning arrays with a specific length by padding values.\n *\n * @example\n * ``` ts\n * arrayPad([], 2, '*');\n * // => ['*', '*']\n * arrayPad([], 2, '**');\n * // => ['**', '**']\n * ```\n *\n * @param array The array to pad.\n * @param length The padding length.\n * @param chars The string used as padding.\n * @returns Array\\<T\\>\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-pad\n */\nexport function arrayPad<T = string>(\n  array: Array<T>,\n  length: number,\n  chars: T\n) {\n  if (array.length < length) {\n    // [10.02.20] Fixed error that Dimitry K noticed\n\n    while (true) {\n      if (array.push(chars) >= length) {\n        break;\n      }\n    }\n  }\n  return array;\n}\n", "import { arrayPad } from './array-pad.js';\n\n/**\n * @description\n * Split array into multi chunks\n *\n * @example\n * ``` ts\n * arrayChunk([1, 2, 3, 4, 5, 6], 2);\n * // => [\n * //     [1, 2],\n * //     [3, 4],\n * //     [5, 6],\n * //   ]\n * ```\n *\n * @param arr the array data\n * @param size chunks size\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-chunk\n */\nexport const arrayChunk = <T>(arr: T[], size: number): T[][] => {\n  const arrRange = arrayPad([], Math.ceil(arr.length / size), '');\n  return arrRange.map((_, i) => arr.slice(size * i, size + size * i));\n};\n", "export type Recursive<T> = Array<T | Recursive<T>>;\n\n/**\n * @description\n * Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n *\n * @example\n * ``` ts\n * arrayFlattenDeep([1, 2, [3, 4, [5, 6]]]);\n * // => [1, 2, 3, 4, [5, 6]]\n * arrayFlatten([1, 2, [3, 4, [5, 6]]], 2);\n * // => [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @param arr The array to flatten.\n * @param depth default 1\n * @returns A new array with the sub-array elements concatenated into it.\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-flatten\n */\nexport function arrayFlatten<T>(arr: Recursive<T>, depth = 1): Recursive<T> {\n  if (!Array.isArray(arr)) {\n    return arr;\n  }\n  return depth > 0\n    ? arr.reduce<T[]>(\n        (acc, val) => acc.concat(arrayFlatten(val as T[], depth - 1) as T[]),\n        []\n      )\n    : arr.slice();\n}\n", "import type { Recursive } from './array-flatten.js';\nimport { arrayFlatten } from './array-flatten.js';\n\n/**\n * @description\n * Recursively flattens array.\n *\n * @example\n * ``` ts\n * arrayFlatten([1, 2, [3, 4, [5, 6]]]);\n * // => [ 1, 2, 3, 4, 5, 6 ]\n * ```\n *\n * @param arr The array to flatten.\n * @returns Returns the new flattened array.\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-flatten-deep\n */\nexport function arrayFlattenDeep<T>(arr: Recursive<T>): Array<T> {\n  return arrayFlatten(arr, Infinity) as Array<T>;\n}\n", "/**\n * @description\n * Groups elements of an array based on the result of a callback function.\n *\n * @example\n * ``` ts\n * arrayGroupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2],'6': [6.1, 6.3] }\n * ```\n *\n * @param array The array to process\n * @param callback Function to determine the group key for each element\n * @returns An object with the grouped elements\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-group-by\n */\nexport function arrayGroupBy<T>(\n  array: T[],\n  callback: (item: T) => string | number\n): Record<string | number, T[]> {\n  return array.reduce(\n    (result, item) => {\n      const key = callback(item);\n\n      // If the key doesn't exist yet, create a new array\n      if (!result[key]) {\n        result[key] = [];\n      }\n\n      // Add the item to its group\n      result[key].push(item);\n\n      return result;\n    },\n    {} as Record<string | number, T[]>\n  );\n}\n", "import { isArray } from '@dimjs/lang';\n\n/**\n * @description\n * Returns an array with a specified length by padding, left-padding and right-padding\n *\n * @example\n * ``` ts\n * const one = arrayPadLength([1, 2, 3], -5, 0);\n * one.join('.')\n * // => '0.0.1.2.3'\n * const three = arrayPadLength(two, 7, 9);\n * three.join('.')\n * // => '1.2.3.0.0.9.9'\n * ```\n *\n * @param array array\n * @param length Specifies the number of values to the left or right pad `-5` | `5` sign `-` indicates direction 'left'\n * @param value A placeholder of filling\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-pad-length\n */\nexport const arrayPadLength = <T>(\n  array: T[],\n  length: number,\n  value?: T\n): T[] => {\n  if (!isArray(array)) {\n    throw new TypeError('must be an array');\n  }\n  const method = length < 0 ? 'unshift' : 'push';\n  const total = Math.abs(length);\n\n  if (typeof length !== 'number' || total % 1 !== 0) {\n    throw new TypeError('length must be an integer');\n  }\n  while (array.length < total) {\n    array[method](value as T);\n  }\n  return array;\n};\n", "/**\n * @description\n * Returns an array with only unique values. Objects are compared by reference,\n * unless the `byKey` argument is supplied, in which case matching properties will\n * be used to check duplicates\n *\n * @example\n * ``` ts\n * arrayUnique(['a', 'a', 'b', 'a', 'c', 'a', 'd']);\n * // => ['a', 'b', 'c', 'd']\n * arrayUnique([a, b, a, b, c, a])[1];\n * // => b\n * ```\n *\n * @param arr The array to remove duplicates from.\n * @param byKey Optional key to specify a property to compare for uniqueness.\n * @returns A new array with duplicate elements removed.\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-unique\n */\nexport function arrayUnique<T>(arr: T[], byKey?: keyof T): T[] {\n  if (byKey === null || byKey === undefined) {\n    return Array.from(new Set(arr));\n  } else {\n    // Based on https://stackoverflow.com/a/58429784/772859\n    return [...new Map(arr.map((item) => [item[byKey], item])).values()];\n  }\n}\n", "/**\n * @description\n * Binds a function to a specific context and partially applies arguments.\n *\n * @example\n * ``` ts\n * const o = { val: 123 };\n * const f = bind(function (this: { val: number }, num: number) {\n *     return this.val * num;\n * }, o);\n * //=>246\n * ```\n *\n * @param fn - The function to bind.\n * @param args - The arguments to partially apply.\n * @returns A new function that, when called, will invoke the original function with the specified context and partially applied arguments.\n *\n * @docsCategory preference/utils/bind\n * @codeFilter bind\n */\nexport const bind = (fn: Function, ...args) => {\n  const [context, ...funcArgs] = args;\n  return function wrap(...wrapArgs) {\n    return fn.apply(context, funcArgs.concat(wrapArgs)) as Function;\n  };\n};\n", "/**\n * @docsCategory preference/utils/class-names\n * @docsPage types-class-names\n */\nexport type ClassValue =\n  | string\n  | number\n  | undefined\n  | null\n  | boolean\n  | Record<string, unknown>\n  | ClassArray;\n\n/**\n * @docsCategory preference/utils/class-names\n * @docsPage types-class-names\n */\nexport type ClassArray = Array<ClassValue>;\n\n/**\n * @docsCategory preference/utils/class-names\n * @docsPage types-class-names\n */\nexport interface ClassNamesFn {\n  (...classes: ClassValue[]): string;\n}\n\n/**\n * @description\n * Concatenates and returns a string of CSS class names.\n *\n * @example\n * ``` ts\n * classNames('', 'b', {}, '');\n * // => 'b'\n * classNames(['a', 'b'], ['c', 'd']);\n * // => 'a b c d'\n * ```\n *\n * @param args - The class names to be concatenated.\n * @returns A string of concatenated class names.\n *\n * @docsCategory preference/utils/class-names\n * @codeFilter class-names\n */\nexport const classNames: ClassNamesFn = (...args: ClassValue[]) => {\n  const classes: ClassValue[] = [];\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (!arg) continue;\n    if (typeof arg === 'string' || typeof arg === 'number') {\n      classes.push(arg);\n    } else if (Array.isArray(arg)) {\n      if (arg.length) {\n        const inner = classNames(...arg);\n        if (inner) {\n          classes.push(inner);\n        }\n      }\n    } else if (typeof arg === 'object') {\n      if (arg.toString !== Object.prototype.toString) {\n        classes.push(arg.toString());\n      } else {\n        for (const key in arg) {\n          if (Object.prototype.hasOwnProperty.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n  return classes.join(' ');\n};\n", "import { isStandardBrowserEnv } from '@dimjs/lang';\n\n/**\n * @description\n * Reads the value of a cookie by its name.\n *\n * @example\n * ``` ts\n * cookieWrite('foo', 'abc');\n * cookieRead('foo');\n * // => abc\n * ```\n *\n * @param name - The name of the cookie.\n * @returns The value of the cookie, or null if the cookie does not exist.\n *\n * @docsCategory preference/utils/cookie\n * @codeFilter cookie\n */\nexport const cookieRead = (name: string): string | null => {\n  if (!isStandardBrowserEnv()) {\n    return null;\n  }\n  const match = new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)').exec(\n    document.cookie\n  );\n  return match ? decodeURIComponent(match[3]) : null;\n};\n", "import { isNumber, isStandardBrowserEnv, isString } from '@dimjs/lang';\n\n/**\n * @description\n * Writes a cookie with the specified name, value, and optional parameters.\n *\n * @example\n * ``` ts\n * cookieWrite('foo', 'bar baz%');\n * document.cookie.indexOf('foo=bar%20baz%25') !== -1;\n * // => true\n * ```\n *\n * @param name - The name of the cookie.\n * @param value - The value of the cookie.\n * @param expires - The expiration date of the cookie (in milliseconds since Unix Epoch).\n * @param path - The path on the server where the cookie is valid.\n * @param domain - The domain where the cookie is valid.\n * @param secure - Indicates if the cookie should only be transmitted over secure HTTPS connections.\n *\n * @docsCategory preference/utils/cookie\n * @codeFilter cookie\n */\nexport const cookieWrite = (\n  name: string,\n  value: string,\n  expires?: number,\n  path?: string,\n  domain?: string,\n  secure = false\n): void => {\n  if (!isStandardBrowserEnv()) {\n    return;\n  }\n  const cookie: string[] = [name + '=' + encodeURIComponent(value)];\n  if (expires && isNumber(expires)) {\n    cookie.push('expires=' + new Date(expires).toUTCString());\n  }\n  if (path && isString(path)) {\n    cookie.push(`path=${path}`);\n  }\n  if (domain && isString(domain)) {\n    cookie.push(`domain=${domain}`);\n  }\n  if (secure === true) {\n    cookie.push('secure');\n  }\n  document.cookie = cookie.join('; ');\n};\n", "import { cookieWrite } from './cookie-write.js';\n\n/**\n * @description\n * Removes a cookie by setting its value to an empty string and setting the expiration date to the past.\n *\n * @example\n * ``` ts\n * cookieWrite('foo', 'abc');\n * cookieRemove('foo');\n * cookieRead('foo');\n * // => null\n * ```\n *\n * @param name - The name of the cookie to remove.\n *\n * @docsCategory preference/utils/cookie\n * @codeFilter cookie\n */\nexport const cookieRemove = (name: string): void => {\n  cookieWrite(name, '', Date.now() - 86400000);\n};\n", "import { dateFormat } from './date-format.js';\n\n/**\n * @description\n * Calculate how much time is left\n *\n * @note\n * format(hh时mm分ss秒)is required.\n *\n * @example\n * ``` ts\n * timeRemaining(10000, 'YYYY-MM-DD hh:mm:ss秒', '剩余');\n * // => 剩余10秒\n * timeRemaining(3600000, 'YYYY-MM-DD hh:mm:ss秒', '剩余');\n * // => 剩余1:00:00秒\n * ```\n *\n * @param currTime 20000 left the timestrap\n * @param format YYYY年MM月DD日 hh时mm分ss秒\n * @param prefix `剩余`\n * @returns 剩余23时58分\n *\n * @docsCategory preference/utils/date\n * @codeFilter time-remaining\n */\nexport const timeRemaining = (\n  currTime: number,\n  format = 'YYYY-MM-DD hh:mm:ss',\n  prefix = '剩余'\n): string => {\n  const orginalDate = new Date('2000/01/01');\n  const originalDataTick = orginalDate.getTime();\n  const originalFormatedDate = dateFormat(orginalDate, format);\n  const newDate = originalDataTick + currTime;\n  const newFormatedDate = dateFormat(new Date(newDate), format);\n  const newChars = newFormatedDate.split('');\n  const oldChars = originalFormatedDate.split('');\n  let diff = '';\n  for (let i = 0; i < newChars.length; i++) {\n    if (oldChars[i] !== newChars[i]) {\n      diff = newFormatedDate.substr(i);\n      break;\n    }\n  }\n  return diff ? prefix + diff : diff;\n};\n", "/**\n * @docsCategory preference/utils/debounce\n * @docsPage types-debounce\n */\nexport type Procedure = (...args) => void;\n\n/**\n * @docsCategory preference/utils/debounce\n * @docsPage types-debounce\n */\nexport interface DebounceOptions {\n  // if set to true then originalFunction will be called immediately, but on subsequent calls of the debounced function original function won't be called, unless waitMilliseconds passed after last call\n  isImmediate: boolean;\n}\n\n/**\n * @description\n * Debounce create a new function g, which when called will delay the invocation of the original function f until n milliseconds after it was last called.\n *\n * @example\n * ``` ts\n * const debouncedFunction = debounce(func, 100);\n * ```\n *\n * @param func the function which we want to debounce\n * @param waitMilliseconds how many seconds must pass after most recent function call, for the original function to be called\n * @param options\n *\n * @docsCategory preference/utils/debounce\n * @codeFilter debounce\n */\nexport function debounce<F extends Procedure>(\n  func: F,\n  waitMilliseconds = 50,\n  options: DebounceOptions = { isImmediate: false }\n) {\n  let timeoutId;\n  // Allow us dynamic bound `this`\n  return function (this, ...args) {\n    const shouldCallNow = options.isImmediate && timeoutId === undefined;\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      timeoutId = undefined;\n      if (!options.isImmediate) {\n        func.apply(this, args);\n      }\n    }, waitMilliseconds);\n\n    if (shouldCallNow) {\n      func.apply(this, args);\n    }\n  };\n}\n", "import { getQueryString } from '../uri/get-query-string.js';\n\n/**\n * @description\n * Retrieves the environment name from the query string or returns 'prod' as the default value.\n *\n * @param key - The key to retrieve the environment name from the query string. Defaults to 'env'.\n * @returns The environment name.\n *\n * @docsCategory preference/utils/env\n * @codeFilter get-env-name\n */\nexport const getEnvName = (key = 'env') => {\n  return getQueryString(key) || 'prod';\n};\n", "import { isObject, isRegexp } from '@dimjs/lang';\nimport { get } from '../get/get.js';\nimport { getEnvName } from './get-env-name.js';\n\n/**\n * Retrieves the environment-specific configuration value from a given source object.\n *\n * @example\n * ``` ts\n * class EnvConfig {\n *  public rsaPublicKey = {\n *    local: 'local',\n *     prod: 'prod',\n *   };\n * };\n * const envConfig = new EnvConfig();\n * env.getEnvConfig(envConfig, 'rsaPublicKey', 'local')\n * // => local\n * ```\n *\n * @template T - The type of the configuration value to retrieve.\n * @param source - The source object to retrieve the configuration value from.\n * @param path - The path to the configuration value within the source object.\n * @param envName - Optional. The name of the environment. If not provided, the default environment name will be used.\n * @returns The environment-specific configuration value, or `undefined` if not found.\n *\n * @docsCategory preference/utils/env\n * @codeFilter get-env-config\n */\nexport const getEnvConfig = <T = string>(\n  source,\n  path: string,\n  envName?: string\n): T | undefined => {\n  const env = envName || getEnvName();\n  const configNode = get(source, path, undefined);\n  if (isObject(configNode) && !isRegexp(configNode)) {\n    return get(configNode, `${env}`, undefined) as T;\n  } else {\n    return configNode as T;\n  }\n};\n", "import { isArray } from '@dimjs/lang';\n\n/**\n * @description\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * @example\n * ``` ts\n *   let sum = 0;\n *\n *    forEach([1, 2, 3, 4, 5], function (val) {\n *      sum += val;\n *    });\n *\n *    console.log(sum);\n * // => 15\n * ```\n *\n * - If `obj` is an Array callback will be called passing\n * - the value, index, and complete array for each item.\n *\n * - If 'obj' is an Object callback will be called passing\n * - the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @docsCategory preference/utils/for-each\n * @codeFilter for-each\n */\nexport function forEach(obj, fn: (value, key, source) => void) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (let i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n", "import { get } from '../get/get.js';\nimport { type Path } from './types.js';\n\n/**\n * @description\n * Get the context of target `path` object\n *\n * @param source The object to query.\n * @param path The path of the property to get.\n *\n * @docsCategory preference/utils/get-ctx\n * @codeFilter get-ctx\n */\nexport const getCtx = <\n  T extends Record<string, any> | null | undefined,\n  K extends Path<T>,\n>(\n  source: T,\n  path: K,\n  defaultValue?\n) => {\n  // contains `a.b.x`\n  if (/\\./.test(path)) {\n    return get(\n      source,\n      path.split('.').slice(0, -1).join('.') as Path<T>,\n      defaultValue\n    ) as unknown;\n  }\n  return source;\n};\n", "import { isString } from '@dimjs/lang';\n\n/**\n * @description\n * Parses a JSON string or object and returns the parsed result.\n *\n * @param json - The JSON string or object to parse.\n * @returns The parsed result.\n *\n * @docsCategory preference/utils/json\n * @codeFilter parse\n */\nexport const parse = <T = unknown>(json): T => {\n  const result = isString(json) ? JSON.parse(json) : json;\n  return result as T;\n};\n", "import { isObject, isString } from '@dimjs/lang';\nimport { parse } from './parse.js';\n\n/**\n * @docsCategory preference/utils/json\n * @docsPage types-deep-parse\n */\ntype PlainObject = Record<string, any>;\n\n/**\n * Note: 610523198909255112 parse will lose 112 to 200\n * @param itemValue\n *\n * @docsCategory preference/utils/json\n * @docsPage types-deep-parse\n */\nconst tryParseValue = (itemValue): unknown => {\n  // 如果字符串，并且是非数字的字符串，执行转换来避免精度丢失问题\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (isString(itemValue) && isNaN(itemValue)) {\n    try {\n      return parse(itemValue);\n    } catch {\n      // JSON.parse('ddd') ==> return 'ddd';\n      // 忽略报错，直接返回当前字符串即可.\n      // console.error(e);\n      return itemValue;\n    }\n  }\n  return itemValue;\n};\n\n/**\n * @description\n * Recursively parses a JSON string or object, converting stringified values to their corresponding types.\n * If the input is an object, it will traverse the object and parse each value recursively.\n *\n * @param jsonStr - The JSON string or object to parse.\n * @param result - The result object to store the parsed values. Defaults to an empty object.\n * @returns The parsed JSON object with stringified values converted to their corresponding types.\n *\n * @docsCategory preference/utils/json\n * @codeFilter deep-parse\n * @docsPage deep-parse\n */\nexport const deepParse = (\n  jsonStr: string | PlainObject,\n  result: PlainObject = {}\n): unknown => {\n  const outerJson: PlainObject = parse(jsonStr) || {};\n  if (isString(outerJson)) {\n    return tryParseValue(outerJson);\n  } else {\n    // handle (object | array)\n    Object.keys(outerJson).forEach((key) => {\n      const next = (result[key] = tryParseValue(outerJson[key])) as PlainObject;\n      if (isObject(next)) {\n        deepParse(next, next);\n      }\n    });\n  }\n  return result;\n};\n", "/**\n * @docsCategory preference/utils/json\n * @codeFilter sort\n * @docsPage sort\n */\ntype SortJsonProps = {\n  level?: number;\n  depth?: number;\n  reverse?: boolean;\n  ignoreCase?: boolean;\n};\n/**\n * @description\n * Sorts the keys on objects\n *\n * @example\n * ``` ts\n * sort({ C: 3, a: 1, B: 2 }, { ignoreCase: true });\n * //=> { a: 1, B: 2, C: 3 }\n * ```\n *\n * @param {*} old                           - An object to sort the keys of, if not object just\n * @param {Object} [sortOptions = {}]       - optional parameters\n * @param [options.reverse = false]         - When sorting keys, converts all keys to lowercase so\n * @param [options.ignoreCase = false]      - When sorting keys, converts all keys to\n * @param [options.depth = Infinity]        - Depth's level sorting keys on a\n * @returns {*}                             - Object with sorted keys, if old wasn't an object\n *                                            returns whatever was passed\n * @docsCategory preference/utils/json\n * @codeFilter sort\n * @docsPage sort\n */\nexport const sort = (\n  old: Record<string, any>,\n  options?: SortJsonProps\n): Record<string, any> => {\n  const sortOptions = options || {};\n  const ignoreCase = sortOptions.ignoreCase || false;\n  const reverse = sortOptions.reverse || false;\n  const depth = sortOptions.depth || Infinity;\n  const level = sortOptions.level || 1;\n  const processing = level <= depth;\n\n  if (typeof old !== 'object' || old === null) {\n    return old;\n  }\n\n  const copy = Array.isArray(old) ? [] : {};\n  let keys = Object.keys(old);\n  if (processing) {\n    keys = ignoreCase\n      ? keys.sort((left, right) =>\n          left.toLowerCase().localeCompare(right.toLowerCase())\n        )\n      : keys.sort();\n  }\n\n  if (reverse) {\n    keys = keys.reverse();\n  }\n  keys.forEach((key) => {\n    const subSortOptions = Object.assign({}, sortOptions);\n    subSortOptions.level = level + 1;\n    copy[key] = sort(old[key], subSortOptions);\n  });\n\n  return copy;\n};\n", "/**\n * @description\n * Converts an object to a JSON string.\n *\n * @example\n * ``` ts\n * JSON.stringify(610523198909255112)\n * // => \"610523198909255200\"\n * ```\n *\n * @param obj - The object to be converted.\n * @param pretty - The number of spaces to use for indentation (optional).\n * @returns The JSON string representation of the object.\n *\n *\n * @docsCategory preference/utils/json\n * @codeFilter stringify\n */\nexport const stringify = (obj, pretty = 0) => {\n  return JSON.stringify(obj, null, pretty);\n};\n", "/**\n * Simple object check.\n * From https://stackoverflow.com/a/34749873/772859\n *\n * @docsCategory preference/utils/merge-options\n * @docsPage types-simple-deep-clone\n */\nexport function isObject(item: any): item is object {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\n/**\n * @docsCategory preference/utils/merge-options\n * @docsPage types-simple-deep-clone\n */\nexport function isClassInstance(item: any): boolean {\n  // Even if item is an object, it might not have a constructor as in the\n  // case when it is a null-prototype object, i.e. created using `Object.create(null)`.\n  return (\n    isObject(item) && item.constructor && item.constructor.name !== 'Object'\n  );\n}\n/**\n * @description\n * An extremely fast function for deep-cloning an object which only contains simple\n * values, i.e. primitives, arrays and nested simple objects.\n *\n * @docsCategory preference/utils/merge-options\n * @codeFilter simple-deep-clone\n */\nexport function simpleDeepClone<T extends string | number | any[] | object>(\n  input: T\n): T {\n  // if not array or object or is null return self\n  if (typeof input !== 'object' || input === null) {\n    return input;\n  }\n  let output: any;\n  let i: number | string;\n  // handle case: array\n  if (input instanceof Array) {\n    let l;\n    output = [] as any[];\n    for (i = 0, l = input.length; i < l; i++) {\n      output[i] = simpleDeepClone(input[i]);\n    }\n    return output;\n  }\n  if (isClassInstance(input)) {\n    return input;\n  }\n  // handle case: object\n  output = {};\n  for (i in input) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (input.hasOwnProperty(i)) {\n      output[i] = simpleDeepClone((input as any)[i]);\n    }\n  }\n  return output;\n}\n", "/**\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nimport {\n  isClassInstance,\n  isObject,\n  simpleDeepClone,\n} from './simple-deep-clone.js';\n\n/**\n * @description\n * A recursive implementation of the Partial\\<T\\> type.\n * Source: https://stackoverflow.com/a/49936686/772859\n *\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?:\n    | null\n    | (T[P] extends Array<infer U>\n        ? Array<DeepPartial<U>>\n        : T[P] extends ReadonlyArray<infer U>\n          ? ReadonlyArray<DeepPartial<U>>\n          : DeepPartial<T[P]>);\n};\n\n/**\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nconst needMerge = (source, mergeUndefined?: boolean) => {\n  return !(typeof source === 'undefined' && !mergeUndefined);\n};\n\n/**\n * @description\n * Performs a deep merge of two Plugin options merge objects. Unlike `Object.assign()` the `target` object is\n * not mutated, instead the function returns a new object which is the result of deeply merging the\n * values of `source` into `target`.\n *\n * Arrays do not get merged, they are treated as a single value that will be replaced. So if merging the\n * `plugins` array, you must explicitly concatenate the array.\n *\n * @example\n * ``` ts\n * const result = mergeOptions(defaultConfig, {\n *   assetOptions: {\n *     uploadMaxFileSize: 5000,\n *   },\n *   plugins: [\n *     ...defaultConfig.plugins,\n *     MyPlugin,\n *   ]\n * };\n * ```\n *\n * @param {T} target - The target object to merge into.\n * @param {DeepPartial<T>} source - The source object to merge from.\n * @param {boolean} [mergeUndefined=false] - Whether to merge undefined values.\n * @param {number} [depth=0] - The current depth of the merge operation.\n * @returns {T} - The merged object.\n *\n * @docsCategory preference/utils/merge-options\n * @codeFilter merge-options\n * @docsPage merge-options\n */\nexport function mergeOptions<T>(\n  target: T,\n  source: DeepPartial<T>,\n  mergeUndefined = false,\n  depth = 0\n): T {\n  if (!source) {\n    return target;\n  }\n\n  if (depth === 0) {\n    target = simpleDeepClone(target as any);\n  }\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        // `target[key]=true` we also need to assign {} as key\n        if (!isObject((target as any)[key])) {\n          Object.assign(target, { [key]: {} });\n        }\n        if (!isClassInstance(source[key])) {\n          mergeOptions(\n            (target as any)[key],\n            (source as any)[key],\n            mergeUndefined,\n            depth + 1\n          );\n        } else {\n          if (needMerge(source[key], mergeUndefined)) {\n            (target as any)[key] = source[key];\n          }\n        }\n      } else {\n        if (needMerge(source[key], mergeUndefined)) {\n          Object.assign(target, { [key]: source[key] });\n        }\n      }\n    }\n  }\n  return target;\n}\n", "import { type NumType } from './types.js';\n\n/**\n * @description\n * Returns the length of the decimal part of a number.\n * @param num - The number to calculate the decimal length of.\n * @returns The length of the decimal part of the number.\n *\n * @docsCategory preference/utils/number\n * @codeFilter digit-length\n */\nexport const digitLength = (num: NumType): number => {\n  // Get digit length of e\n  const eSplit = num.toString().split(/e/i);\n  const len = (eSplit[0].split('.')[1] || '').length - +(eSplit[1] || 0);\n  return len > 0 ? len : 0;\n};\n", "/**\n * @description\n * Checks if the given number is within the safe integer boundary.\n * If the number is beyond the boundary, a warning message is logged.\n *\n * @param num - The number to be checked.\n *\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nexport const checkBoundary = (num: number) => {\n  if (\n    boundaryCheckingState &&\n    (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER)\n  ) {\n    console.warn(\n      `${num} is beyond boundary when transfer to integer, the results may not be accurate`\n    );\n  }\n};\n\n/**\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nlet boundaryCheckingState = true;\n\n/**\n * @description\n * Whether to perform boundary check.\n *\n * @param flag - A boolean value indicating whether to enable or disable boundary checking. Default is true.\n *\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nexport const enableBoundaryChecking = (flag = true) => {\n  boundaryCheckingState = flag;\n};\n", "import { type NumType } from './types.js';\n\n/**\n * @description\n * Fix wrong number input.\n * strip(0.09999999999999998)=0.1\n *\n * @docsCategory preference/utils/number\n * @codeFilter strip\n */\nexport const strip = (num: NumType, precision = 15): number => {\n  return +parseFloat(Number(num).toPrecision(precision));\n};\n", "import { digitLength } from './digit-length.js';\nimport { strip } from './strip.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Converts a floating-point number to a fixed-point number.\n * If the number is in scientific notation, it will be converted to a fixed-point number.\n *\n * @param num - The number to convert.\n * @returns The converted fixed-point number.\n *\n * @docsCategory preference/utils/number\n * @codeFilter float2-fixed\n */\nexport const float2Fixed = (num: NumType): number => {\n  if (num.toString().indexOf('e') === -1) {\n    return Number(num.toString().replace('.', ''));\n  }\n  const dLen = digitLength(num);\n  return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);\n};\n", "import { digitLength } from './digit-length.js';\nimport { checkBoundary } from './enable-boundary-checking.js';\nimport { float2Fixed } from './float2-fixed.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Multiplies two numbers together.\n *\n * @param num1 The first number to multiply.\n * @param num2 The second number to multiply.\n * @param others Additional numbers to multiply.\n * @returns The result of multiplying all the numbers together.\n *\n * @docsCategory preference/utils/number\n * @codeFilter times\n */\nexport const times = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return times(times(num1, num2), others[0], ...others.slice(1));\n  }\n  const num1Changed = float2Fixed(num1);\n  const num2Changed = float2Fixed(num2);\n  const baseNum = digitLength(num1) + digitLength(num2);\n  const leftValue = num1Changed * num2Changed;\n\n  checkBoundary(leftValue);\n\n  return leftValue / Math.pow(10, baseNum);\n};\n", "import { digitLength } from './digit-length.js';\nimport { checkBoundary } from './enable-boundary-checking.js';\nimport { float2Fixed } from './float2-fixed.js';\nimport { strip } from './strip.js';\nimport { times } from './times.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Divides two numbers and returns the result.\n * If additional numbers are provided, it performs a series of divisions.\n *\n *\n * @param num1 The first number to divide.\n * @param num2 The second number to divide.\n * @param others Additional numbers to divide.\n * @returns The result of the division.\n *\n * @docsCategory preference/utils/number\n * @codeFilter divide\n */\nexport const divide = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return divide(divide(num1, num2), others[0], ...others.slice(1));\n  }\n  const num1Changed = float2Fixed(num1);\n  const num2Changed = float2Fixed(num2);\n  checkBoundary(num1Changed);\n  checkBoundary(num2Changed);\n  // fix: e.g. 10 ** -4 为 0.00009999999999999999，strip fix\n  return times(\n    num1Changed / num2Changed,\n    strip(Math.pow(10, digitLength(num2) - digitLength(num1)))\n  );\n};\n", "import { digitLength } from './digit-length.js';\nimport { times } from './times.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Subtracts two numbers and returns the result.\n * If additional numbers are provided, it subtracts them sequentially.\n *\n * @param num1 The first number to subtract.\n * @param num2 The second number to subtract.\n * @param others Additional numbers to subtract.\n * @returns The result of the subtraction.\n *\n * @docsCategory preference/utils/number\n * @codeFilter minus\n */\nexport const minus = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return minus(minus(num1, num2), others[0], ...others.slice(1));\n  }\n  const baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));\n  return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;\n};\n", "import { digitLength } from './digit-length.js';\nimport { times } from './times.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Adds two or more numbers together.\n *\n * @param num1 The first number to add.\n * @param num2 The second number to add.\n * @param others Additional numbers to add.\n * @returns The sum of all the numbers.\n *\n * @docsCategory preference/utils/number\n * @codeFilter plus\n */\nexport const plus = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return plus(plus(num1, num2), others[0], ...others.slice(1));\n  }\n  const baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));\n  return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;\n};\n", "import { divide } from './divide.js';\nimport { times } from './times.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Rounds a number to a specified decimal place.\n *\n * @param num - The number to round.\n * @param ratio - The number of decimal places to round to.\n * @returns The rounded number.\n *\n * @docsCategory preference/utils/number\n * @codeFilter round\n */\nexport const round = (num: NumType, ratio: number): number => {\n  const base = Math.pow(10, ratio);\n  return divide(Math.round(times(num, base)), base);\n};\n", "import { isPlainObject } from '@dimjs/lang';\n\n/**\n * @description\n * Removes properties from an object or an array of objects based on a given condition.\n *\n * @param obj - The object or array of objects from which properties will be removed.\n * @param removeFn - A function that determines whether a property should be removed or not.\n *                   It takes the property value and key as arguments and should return a boolean value.\n * @returns The object or array of objects with the specified properties removed.\n *\n *\n * @docsCategory preference/utils/remove-properties-by\n * @codeFilter remove-properties-by\n */\nexport function removePropertiesBy(\n  obj,\n  removeFn: (value, key: string) => boolean\n): unknown {\n  if (Array.isArray(obj)) {\n    const newValue: any = [];\n    for (let i = 0; i < obj.length; i++) {\n      if (isPlainObject(obj[i])) {\n        newValue[i] = removePropertiesBy(obj[i], removeFn);\n      } else {\n        newValue[i] = obj[i];\n      }\n    }\n    return newValue;\n  }\n  const returnObj = {};\n  Object.keys(obj).forEach((key) => {\n    const val = obj[key];\n    if (!removeFn(val, key)) {\n      if (isPlainObject(val)) {\n        returnObj[key] = removePropertiesBy(val, removeFn);\n      } else {\n        returnObj[key] = val;\n      }\n    }\n  });\n  return returnObj;\n}\n", "import { isArray, isObject, isUndefined } from '@dimjs/lang';\nimport { removePropertiesBy } from '../remove-properties-by/remove-properties-by.js';\n\n/**\n * @docsCategory preference/utils/omit\n * @docsPage omit\n */\nexport type RuleFn = (key, value?) => boolean;\n\n/**\n * @description\n * Recursively processes the given value based on the provided rule function.\n * If the value is an object or an array, it traverses through each property or element,\n * applies the rule function, and modifies the value accordingly.\n *\n * @param value - The value to be processed.\n * @param ruleFn - The rule function that determines whether to omit or modify a value.\n * @param path - The current path of the value being processed.\n * @returns The processed value.\n *\n * @docsCategory preference/utils/omit\n * @docsPage omit\n */\nconst processValue = (\n  value,\n  ruleFn: (nodePath: string, value?) => boolean,\n  path = ''\n) => {\n  if (!isObject(value)) {\n    return value;\n  }\n  // handle array\n  if (isArray(value)) {\n    const newValue: any[] = [];\n    for (let i = 0; i < value.length; i++) {\n      const newPath = path ? `${path}[${i}]` : `[${i}]`;\n      if (ruleFn(newPath, value[i])) {\n        continue;\n      }\n      newValue.push(processValue(value[i], ruleFn, newPath));\n    }\n    return newValue;\n  }\n\n  // handle object.\n  for (const key in value) {\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      const newPath = path ? `${path}.${key}` : key;\n      const val = value[key];\n      if (ruleFn(newPath, val)) {\n        value[key] = undefined;\n        continue;\n      }\n      value[key] = processValue(val, ruleFn, newPath);\n    }\n  }\n\n  return value;\n};\n\n/**\n * Returns a function that checks if a given key should be omitted based on the provided rules.\n * @param rules - An array of strings representing the rules to check against.\n * @returns A function that takes a key and returns a boolean indicating whether the key should be omitted.\n *\n * @docsCategory preference/utils/omit\n * @docsPage omit\n */\nconst omitWhenIn = (rules: string[]) => (key: string) => rules.includes(key);\n\n/**\n * @description\n * Creates a new object or array by omitting specified properties or elements from the target object or array.\n *\n * @example\n * ```ts\n *  expect(omit('[0]', ['key1'])).toEqual([]);\n *  expect(omit(['[0]'], [1, 3, 4])).toEqual(expect.arrayContaining([3, 4]));\n *  expect(omit(['key1', 'sex.pwd', 'nest[0]', 'nest[2][0]', 'nest[3].arr.pwd'], {\n *    key: 'key1',\n *    nest: [1, 3, [0, 1, 3, null, undefined], { arr: { pwd: '111', name: 'name' } }],\n *    sex: {\n *      pwd: '',\n *      pwd1: '',\n *    },\n *  })).toMatchObject({\n *    key: 'key1',\n *    nest: [3, [1, 3, null, undefined], { arr: { name: 'name' } }],\n *    sex: {\n *      pwd1: '',\n *    },\n *  });\n * ```\n *\n * @param rules - The properties or elements to omit. Can be a string, an array of strings, or a custom rule function.\n * @param target - The object or array from which to omit properties or elements.\n * @returns A new object or array with the specified properties or elements omitted.\n *\n * @docsCategory preference/utils/omit\n * @codeFilter omit\n */\nexport const omit = <T extends object>(\n  rules: string[] | string | RuleFn,\n  target: T | T[]\n): Record<string, any> => {\n  if (!isObject(target)) {\n    return target;\n  }\n  if (typeof rules === 'string') {\n    rules = [rules];\n  }\n  const ruleFn: any = isArray(rules) ? omitWhenIn(rules as string[]) : rules;\n  const valueClone = Array.isArray(target) ? [...target] : { ...target };\n  const result = processValue(valueClone, ruleFn);\n  return removePropertiesBy(result, (val) => isUndefined(val)) as Record<\n    string,\n    any\n  >;\n};\n", "import { isObject } from '@dimjs/lang';\n\n/**\n * @description\n * Creates a new object with the specified properties from the given object.\n *\n * @param obj - The object from which to pick properties.\n * @param keys - The properties to pick. Can be a string or an array of strings.\n * @returns A new object with the picked properties.\n *\n * @docsCategory preference/utils/pick\n * @codeFilter pick\n */\nexport const pick = <T extends object, TKeys extends keyof T>(\n  obj: T,\n  keys: TKeys[] | TKeys\n): Pick<T, TKeys> => {\n  if (!isObject(obj) && typeof obj !== 'function') {\n    return {} as Pick<T, TKeys>;\n  }\n\n  let _keys: TKeys[];\n\n  if (Array.isArray(keys)) {\n    _keys = keys;\n  } else {\n    _keys = [keys];\n  }\n\n  return _keys.reduce(\n    (acc, key) => {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) acc[key] = obj[key];\n      return acc;\n    },\n    {} as Pick<T, TKeys>\n  );\n};\n", "/**\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const verRegex = /-(?:alpha|beta).*/g;\n", "import { isString } from '@dimjs/lang';\nimport { verRegex } from './constant.js';\n\n/**\n * @description\n * Validates a version string.\n *\n * @param ver - The version string to validate.\n * @returns True if the version string is valid, false otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-validate\n * @codeFilter validate\n */\nexport const validate = (ver: string): boolean => {\n  if (!isString(ver)) {\n    return false;\n  }\n  const arr = ver.replace(verRegex, '').split('.');\n  if (arr.length !== 3) {\n    return false;\n  }\n  return arr.every((el) => {\n    return /^\\d+$/.test(el);\n  });\n};\n", "/**\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport enum CompareResult {\n  Equal = 'EQ',\n  LessThan = 'LT',\n  GreaterThan = 'GT',\n}\n", "import { verRegex } from './constant.js';\nimport { CompareResult } from './types.js';\nimport { validate } from './validate.js';\n\n/**\n * @description\n * Validates two version strings and throws an error if either of them is in an invalid format.\n *\n * @param verA - The first version string to validate.\n * @param verB - The second version string to validate.\n * @throws {Error} - If either verA or verB is in an invalid format.\n * @returns {boolean} - Returns true if both version strings are valid.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const validateWithError = (verA: string, verB: string) => {\n  if (!validate(verA)) {\n    throw new Error(`${verA} is invalid format`);\n  }\n  if (!validate(verB)) {\n    throw new Error(`${verB} is invalid format`);\n  }\n  return true;\n};\n\n/**\n * @description\n * Removes non-numeric characters from a version string and returns an array of numbers.\n *\n * @param ver - The version string to clean.\n * @returns An array of numbers representing the cleaned version.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const clean = (ver: string) => {\n  return ver.replace(verRegex, '').split('.').map(Number);\n};\n\n/**\n * @description\n * Compares two numbers and returns the comparison result.\n *\n * @param a The first number to compare.\n * @param b The second number to compare.\n * @returns The comparison result: Equal, GreaterThan, or LessThan.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const compare = (a: number, b: number) => {\n  return a === b\n    ? CompareResult.Equal\n    : a > b\n      ? CompareResult.GreaterThan\n      : CompareResult.LessThan;\n};\n\n/**\n * @description\n * Compares two version numbers.\n *\n * @param verA - The first version number as an array of numbers.\n * @param verB - The second version number as an array of numbers.\n * @returns The comparison result as CompareResult enum value.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const compareVersion = (verA: number[], verB: number[]) => {\n  if (verA.join('.') === verB.join('.')) {\n    return CompareResult.Equal;\n  }\n  for (let i = 0; i < verA.length; i++) {\n    const result = compare(verA[i], verB[i]);\n    if (result !== CompareResult.Equal) {\n      return result;\n    }\n  }\n  return CompareResult.Equal;\n};\n", "import { CompareResult } from './types.js';\nimport { clean, compareVersion, validateWithError } from './utils.js';\n\n/**\n * @description\n * Determines if two versions are equal.\n *\n * @param verA - The first version.\n * @param verB - The second version.\n * @returns True if the versions are equal, false otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-eq\n * @codeFilter eq\n */\nexport const eq = (verA: string, verB: string): boolean => {\n  if (validateWithError(verA, verB)) {\n    return compareVersion(clean(verA), clean(verB)) === CompareResult.Equal;\n  }\n  return false;\n};\n", "import { CompareResult } from './types.js';\nimport { clean, compareVersion, validateWithError } from './utils.js';\n\n/**\n * @description\n * Determines if version `verA` is greater than version `verB`.\n *\n * @param verA - The first version to compare.\n * @param verB - The second version to compare.\n * @returns `true` if `verA` is greater than `verB`, `false` otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-gt\n * @codeFilter gt\n */\nexport const gt = (verA: string, verB: string): boolean => {\n  if (validateWithError(verA, verB)) {\n    return (\n      compareVersion(clean(verA), clean(verB)) === CompareResult.GreaterThan\n    );\n  }\n  return false;\n};\n", "import { CompareResult } from './types.js';\nimport { clean, compareVersion, validateWithError } from './utils.js';\n\n/**\n * @description\n * Determines if verA is greater than or equal to verB.\n *\n * @param verA - The first version to compare.\n * @param verB - The second version to compare.\n * @returns True if verA is greater than or equal to verB, false otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-gte\n * @codeFilter gte\n */\nexport const gte = (verA: string, verB: string): boolean => {\n  if (validateWithError(verA, verB)) {\n    const result = compareVersion(clean(verA), clean(verB));\n    return (\n      result === CompareResult.GreaterThan || result === CompareResult.Equal\n    );\n  }\n  return false;\n};\n", "import { CompareResult } from './types.js';\nimport { clean, compareVersion, validateWithError } from './utils.js';\n\n/**\n * @description\n * Determines if version `verA` is less than version `verB`.\n *\n * @param verA - The first version to compare.\n * @param verB - The second version to compare.\n * @returns `true` if `verA` is less than `verB`, `false` otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-lt\n * @codeFilter lt\n */\nexport const lt = (verA: string, verB: string): boolean => {\n  if (validateWithError(verA, verB)) {\n    return compareVersion(clean(verA), clean(verB)) === CompareResult.LessThan;\n  }\n  return false;\n};\n", "import { CompareResult } from './types.js';\nimport { clean, compareVersion, validateWithError } from './utils.js';\n\n/**\n * @description\n * Determines if version A is less than or equal to version B.\n *\n * @param verA - The first version to compare.\n * @param verB - The second version to compare.\n * @returns True if version A is less than or equal to version B, false otherwise.\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-lte\n * @codeFilter lte\n */\nexport const lte = (verA: string, verB: string): boolean => {\n  if (validateWithError(verA, verB)) {\n    const result = compareVersion(clean(verA), clean(verB));\n    return result === CompareResult.LessThan || result === CompareResult.Equal;\n  }\n  return false;\n};\n", "import { arrayPadLength } from '../array/array-pad-length.js';\nimport { verRegex } from './constant.js';\nimport { clean } from './utils.js';\nimport { validate } from './validate.js';\n\n/**\n * @description\n *\n * Returns the formatted version string displayed on the client, with the version number major.min.patch always remaining three digits\n *\n * @param ver version string\n *\n * @docsCategory preference/utils/semver\n * @docsPage semver-normalize\n * @codeFilter normalize\n */\nexport const normalize = (ver: string): string => {\n  if (validate(ver)) {\n    const verStr = clean(ver).join('.');\n    const matchResult = ver.match(verRegex) || [];\n    return matchResult.length ? verStr + matchResult[0] : verStr;\n  }\n  const tryVer = ver.replace(/[^\\d.]/g, '').replace(/\\.+/g, '.');\n  const arr = tryVer\n    .split('.')\n    .slice(0, 3)\n    .filter((s) => !!s);\n  const newVer = arrayPadLength(arr, 3, '0').join('.');\n  if (validate(newVer)) {\n    return normalize(newVer);\n  }\n  return '';\n};\n", "import { isArray, isObject } from '@dimjs/lang';\n\n/**\n * @description\n * Sets a value in an object by traversing a given path.\n *\n * @param source - The source object to set the value in.\n * @param path - An array of strings representing the path to the target property.\n * @param value - The value to set at the target property.\n * @throws {Error} If any intermediate path node is not a plain object.\n *\n * @docsCategory preference/utils/set\n * @docsPage set\n */\nconst loopObjectSet = (source, [head, ...tail]: string[], value) => {\n  source = source[head] = tail.length ? source[head] || {} : value;\n  if (tail.length) {\n    if (isObject(source) && !isArray(source)) {\n      loopObjectSet(source, tail, value);\n    } else {\n      throw new Error(`path node ['.${head}'] must be plain object {}!`);\n    }\n  }\n};\n\n/**\n * @description\n * Sets the value at path of object. If a portion of path doesn't exist, it's created.\n *\n * @param source The object to modify.\n * @param path The path of the property to set.\n * @param value The value to set.\n *\n * @docsCategory preference/utils/set\n * @codeFilter set\n * @docsPage set\n */\nexport const set = (source: object | null | undefined, path: string, value) => {\n  source = source || {};\n  loopObjectSet(source, path.split('.'), value);\n  return source;\n};\n", "/**\n * @description\n * Convert string to camel case format\n *\n * @example\n * ``` ts\n * strCamelCase('--foo-bar--');\n * // => fooBar\n * strCamelCase('__FOO_ BAR__');\n * // => fooBar\n * strCamelCase('__FOO_- BAR__');\n * // => fooBar\n * ```\n *\n * @param str The string to be converted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-camel-case\n */\nexport const strCamelCase = (str: string) => {\n  return (str || '')\n    .split(/[\\s-_]+/)\n    .filter((s) => !!s)\n    .map((word, index) => {\n      // If it is the first word make sure to lowercase all the chars.\n      if (index === 0) {\n        return word.toLowerCase();\n      }\n      // If it is not the first word only upper case the first char and lowercase the rest.\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join('');\n};\n", "/**\n * @description\n * Converts strings of first character to uppercase\n *\n * @example\n * ``` ts\n * strCapitalize('FRED');\n * // => Fred\n * strCapitalize('');\n * // => ''\n * ```\n *\n * @param str The string to be converted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-capitalize\n */\nexport const strCapitalize = (str: string) => {\n  str = str || '';\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n", "import { strCapitalize } from './str-capitalize.js';\n\n/**\n * @description\n * Converts strings of first character to uppercase\n *\n * @example\n * ``` ts\n * strCapitalizeAll('Standard tax united states');\n * // => Standard Tax United States\n * strCapitalizeAll('Standard  tax    united  states');\n * // => Standard Tax United States\n * ```\n *\n * @param str The string to be converted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-capitalize-all\n */\nexport const strCapitalizeAll = (str: string) => {\n  str = str || '';\n  const newStrs = str.split(/\\s+/).map((s) => strCapitalize(s));\n  return newStrs.join(' ');\n};\n", "/**\n * @description\n * Clears string Spaces, or customizes cleared regular expressions\n * the default action to `Removes the space in the middle of the entire string`\n *\n * @example\n * ``` ts\n * strClean('F R ED');\n * // => FRED\n * strClean(' F R ED ');\n * // => FRED\n * ```\n *\n * @param str The input string.\n * @param pattern The pattern to be removed. Defaults to '\\\\s*' (any whitespace).\n * @returns The cleaned string.\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-clean\n */\nexport const strClean = (str: string, pattern = '\\\\s*') => {\n  return (str || '').replace(new RegExp(pattern, 'g'), '');\n};\n", "/**\n * @description\n * Clears the Spaces before and after the string\n *\n * @example\n * ``` ts\n * strTrim('  foo  ');\n * // => foo\n * strTrim('\\tfoo\\t');\n * // => foo\n * strTrim(' F R ED ');\n * // => F R ED\n * ```\n *\n * @param str The string to be converted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-trim\n */\nexport const strTrim = (str: string) => {\n  return (str && str.replace(/^\\s+|\\s+$/g, '')) || '';\n};\n", "import { strTrim } from './str-trim.js';\n\n/**\n * @description\n * Formats a string.\n *\n * @param str The string to format.\n * @param pattern The formatting pattern. Default is '### #### ####'.\n * @returns The formatted string.\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-format\n */\nexport const strFormat = (str: string, pattern = '### #### ####'): string => {\n  str = str || '';\n  let i = 0;\n  const matchRegex = strTrim(pattern.replace(/#/g, '')[0]);\n  const regexStr = matchRegex ? `#|\\\\${matchRegex}` : '#';\n  const result = pattern.replace(new RegExp(regexStr, 'g'), (match) => {\n    return (match === '#' ? str[i++] : pattern[i++]) || '';\n  });\n  return strTrim(result);\n};\n", "import { strFormat } from './str-format.js';\n\n/**\n * @description\n * Bank card number 16-19 digits, format to `#### #### #### #### ####`\n *\n * @example\n * ``` ts\n * strFormatBankcard('62226002600010724');\n * // => 6222 6002 6000 1072 4\n * strFormatBankcard('6222600260001072');\n * // => 6222 6002 6000 1072\n * strFormatBankcard('6222600260001072444');\n * // => 6222 6002 6000 1072 444\n * ```\n *\n * @param str String to be formatted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-format-bankcard\n */\nexport const strFormatBankcard = (str: string): string => {\n  return strFormat(str, '#### #### #### #### ####');\n};\n", "import { strFormat } from './str-format.js';\n\n/**\n * @description\n * The ID number is between 16 and 18 digits, format to `###### ######## ####`\n *\n * @example\n * ``` ts\n * strFormatIdcard('500102198692876443');\n * // => 500102 19869287 6443\n * strFormatIdcard('50010219869287643');\n * // => 500102 19869287 643\n * ```\n *\n * @param str String to be formatted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-format-idcard\n */\nexport const strFormatIdcard = (str: string): string => {\n  return strFormat(str, '###### ######## ####');\n};\n", "import { strFormat } from './str-format.js';\n\n/**\n * @description\n * Phone number formatting with `### #### ####`\n *\n * @example\n * ``` ts\n * strFormatTel('13764826699');\n * // => 137 6482 6699\n * strFormatTel('13764826699883');\n * // => 137 6482 6699\n * strFormatTel('13764826');\n * // => 137 6482 6\n * ```\n *\n * @param str String to be formatted\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-format-tel\n */\nexport const strFormatTel = (str: string): string => {\n  return strFormat(str, '### #### ####');\n};\n", "import { strTrim } from './str-trim.js';\n\n/**\n * @description\n * Convert string to camel case format\n *\n * @example\n * ``` ts\n * strKebabCase('Foo Bar', true);\n * // => foo-bar\n * strKebabCase('Foo bar', true);\n * // => foo-bar\n * strKebabCase('Foo bar', false);\n * // => Foo-bar\n * ```\n *\n * @param str The string to be converted\n * @param lowerCase If need to convert to lower case\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-kebab-case\n */\nexport const strKebabCase = (str: string, lowerCase = false) => {\n  str = str.replace(/[!\"'(),–.:;<>?`{}|~/\\\\[\\]_#$*&^@%]+/g, ' ');\n  str = str.replace(/([a-z\\d])([A-Z])/g, '$1 $2');\n  str = strTrim(str).replace(/\\s+/g, '-');\n  return lowerCase ? str.toLowerCase() : str;\n};\n", "/**\n * @description\n * Repeats a string a specified number of times.\n * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n *\n * @example\n * ``` ts\n * strRepeat('0', 3);\n * // => '000'\n * strRepeat(' 12 3', 1);\n * // => ' 12 3'\n * strRepeat('123', 2);\n * // => '123123'\n * ```\n *\n * @param str - The string to repeat.\n * @param count - The number of times to repeat the string.\n * @returns The repeated string.\n * @throws {RangeError} If the count is negative, equal to Infinity, or would result in a string that exceeds the maximum size.\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-repeat\n */\nexport const strRepeat = (str = '', count = 0) => {\n  if (count < 0) {\n    throw new RangeError('repeat count must be non-negative');\n  }\n  if (count === Infinity) {\n    throw new RangeError('repeat count must be less than infinity');\n  }\n  // floors and rounds-down it.\n  count = count | 0;\n  if (str.length === 0 || count === 0) {\n    return '';\n  }\n  // Ensuring count is a 31-bit integer allows us to heavily optimize the\n  // main part. But anyway, most current (August 2014) browsers can't handle\n  // strings 1 << 28 chars or longer, so:\n  if (str.length * count >= 1 << 28) {\n    throw new RangeError('repeat count must not overflow maximum string size');\n  }\n  const rpts: string[] = [];\n  for (let i = 0; i < count; i++) {\n    rpts.push(str);\n  }\n  return rpts.join('');\n};\n", "import { strRepeat } from './str-repeat.js';\n\n/**\n * @description\n * Fill the string left or right\n *\n * @example\n * ``` ts\n * strPad('12', 10, '0');\n * // => 1200000000\n * strPad('12', -5, '0');\n * // => 00012\n * strPad('12', -5, '*');\n * // => ***12\n * ```\n *\n * @param str String to be processed\n * @param length Total length of string will be filled to e.g. `-5` | `5` symbol `-` indicates directory `left`\n * @param value The default string to populate\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-pad\n */\nexport const strPad = (str: string, length = 0, value = ' '): string => {\n  str = str || '';\n  const len = Math.abs(length);\n  if (len <= str.length) {\n    return str;\n  }\n  const repeatStr = strRepeat(value, len - str.length);\n  return length < 0 ? repeatStr + str : str + repeatStr;\n};\n", "import { strFormat } from './str-format.js';\nimport { strPad } from './str-pad.js';\n\n/**\n * @description\n * Parses the given pattern and returns an object containing information about the pattern.\n *\n * @param pattern The pattern to parse. Defaults to '###****####'.\n * @returns An object with the following properties:\n *   - before: The length of the characters before the mask in the pattern.\n *   - after: The length of the characters after the mask in the pattern.\n *   - mask: The length of the mask in the pattern.\n *\n * @docsCategory preference/utils/string\n * @docsPage str-mask-parse\n * @docsWeight 2\n */\nconst parsePattern = (pattern = '###****####') => {\n  const [start, end] = pattern.split(pattern.replace(/#/g, ''));\n  return {\n    before: start.length,\n    after: end.length,\n    mask: pattern.length - (start.length + end.length),\n  };\n};\n\n/**\n * @description\n * Generate a string with mask symbols\n *\n * @example\n * ``` ts\n * strMask('13764826699');\n * // => 137****6699\n * strMask('13764826699', '###----####');\n * // => 137----6699\n * strMask('tyc15129@qq.com', '###----###');\n * // => tyc----com\n * ```\n *\n * @param str string to be formatted\n * @param pattern default is `###****####`\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-mask\n * @docsPage str-mask\n * @docsWeight 1\n */\nexport const strMask = (str = '', pattern = '###****####'): string => {\n  // Handle the original string, not enough Spaces are filled in the pattern template, and the excess is truncated to the length of ****\n  const strLen = str.length;\n  const { before, after, mask } = parsePattern(pattern);\n  if (strLen > before && strLen < before + after) {\n    str =\n      strPad(str.substr(0, before), before + mask, ' ') + str.substr(before);\n  } else if (strLen > before && strLen < pattern.length) {\n    str =\n      strPad(str.substr(0, before), before + mask, ' ') +\n      str.substr(strLen - after);\n  } else if (strLen > pattern.length) {\n    str =\n      str.substr(0, before) +\n      strPad('', mask, ' ') +\n      str.substr(strLen - after);\n  }\n  return strFormat(str, pattern);\n};\n", "/**\n * @description\n * Transforms a string from camel case to a specified symbol-separated case.\n *\n * @param str - The input string in camel case.\n * @param symbol - The symbol used to separate the words in the output string. It can be either '-' or '_'.\n * @returns The transformed string in the specified symbol-separated case.\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-trans-camel\n */\nexport function strTransCamel(str: string, symbol: '-' | '_') {\n  const newStr = str[0].toLowerCase() + str.substr(1);\n  return newStr.replace(/([A-Z])/g, ($1) => `${symbol}${$1.toLowerCase()}`);\n}\n", "export const CHILDREN_KEY = 'children';\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type ExpandableTreeNode,\n  type ExpandableTreeNodeResult,\n  type RootExpandableTreeNodeResult,\n  type TreeNodeId,\n  type TreeNodeInput,\n} from './types.js';\n\n/**\n * @description\n * Converts a tree structure to a map, where each node is mapped to its corresponding ID.\n *\n * @param tree The root node of the tree structure.\n * @param childrenKey The key used to access the children array of each node.\n * @returns A map where each node is mapped to its corresponding ID.\n *\n * @docsCategory preference/utils/tree\n * @docsPage array-to-tree\n * @docsWeight 2\n */\nfunction treeToMap<T extends { id: TreeNodeId }, K extends ArrayPropertyKey<T>>(\n  tree?: ExpandableTreeNode<T, K>,\n  childrenKey?: string\n): Map<TreeNodeId, ExpandableTreeNode<T, K>> {\n  const nodeMap = new Map<TreeNodeId, ExpandableTreeNode<T, K>>();\n  const childKey = childrenKey ?? CHILDREN_KEY;\n  function visit(node: ExpandableTreeNode<T, K>) {\n    nodeMap.set(node.id, node);\n    node[childKey].forEach(visit);\n  }\n  if (tree) {\n    visit(tree);\n  }\n  return nodeMap;\n}\n\n/**\n * @description\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n *\n * @param nodes The flat nodes with optional property `parent`\n * @param currentState\n * @param childrenKey The children property of tree.\n * @returns\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-array-to\n * @docsPage array-to-tree\n * @docsWeight 1\n */\nexport function arrayToTree<\n  Node extends { id: TreeNodeId },\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNodeInput<Node, Key>[],\n  currentState?: ExpandableTreeNode<Node, Key>,\n  childrenKey?: Key\n): RootExpandableTreeNodeResult<Node, Key> {\n  const topLevelNodes: Array<ExpandableTreeNodeResult<Node, Key>> = [];\n  const mappedArr: {\n    [id: string]: ExpandableTreeNodeResult<Node, Key> & {\n      [key in Key]: Array<ExpandableTreeNodeResult<Node, Key>>;\n    };\n  } = {};\n  const childKey = (childrenKey ?? CHILDREN_KEY) as string;\n  const currentStateMap = treeToMap(currentState, childKey);\n\n  // First map the nodes of the array to an object -> create a hash table.\n  for (const node of nodes) {\n    mappedArr[node.id] = { ...(node as any), [childKey]: [] };\n  }\n\n  for (const id of nodes.map((n) => n.id)) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (mappedArr.hasOwnProperty(id)) {\n      const mappedElem = mappedArr[id];\n      mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n      const parent = mappedElem.parent;\n      // If the element is not at the root level, add it to its parent array of children.\n      const parentIsRoot = !parent || !mappedArr[parent.id];\n      if (parentIsRoot) {\n        topLevelNodes.push(mappedElem);\n      } else if (parent) {\n        if (mappedArr[parent.id]) {\n          mappedArr[parent.id][childKey].push(mappedElem);\n        } else {\n          mappedArr[parent.id] = { [childKey]: [mappedElem] } as any;\n        }\n      }\n    }\n  }\n\n  const rootId = topLevelNodes.length ? topLevelNodes[0].parent?.id : undefined;\n\n  return {\n    id: rootId,\n    [childKey]: topLevelNodes,\n  } as RootExpandableTreeNodeResult<Node, Key>;\n}\n", "import { arrayGroupBy } from '../array/array-group-by.js';\nimport { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type RootExpandableTreeNodeResult,\n  type TreeNodeId,\n  type TreeNodeInput,\n} from './types.js';\n\n/**\n * @description\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n *\n * @param nodes The flat nodes with optional property `parent`\n * @param childrenKey The children property of tree.\n * @param parentIdFn The function to get the parentId of the node. default is `item.parent?.id??'null'`\n * @returns\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-array-to2\n * @docsPage array-to-tree2\n * @docsWeight 1\n */\nexport const arrayToTree2 = <\n  Node extends { id: TreeNodeId },\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNodeInput<Node, Key>[],\n  childrenKey?: Key,\n  parentIdFn?: (item: TreeNodeInput<Node, Key>) => TreeNodeId | 'null'\n): RootExpandableTreeNodeResult<Node, Key> => {\n  const parentIdResolver =\n    parentIdFn ?? ((item) => (item.parent ? item.parent?.id : 'null'));\n\n  const grouped = arrayGroupBy(nodes, parentIdResolver);\n  const parentConsumedMap = new Set<TreeNodeId | null>();\n  const childKey = (childrenKey ?? CHILDREN_KEY) as string;\n\n  function childrenOf(id: TreeNodeId, parentId: TreeNodeId | 'null') {\n    // Clear the consumed map if the parentId is null\n    // If we have multiple entry points, e.g. { null: [ { parentId:null }, { parentId:null } ] }\n    // Each entry point cycle will be calculated separately\n    if (parentId === null || parentId === 'null') {\n      parentConsumedMap.clear();\n    }\n    // Avoid infinite loop\n    if (parentConsumedMap.has(id)) {\n      return [];\n    }\n    // Flag the parentId as consumed\n    parentConsumedMap.add(id);\n    return (grouped[id] || []).map((item) => {\n      return {\n        ...item,\n        id: item.id,\n        [childKey]: childrenOf(item.id, parentIdResolver(item)),\n      };\n    });\n  }\n\n  return {\n    id: 'null',\n    [childKey]: childrenOf('null', 'null'),\n  } as RootExpandableTreeNodeResult<Node, Key>;\n};\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @docsCategory preference/utils/tree\n * @codeFilter tree-filter\n * @docsPage filter-tree\n */\nconst own = {}.hasOwnProperty;\n\n/**\n * @description\n * Create a new tree consisting of copies of all nodes that pass test.\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree tree Tree to filter\n * @param test the test function predicate\n * @param options Whether to drop parent nodes if they had children, but all their children were filtered out.\n * @returns Promise\\<TreeNode\\<T\\> | null\\>\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-filter\n * @docsPage filter-tree\n */\nexport function filterTree<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  test: (\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>,\n    level?: number\n  ) => Promise<boolean>,\n  options: { cascade: boolean; childrenKey?: Key } = { cascade: false }\n): Promise<TreeNode<Node, Key> | null> {\n  return preorder(tree);\n\n  /**\n   * @param {Node} node\n   * @param {number|undefined} [index]\n   * @param {Parent|undefined} [parent]\n   * @param {number|undefined} [level]\n   * @returns {Node|null}\n   */\n  async function preorder(\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>,\n    level = 0\n  ): Promise<TreeNode<Node, Key> | null> {\n    const children: Node[] = [];\n    let result: Node | null;\n    let key: string;\n    let childIndex: number;\n    const childrenKey = options.childrenKey ?? CHILDREN_KEY;\n    const testResult = await test(node, index, parent, level);\n    if (!testResult) return null;\n\n    if (node[childrenKey]) {\n      childIndex = -1;\n      level++;\n      // Looks like a parent.\n      while (++childIndex < node[childrenKey].length) {\n        // Looks like a parent.\n        result = await preorder(\n          node[childrenKey][childIndex],\n          childIndex,\n          node,\n          level\n        );\n\n        if (result) {\n          children.push(result);\n        }\n      }\n\n      // Looks like a parent.\n      if (options.cascade && node[childrenKey].length && !children.length)\n        return null;\n    }\n\n    // Create a shallow clone, using the new children.\n    // all the fields will be copied over.\n    const next = {};\n\n    for (key in node) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(node, key)) {\n        next[key] = key === childrenKey ? children : node[key];\n      }\n    }\n\n    return next as TreeNode<Node, Key>;\n  }\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport type { ArrayPropertyKey, TreeNode, TreeNodeItem } from './types.js';\n\nconst own = {}.hasOwnProperty;\n\n/**\n * Create a new tree consisting of copies of all nodes that pass test.\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n * @param tree tree Tree to filter\n * @param test the test function predicate\n * @param options Whether to drop parent nodes if they had children, but all their children were filtered out.\n * @returns TreeNode<T> | null\n */\nexport function filterTreeSync<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  test: (\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>,\n    level?: number\n  ) => boolean,\n  options: { cascade: boolean; childrenKey?: Key } = { cascade: false }\n): TreeNode<Node, Key> | null {\n  return preorder(tree);\n\n  /**\n   * @param {Node} node\n   * @param {number|undefined} [index]\n   * @param {Parent|undefined} [parent]\n   * @param {number|undefined} [level]\n   * @returns {Node|null}\n   */\n  function preorder(\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>,\n    level = 0\n  ): TreeNode<Node, Key> | null {\n    const children: Node[] = [];\n    let result: Node | null;\n    let key: string;\n    let childIndex: number;\n    const childrenKey = options.childrenKey ?? CHILDREN_KEY;\n    const testResult = test(node, index, parent, level);\n    if (!testResult) return null;\n\n    if (node[childrenKey]) {\n      childIndex = -1;\n      level++;\n      // Looks like a parent.\n      while (++childIndex < node[childrenKey].length) {\n        //Looks like a parent.\n        result = preorder(\n          node[childrenKey][childIndex],\n          childIndex,\n          node,\n          level\n        );\n\n        if (result) {\n          children.push(result);\n        }\n      }\n\n      // Looks like a parent.\n      if (options.cascade && node[childrenKey].length && !children.length)\n        return null;\n    }\n\n    // Create a shallow clone, using the new children.\n    // all the fields will be copied over.\n    const next = {};\n\n    for (key in node) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(node, key)) {\n        next[key] = key === childrenKey ? children : node[key];\n      }\n    }\n\n    return next as TreeNode<Node, Key>;\n  }\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeId,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @description\n * Determines whether the input is a single node or an array of nodes.\n *\n * @param nodes - The input nodes to check.\n * @returns A boolean indicating whether the input is a single node.\n *\n * @docsCategory preference/utils/tree\n * @docsPage find-ancestors-utils\n */\nconst isSingleNode = <\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNode<Node, Key>[] | TreeNode<Node, Key>\n): nodes is TreeNode<Node, Key> => {\n  return !Array.isArray(nodes) && typeof nodes === 'object';\n};\n\n/**\n * @description\n * Options for traversing a tree and finding ancestors.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the property key used to access children nodes.\n *\n * @docsCategory preference/utils/tree\n * @docsPage find-ancestors-utils\n */\nexport type FindAncestorsTraverseOptions<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n> = {\n  /**\n   * A modifier function that is called for each node in the tree.\n   *\n   * @param node - The current node being traversed.\n   * @param parentId - The ID of the parent node.\n   * @returns The modified node along with its relation to the parent node.\n   */\n  modifier: (\n    node: TreeNode<Node, Key>,\n    parentId?: TreeNodeId\n  ) => FindAncestorsTreeNodeWithRelation<Node, Key>;\n\n  /**\n   * The ID of the parent node to start the traversal from.\n   */\n  parentId?: TreeNodeId;\n\n  /**\n   * The property key used to access children nodes.\n   */\n  childrenKey?: Key;\n};\n\n/**\n * @description\n * Represents a tree node with its ancestors and relations.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the array property key of the tree node.\n *\n * @docsCategory preference/utils/tree\n * @docsPage find-ancestors-utils\n */\nexport type FindAncestorsTreeNodeWithRelation<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n> = TreeNode<Node, Key> & {\n  parentId?: number;\n  id: TreeNodeId;\n};\n\n/**\n * @description\n * Traverses through a tree structure and finds the first node that satisfies the given predicate.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the property key used to access the children of a node.\n * @param nodes - The tree nodes to traverse.\n * @param predicate - The predicate function used to determine if a node satisfies the condition.\n * @param options - The options for traversing the tree.\n * @returns The first node that satisfies the predicate, along with its relation to the parent node, or null if no node is found.\n *\n * @docsCategory preference/utils/tree\n * @docsPage find-ancestors-utils\n */\nconst traverse = <\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNode<Node, Key>[] | TreeNode<Node, Key>,\n  predicate: (item: TreeNode<Node, Key>) => boolean,\n  options: FindAncestorsTraverseOptions<Node, Key>\n): FindAncestorsTreeNodeWithRelation<Node, Key> | null => {\n  let result: FindAncestorsTreeNodeWithRelation<Node, Key> | null = null;\n  const modifier = options.modifier;\n  const parentId = options.parentId;\n  const childrenKey = options.childrenKey ?? CHILDREN_KEY;\n\n  // handle array nodes\n  if (Array.isArray(nodes)) {\n    for (let i = 0; i < nodes.length; i++) {\n      result = traverse(nodes[i], predicate, {\n        modifier: modifier,\n        parentId: parentId,\n        childrenKey: childrenKey as Key,\n      });\n      if (result) {\n        break;\n      }\n    }\n  }\n  // handle single node\n  if (isSingleNode(nodes)) {\n    const newNodes = modifier(nodes, parentId);\n    if (predicate(newNodes)) {\n      return newNodes;\n    }\n    if (newNodes[childrenKey] && newNodes[childrenKey].length) {\n      result = traverse(newNodes[childrenKey], predicate, {\n        modifier: modifier,\n        parentId: newNodes.id,\n        childrenKey: childrenKey as Key,\n      });\n    }\n  }\n\n  return result;\n};\n\n/**\n * @description\n * Finds a node in a tree structure that satisfies the given predicate function.\n * Returns the node and its path of ancestors.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the property key used to access children nodes.\n * @param nodes - The array of tree nodes to search.\n * @param predicate - The function used to determine if a node satisfies the condition.\n * @param childrenKey - The property key used to access children nodes.\n * @returns An object containing the result node and its path of ancestors.\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-find-ancestors\n */\nfunction findNode<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNode<Node, Key>[],\n  predicate: (node: TreeNode<Node, Key>) => boolean,\n  childrenKey?: Key\n) {\n  const path: FindAncestorsTreeNodeWithRelation<Node, Key>[] = [];\n\n  // Assign custom ids to each tree node to identify relationships between\n  // nodes later\n  const modifier = (\n    node,\n    parentId?: TreeNodeId\n  ): FindAncestorsTreeNodeWithRelation<Node, Key> => {\n    if (parentId) {\n      node.parentId = parentId;\n    }\n\n    // Every node during tree traversal is being added to an array\n    // It helps to represent tree structure as a plain list (since each node\n    // has own unique id and pointer to a parent node) and find parent using\n    // iteration instead of recursion\n    path.push(node);\n\n    return node as FindAncestorsTreeNodeWithRelation<Node, Key>;\n  };\n\n  const options = {\n    // Callback that takes every node and its parent (if node is nested)\n    // as arguments. It should return a node.\n    modifier: modifier,\n    childrenKey,\n  };\n\n  const result = traverse(nodes, predicate, options);\n\n  return { result: result, path: path };\n}\n\n/**\n * @description\n * Finds and returns an array of ancestor nodes for a given node in a tree.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the key used to identify the nodes.\n * @param {FindAncestorsTreeNodeWithRelation<Node, Key>[]} nodes - The array of tree nodes.\n * @param {FindAncestorsTreeNodeWithRelation<Node, Key> | null} node - The node for which to find the ancestors.\n * @returns {FindAncestorsTreeNodeWithRelation<Node, Key>[]} - The array of ancestor nodes.\n *\n * @docsCategory preference/utils/tree\n * @docsPage find-ancestors-utils\n */\nfunction findParentNodes<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: FindAncestorsTreeNodeWithRelation<Node, Key>[],\n  node: FindAncestorsTreeNodeWithRelation<Node, Key> | null\n): FindAncestorsTreeNodeWithRelation<Node, Key>[] {\n  const result: FindAncestorsTreeNodeWithRelation<Node, Key>[] = [];\n\n  if (!nodes.length || !node) {\n    return result;\n  }\n\n  result.push(node);\n\n  while (node.parentId) {\n    let matchedNode;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const item = nodes[i];\n\n      if (item.id !== node.parentId) {\n        continue;\n      }\n\n      node = matchedNode = item;\n      result.push(node);\n    }\n\n    if (!matchedNode) {\n      break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * @description\n * Recursively find tree node and all its ancestors (parents)\n * from a nested data structure (i.e. tree)\n *\n * @param nodes An array of data\n * @param predicate Filter criteria\n * @param childrenKey The key of tree children item\n * @return Matched node and its ancestors\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-find-ancestors\n * @docsPage find-ancestors\n */\nexport function findAncestors<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNode<Node, Key>[],\n  predicate: (node: Node) => boolean,\n  childrenKey?: Key\n) {\n  if (!Array.isArray(nodes)) {\n    throw new TypeError('Expected an array but got ' + typeof nodes);\n  }\n\n  if (typeof predicate !== 'function') {\n    throw new TypeError('Expected a function but got ' + typeof predicate);\n  }\n\n  const searchResults = findNode<Node, Key>(nodes, predicate, childrenKey);\n\n  return findParentNodes<Node, Key>(searchResults.path, searchResults.result);\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @description\n * Converts a tree structure to an array of nodes.\n *\n * @param treeNodes - The array of tree nodes.\n * @param childrenKey - The property key used to access children nodes. If not provided, it defaults to \"children\".\n *\n * @returns An array of nodes representing the flattened tree structure.\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-to-array\n */\nexport function treeToArray<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(treeNodes: TreeNode<Node, Key>[], childrenKey?: Key): Node[] {\n  if (!treeNodes) {\n    return [];\n  }\n  const childKey = (childrenKey ?? CHILDREN_KEY) as string;\n  const list: Node[] = [];\n  function flattenTree(tree) {\n    if (!list.includes(tree)) {\n      list.push(tree);\n    }\n    if (Array.isArray(tree[childKey])) {\n      tree[childKey].forEach((item) => {\n        flattenTree(item);\n      });\n    }\n  }\n\n  treeNodes.forEach((item) => flattenTree(item));\n\n  return list.map((s) => {\n    return { ...s, [childKey]: [] };\n  });\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\nconst own = {}.hasOwnProperty;\n\n/**\n * @description\n * Create a new tree consisting of copies of all nodes\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree tree Tree to update\n * @param onUpdate The hook method allow us to `update` every tree item\n * @param childrenKey The key of tree children item\n * @returns Promise\\<TreeNode\\<T,K\\> | null\\>\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-update\n */\nexport function updateTree<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  onUpdate: (\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>\n  ) => Promise<TreeNode<Node, Key>>,\n  childrenKey?: Key\n): Promise<TreeNode<Node, Key>> {\n  return walkThrough(tree);\n\n  async function walkThrough(\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>\n  ): Promise<TreeNode<Node, Key>> {\n    const children: Node[] = [];\n    let result: Node;\n    let key: string;\n    let childIndex: number;\n    const childKey = childrenKey ?? CHILDREN_KEY;\n\n    const newNode = await onUpdate(node, index, parent);\n    if (node[childKey]) {\n      childIndex = -1;\n\n      // Looks like a parent.\n      while (++childIndex < node[childKey].length) {\n        // Looks like a parent.\n        result = await walkThrough(\n          node[childKey][childIndex],\n          childIndex,\n          newNode\n        );\n\n        if (result) {\n          children.push(result);\n        }\n      }\n    }\n\n    // Create a shallow clone, using the new children.\n    // all the fields will be copied over.\n    const next = {};\n\n    for (key in newNode) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(newNode, key)) {\n        next[key] = key === childKey ? children : newNode[key];\n      }\n    }\n\n    return next as TreeNode<Node, Key>;\n  }\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @docsCategory preference/utils/tree\n * @docsPage update-tree-sync\n */\nconst own = {}.hasOwnProperty;\n\n/**\n * Create a new tree consisting of copies of all nodes\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n * @param tree tree Tree to update\n * @param onUpdate The hook method allow us to `update` every tree item\n * @param childrenKey The key of tree children item\n * @returns Promise\\<TreeNode\\<T,K\\> | null\\>\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-update-sync\n */\nexport function updateTreeSync<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  onUpdate: (\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>\n  ) => TreeNode<Node, Key>,\n  childrenKey?: Key\n): TreeNode<Node, Key> {\n  return walkThrough(tree);\n\n  function walkThrough(\n    node: TreeNode<Node, Key>,\n    index?: number,\n    parent?: TreeNode<Node, Key>\n  ): TreeNode<Node, Key> {\n    const children: Node[] = [];\n    let result: Node;\n    let key: string;\n    let childIndex: number;\n    const childKey = childrenKey ?? CHILDREN_KEY;\n\n    const newNode = onUpdate(node, index, parent);\n    if (node[childKey]) {\n      childIndex = -1;\n\n      // Looks like a parent.\n      while (++childIndex < node[childKey].length) {\n        // Looks like a parent.\n        result = walkThrough(node[childKey][childIndex], childIndex, newNode);\n\n        if (result) {\n          children.push(result);\n        }\n      }\n    }\n\n    // Create a shallow clone, using the new children.\n    // all the fields will be copied over.\n    const next = {};\n\n    for (key in newNode) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(newNode, key)) {\n        next[key] = key === childKey ? children : newNode[key];\n      }\n    }\n\n    return next as TreeNode<Node, Key>;\n  }\n}\n", "import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @docsCategory preference/utils/tree\n * @docsPage walk-through-tree\n * @docsWeight 3\n */\ntype OnNodeWalked<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n> = (\n  node: TreeNode<Node, Key>,\n  index?: number,\n  parent?: TreeNode<Node, Key>,\n  level?: number\n) => void;\n\n/**\n * @description\n * Walks through a tree structure and performs an action on each node.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the property key used to access the children of a node.\n * @param node - The root node of the tree.\n * @param onNodeWalked - The callback function to be called for each node in the tree.\n * @param childrenKey - The property key used to access the children of a node. If not provided, it defaults to \"children\".\n * @param index - The index of the current node within its parent's children array.\n * @param parent - The parent node of the current node.\n * @param level - The level of the current node in the tree hierarchy.\n *\n * @docsCategory preference/utils/tree\n * @docsPage walk-through-tree\n * @docsWeight 2\n */\nfunction walkThrough<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  node: TreeNode<Node, Key>,\n  onNodeWalked: OnNodeWalked<Node, Key>,\n  childrenKey?: Key,\n  index?: number,\n  parent?: TreeNode<Node, Key>,\n  level = 0\n): void {\n  let childIndex: number;\n  const childKey = childrenKey ?? CHILDREN_KEY;\n  onNodeWalked(node, index, parent, level);\n\n  if (node[childKey]) {\n    childIndex = -1;\n    level++;\n    // Looks like a parent.\n    while (++childIndex < node[childKey].length) {\n      // Looks like a parent.\n      walkThrough(\n        node[childKey][childIndex],\n        onNodeWalked,\n        childrenKey,\n        childIndex,\n        node,\n        level\n      );\n    }\n  }\n}\n\n/**\n * @description\n * Create a new tree consisting of copies of all nodes\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree The tree to walktrough\n * @param onNodeWalked The hook method to allow we walkThrough the tree node item.\n * @param childrenKey The key of tree children item\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-walk-through\n * @docsPage walk-through-tree\n * @docsWeight 1\n */\nexport function walkThroughTree<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  onNodeWalked: OnNodeWalked<Node, Key>,\n  childrenKey?: Key\n): void {\n  walkThrough(tree, onNodeWalked, childrenKey);\n}\n", "/**\n * @description\n * Creates a new URL by combining the specified URLs\n *\n * @example\n * ``` ts\n * combineUrls('https://api.github.com/', '/users');\n * // => 'https://api.github.com/users'\n * combineUrls('https://api.github.com/users', '');\n * // => 'https://api.github.com/users'\n * ```\n *\n * @param {string|function} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n *\n * @docsCategory preference/utils/uri\n * @codeFilter combine-urls\n */\nexport const combineUrls = (\n  baseURL: string | (() => string),\n  relativeURL: string\n) => {\n  const myBaseUrl = typeof baseURL === 'function' ? baseURL() : baseURL;\n  return relativeURL\n    ? myBaseUrl.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : myBaseUrl;\n};\n", "import { isStandardBrowserEnv } from '@dimjs/lang';\nimport { paramStrToJson } from './param-str-to-json.js';\n\n/**\n * @description\n * Checks if a given query parameter exists in the URL.\n *\n * @example\n * ``` ts\n * hasQueryString('ntv_bar_hidden','http://localhost:20001/?ntv_bar_hidden#/_tc_ntv_bar_set_navbar_demo');\n * // => true\n * ```\n *\n * @param name - The name of the query parameter to check.\n * @param url - The URL to check. If not provided, the current window location will be used.\n * @returns A boolean indicating whether the query parameter exists in the URL.\n *\n * @docsCategory preference/utils/uri\n * @codeFilter has-query-string\n */\nexport const hasQueryString = (name: string, url?: string): boolean => {\n  const params = paramStrToJson(\n    url || (isStandardBrowserEnv() ? window.location.href : '')\n  );\n  return Object.prototype.hasOwnProperty.call(params, name) as boolean;\n};\n", "/**\n * @description\n * Determines whether the specified URL is absolute\n *\n * @example\n * ``` ts\n * isAbsoluteUrl('123://example.com/');\n * // => false\n * isAbsoluteUrl('//example.com/');\n * // => true\n * isAbsoluteUrl('https://api.github.com/users');\n * // => true\n * ```\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n *\n * @docsCategory preference/utils/uri\n * @codeFilter is-absolute-url\n */\nexport const isAbsoluteUrl = (url: string) => {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n", "import { isStandardBrowserEnv } from '@dimjs/lang';\nimport { uriParse } from './uri-parse.js';\n\n/**\n * @description\n * Determine if a URL shares the same origin as the current location\n *\n * @example\n * ``` ts\n * isSameOrigin('https://github.com/axios/axios', 'https://github.com/test');\n * // => true\n * isSameOrigin('https://github.com/axios/axios');\n * // => false\n * ```\n *\n * @param {String} requestURL The URL to test\n * @returns {boolean} True if URL shares the same origin, otherwise false\n *\n * @docsCategory preference/utils/uri\n * @codeFilter is-same-origin\n */\nexport const isSameOrigin = (requestURL: string, url?: string) => {\n  const originURL = uriParse(\n    url || (isStandardBrowserEnv() ? window.location.href : '')\n  );\n  const parsed = uriParse(requestURL);\n  return (\n    parsed.protocol === originURL.protocol && parsed.host === originURL.host\n  );\n};\n", "import { isArray, isNull, isObject, isUndefined } from '@dimjs/lang';\nimport { removePropertiesBy } from '../remove-properties-by/remove-properties-by.js';\n\n/**\n * @description\n * Processes the given value recursively and returns a new value with cleaned parameters.\n *\n * @param value - The value to be processed.\n * @returns The processed value.\n *\n * @docsCategory preference/utils/uri\n * @docsPage params-clean\n */\nconst processValue = (value): unknown => {\n  // handle array\n  if (isArray(value)) {\n    const newValue: unknown[] = [];\n    for (let i = 0; i < value.length; i++) {\n      if (!isObject(value[i])) {\n        newValue.push(String(value[i]));\n        continue;\n      }\n      newValue.push(processValue(value[i]));\n    }\n    // 此处不能排序,URL字符串如果是数组必须遵守顺序, 因为服务器端取值只能按照索引, 不建议URL使用array\n    return newValue;\n  }\n\n  // handle object.\n  for (const key in value) {\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      const val = value[key];\n      if (isUndefined(val) || isNull(val)) {\n        // assign undefined\n        value[key] = undefined;\n        continue;\n      }\n      if (!isObject(val)) {\n        value[key] = String(val);\n        continue;\n      }\n      value[key] = processValue(val);\n    }\n  }\n  return value;\n};\n\n/**\n * @description\n * Normally for MD5(GET) signature, we need to remove `undefined`, `null`.\n * And convert all property value into `String` type. And sort `Array` property with alpha\n *\n * @example\n * ```ts\n * {\n *   foo: 'bar',\n *    // undefined will be removed.\n *    bar: undefined,\n *    // null will be removed.\n *    door: null,\n *    fex: '',\n *    fex2: ' ',\n *    child: {\n *      name: undefined,\n *      pwd: null,\n *      sex: 1,\n *      others: [3, 1, true, undefined],\n *    },\n *    array: ['name', '3', '1', true, null, undefined],\n *  }\n * // =>\n * {\n *    foo: 'bar',\n *    fex: '',\n *    fex2: ' ',\n *    child: {\n *      sex: '1',\n *      others: ['3', '1', 'true', 'undefined'],\n *    },\n *    array: ['name', '3', '1', true, null, undefined],\n * }\n * ```\n *\n * @param reqQuery - The request query object.\n * @returns The cleaned request query object.\n *\n * @docsCategory preference/utils/uri\n * @codeFilter params-clean.spec.ts\n */\nexport const paramsClean = (reqQuery: Record<string, unknown>) => {\n  if (!isObject(reqQuery)) {\n    return reqQuery;\n  }\n  const result = processValue({ ...reqQuery });\n  return removePropertiesBy(result, (val) => isUndefined(val));\n};\n", "import { isArray, isDate, isObject } from '@dimjs/lang';\nimport { forEach } from '../for-each/for-each.js';\n\n/**\n * Encodes a string value for use in a URI.\n *\n * @param val - The string value to encode.\n * @returns The encoded string.\n *\n * @docsCategory preference/utils/uri\n * @docsPage params-serialize\n */\nfunction encode(val: string) {\n  return encodeURIComponent(val)\n    .replace(/%40/g, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%20/g, '+')\n    .replace(/%5B/gi, '[')\n    .replace(/%5D/gi, ']');\n}\n/**\n * @description\n * Follow java url encode standard, serialize url query params to url string with encode\n * Normally it will used to parse params into api url querystring.\n *\n * @example\n * ```ts\n * {\n *     foo: 'bar',\n *     // undefined will be removed.\n *     bar: undefined,\n *     // null will be removed.\n *     door: null,\n *     fex: '',\n *     fex2: ' ',\n *     array: ['name', '3', '1', true, null, undefined],\n *  }\n * /foo?foo=bar&fex=&fex2=+&array=name&array=3&array=1&array=true&array=null&array=undefined\n * ```\n * @param params request parameters\n * @param encoder @default encode\n *\n * @docsCategory preference/utils/uri\n * @codeFilter params-serialize\n */\nexport const paramsSerialize = (\n  params: Record<string, unknown>,\n  encoder = encode\n): string => {\n  const parts: string[] = [];\n  forEach(params, function serialize(val, key: string) {\n    if (val === null || typeof val === 'undefined') {\n      return;\n    }\n    if (!isArray(val)) {\n      val = [val];\n    }\n\n    forEach(val, function parseValue(v) {\n      if (isDate(v)) {\n        v = v.toISOString();\n      } else if (isObject(v)) {\n        v = JSON.stringify(v);\n      }\n      parts.push(encoder(key) + '=' + encoder(v));\n    });\n  });\n\n  return parts.join('&');\n};\n", "import { isStandardBrowserEnv } from '@dimjs/lang';\nimport { paramStrToJson } from './param-str-to-json.js';\nimport { toQueryString } from './to-query-string.js';\n\nconst HASH_REGEX = /#(\\/)?.*/;\n\n/**\n * @description\n * Removes a query string parameter from a URL.\n *\n * @param url - The URL from which to remove the query string parameter.\n * @param key - The key of the query string parameter to remove.\n * @returns The modified URL with the specified query string parameter removed.\n *\n * @docsCategory preference/utils/uri\n * @codeFilter remove-query-string\n */\nexport const removeQueryString = (url: string, key: string) => {\n  url = url || (isStandardBrowserEnv() ? window.location.href : '');\n  const existedParams = paramStrToJson(url);\n  const existedHash = HASH_REGEX.exec(url);\n  delete existedParams[key];\n  const rootUrl = (existedHash ? url.replace(HASH_REGEX, '') : url).split(\n    '?'\n  )[0];\n  const querystr = toQueryString(existedParams);\n  const newUrl = !querystr\n    ? `${rootUrl}`\n    : `${rootUrl}?${toQueryString(existedParams)}`;\n  return `${newUrl}${existedHash ? existedHash[0] : ''}`;\n};\n", "/**\n * @description\n * A function that returns a universally unique identifier (uuid).\n * Note: If used in long period data storage it is best to add a time stamp (e.g. logging)\n *\n * @example\n * ``` ts\n * uuid();\n * // => 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n * ```\n *\n * @returns `string` : 32 character uuid (see example)\n *\n * @docsCategory preference/utils/uuid\n * @codeFilter uuid\n */\nexport const uuid = () => {\n  const hashTable = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n  ];\n  const uuid: string[] = [];\n  for (let i = 0; i < 36; i++) {\n    if (i === 8 || i === 13 || i === 18 || i === 23) {\n      uuid[i] = '-';\n    } else {\n      uuid[i] = hashTable[Math.ceil(Math.random() * hashTable.length - 1)];\n    }\n  }\n  return uuid.join('');\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBO,SAASA,IACdC,KACAC,KACAC,KAAAA;AAEA,MAAIF,IAAMC,SAASA,KAAQ;AAGzB,WAAO,MAAM;AACX,UAAID,IAAMG,KAAKD,GAAAA,KAAUD,KAAQ;AAC/B;MACF;IACF;EACF;AACA,SAAOD;AACT;;;ACbO,IAAMI,KAAa,SAAbA,GAAiBC,KAAUC,KAAAA;AACtC,MAAMC,MAAWC,IAAS,CAAA,GAAIC,KAAKC,KAAKL,IAAIM,SAASL,GAAAA,GAAO,EAAA;AAC5D,SAAOC,IAASK,IAAI,SAACC,KAAGC,KAAAA;AAAC,WAAKT,IAAIU,MAAMT,MAAOQ,KAAGR,MAAOA,MAAOQ,GAAAA;EAAAA,CAAAA;AAClE;;;ACJO,SAASE,GAAgBC,KAAAA;AAA4C,MAAzBC,MAAKC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AACzD,MAAA,CAAKG,MAAMC,QAAQN,GAAAA,GAAM;AACvB,WAAOA;EACT;AACA,SAAOC,MAAQ,IACXD,IAAIO,OACF,SAACC,KAAKC,KAAAA;AAAG,WAAKD,IAAIE,OAAOX,GAAaU,KAAYR,MAAQ,CAAA,CAAA;EAAU,GACpE,CAAA,CAAA,IAEFD,IAAIW,MAAAA;AACV;;;ACZO,SAASC,GAAoBC,KAAAA;AAClC,SAAOC,GAAaD,KAAKE,QAAAA;AAC3B;;;ACJO,SAASC,GACdC,KACAC,KAAAA;AAEA,SAAOD,IAAME,OACX,SAACC,KAAQC,GAAAA;AACP,QAAMC,MAAMJ,IAASG,CAAAA;AAGrB,QAAA,CAAKD,IAAOE,GAAAA,GAAM;AAChBF,MAAAA,IAAOE,GAAAA,IAAO,CAAA;IAChB;AAGAF,IAAAA,IAAOE,GAAAA,EAAKC,KAAKF,CAAAA;AAEjB,WAAOD;EACR,GACD,CAAA,CAAA;AAEJ;;;ACdO,IAAMI,MAAiB,SAAjBA,IACXC,KACAC,KACAC,KAAAA;AAEA,MAAA,CAAKC,EAAQH,GAAAA,GAAQ;AACnB,UAAM,IAAII,UAAU,kBAAA;EACtB;AACA,MAAMC,MAASJ,MAAS,IAAI,YAAY;AACxC,MAAMK,MAAQC,KAAKC,IAAIP,GAAAA;AAEvB,MAAA,OAAWA,QAAW,YAAYK,MAAQ,MAAM,GAAG;AACjD,UAAM,IAAIF,UAAU,2BAAA;EACtB;AACA,SAAOJ,IAAMC,SAASK,KAAO;AAC3BN,IAAAA,IAAMK,GAAAA,EAAQH,GAAAA;EAChB;AACA,SAAOF;AACT;;;ACpBO,SAASS,GAAeC,KAAUC,KAAAA;AACvC,MAAIA,QAAU,QAAQA,QAAUC,QAAW;AACzC,WAAOC,MAAMC,KAAK,IAAIC,IAAIL,GAAAA,CAAAA;EAC5B,OAAO;AAEL,WAAAM,EAAW,IAAIC,IAAIP,IAAIQ,IAAI,SAACC,KAAAA;AAAI,aAAK,CAACA,IAAKR,GAAAA,GAAQQ,GAAAA;IAAK,CAAA,CAAA,EAAGC,OAAAA,CAAAA;EAC7D;AACF;;;ICRaC,KAAO,SAAPA,GAAQC,KAAAA;AAA0B,WAAAC,MAAAC,UAAAC,QAATC,MAAAA,IAAIC,MAAAJ,MAAAA,IAAAA,MAAAA,IAAAA,CAAAA,GAAAK,MAAA,GAAAA,MAAAL,KAAAK,OAAA;AAAJF,IAAAA,IAAIE,MAAAJ,CAAAA,IAAAA,UAAAI,GAAAA;EAAA;AACxC,MAAOC,MAAwBH,IAAI,CAAA,GAAhBI,KAAYJ,IAAIK,MAAA,CAAA;AACnC,SAAO,SAASC,MAAAA;AAAkB,aAAAC,MAAAT,UAAAC,QAAVS,MAAQP,IAAAA,MAAAM,GAAAA,GAAAE,MAAA,GAAAA,MAAAF,KAAAE,OAAA;AAARD,MAAAA,IAAQC,GAAAA,IAAAX,UAAAW,GAAAA;IAAA;AAC9B,WAAOb,IAAGc,MAAMP,KAASC,GAASO,OAAOH,GAAAA,CAAAA;EAC1C;AACH;;;ACoBO,IAAMI,KAA2B,SAA3BA,KAAAA;AACX,MAAMC,MAAwB,CAAA;AAC9B,WAASC,MAAI,GAAGA,MAAIC,UAAKC,QAAQF,OAAK;AACpC,QAAMG,MAAWH,MAAC,KAAAC,UAAAC,UAADF,MAACI,SAAAH,UAADD,GAAAA;AACjB,QAAA,CAAKG;AAAK;AACV,QAAA,OAAWA,QAAQ,YAAA,OAAmBA,QAAQ,UAAU;AACtDJ,MAAAA,IAAQM,KAAKF,GAAAA;IACd,WAAUG,MAAMC,QAAQJ,GAAAA,GAAM;AAC7B,UAAIA,IAAID,QAAQ;AACd,YAAMM,MAAQV,GAAUW,MAAAA,QAAAC,EAAIP,GAAAA,CAAAA;AAC5B,YAAIK,KAAO;AACTT,UAAAA,IAAQM,KAAKG,GAAAA;QACf;MACF;IACD,WAAUG,EAAOR,GAAAA,MAAQ,UAAU;AAClC,UAAIA,IAAIS,aAAaC,OAAOC,UAAUF,UAAU;AAC9Cb,QAAAA,IAAQM,KAAKF,IAAIS,SAAAA,CAAAA;MACnB,OAAO;AACL,iBAAWG,KAAOZ,KAAK;AACrB,cAAIU,OAAOC,UAAUE,eAAeC,KAAKd,KAAKY,CAAAA,KAAQZ,IAAIY,CAAAA,GAAM;AAC9DhB,YAAAA,IAAQM,KAAKU,CAAAA;UACf;QACF;MACF;IACF;EACF;AACA,SAAOhB,IAAQmB,KAAK,GAAA;AACtB;;;ICrDaC,KAAa,SAAbA,GAAcC,KAAAA;AACzB,MAAA,CAAKC,GAAAA,GAAwB;AAC3B,WAAO;EACT;AACA,MAAMC,MAAQ,IAAIC,OAAO,eAAeH,MAAO,WAAA,EAAaI,KAC1DC,SAASC,MAAAA;AAEX,SAAOJ,MAAQK,mBAAmBL,IAAM,CAAA,CAAA,IAAM;AAChD;;;ACJaM,IAAAA,MAAc,SAAdA,IACXC,KACAC,KACAC,KACAC,KACAC,GAAAA;AAES,MADTC,KAAMC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAET,MAAA,CAAKG,GAAAA,GAAwB;AAC3B;EACF;AACA,MAAMC,IAAmB,CAACV,MAAO,MAAMW,mBAAmBV,GAAAA,CAAAA;AAC1D,MAAIC,OAAWU,GAASV,GAAAA,GAAU;AAChCQ,MAAOG,KAAK,aAAa,IAAIC,KAAKZ,GAAAA,EAASa,YAAAA,CAAAA;EAC7C;AACA,MAAIZ,OAAQa,GAASb,GAAAA,GAAO;AAC1BO,MAAOG,KAAI,QAAAI,OAASd,GAAAA,CAAAA;EACtB;AACA,MAAIC,KAAUY,GAASZ,CAAAA,GAAS;AAC9BM,MAAOG,KAAI,UAAAI,OAAWb,CAAAA,CAAAA;EACxB;AACA,MAAIC,OAAW,MAAM;AACnBK,MAAOG,KAAK,QAAA;EACd;AACAK,WAASR,SAASA,EAAOS,KAAK,IAAA;AAChC;;;IC7BaC,KAAe,SAAfA,GAAgBC,KAAAA;AAC3BC,EAAAA,IAAYD,KAAM,IAAIE,KAAKC,IAAAA,IAAQ,KAAA;AACrC;;;ICIaC,KAAgB,SAAhBA,GACXC,KAAAA;AAGW,MAFXC,MAAMC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAAqB,MAC9BG,MAAMH,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAET,MAAMI,KAAc,oBAAIC,KAAK,YAAA;AAC7B,MAAMC,MAAmBF,GAAYG,QAAAA;AACrC,MAAMC,KAAuBC,EAAWL,IAAaL,GAAAA;AACrD,MAAMW,MAAUJ,MAAmBR;AACnC,MAAMa,MAAkBF,EAAW,IAAIJ,KAAKK,GAAAA,GAAUX,GAAAA;AACtD,MAAMa,IAAWD,IAAgBE,MAAM,EAAA;AACvC,MAAMC,IAAWN,GAAqBK,MAAM,EAAA;AAC5C,MAAIE,KAAO;AACX,WAASC,IAAI,GAAGA,IAAIJ,EAASX,QAAQe,KAAK;AACxC,QAAIF,EAASE,CAAAA,MAAOJ,EAASI,CAAAA,GAAI;AAC/BD,MAAAA,KAAOJ,IAAgBM,OAAOD,CAAAA;AAC9B;IACF;EACF;AACA,SAAOD,KAAOZ,MAASY,KAAOA;AAChC;;;ACdO,SAASG,IACdC,KAAAA;AAGA,MAFAC,MAAgBC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAAE,MACrBG,MAAwBH,UAAAC,SAAAD,KAAAA,UAAAE,CAAAA,MAAAA,SAAAF,UAAG,CAAA,IAAA,EAAEI,aAAa,MAAA;AAE1C,MAAIC;AAEJ,SAAO,WAAA;AAAyB,QAAAC,MAAAC;AAAA,aAAAC,IAAAR,UAAAC,QAANQ,IAAIC,IAAAA,MAAAF,CAAAA,GAAAG,MAAA,GAAAA,MAAAH,GAAAG,OAAA;AAAJF,QAAIE,GAAAA,IAAAX,UAAAW,GAAAA;IAAA;AAC5B,QAAMC,IAAgBT,IAAQC,eAAeC,QAAcH;AAE3D,QAAIG,QAAcH,QAAW;AAC3BW,mBAAaR,GAAAA;IACf;AAEAA,IAAAA,MAAYS,WAAW,WAAA;AACrBT,MAAAA,MAAYH;AACZ,UAAA,CAAKC,IAAQC,aAAa;AACxBN,QAAAA,IAAKiB,MAAMT,KAAMG,CAAAA;MACnB;IACD,GAAEV,GAAAA;AAEH,QAAIa,GAAe;AACjBd,MAAAA,IAAKiB,MAAMR,MAAME,CAAAA;IACnB;EACD;AACH;;;IC5CaO,MAAa,SAAbA,MAAAA;AAA8B,MAAhBC,MAAGC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC/B,SAAOG,GAAeJ,GAAAA,KAAQ;AAChC;;;ACeO,IAAMK,MAAe,SAAfA,IACXC,KACAC,IACAC,KAAAA;AAEA,MAAMC,MAAMD,OAAWE,IAAAA;AACvB,MAAMC,IAAaC,EAAIN,KAAQC,IAAMM,MAAAA;AACrC,MAAIC,GAASH,CAAAA,KAAAA,CAAgBI,IAASJ,CAAAA,GAAa;AACjD,WAAOC,EAAID,GAAU,GAAAK,OAAKP,GAAAA,GAAOI,MAAAA;EACnC,OAAO;AACL,WAAOF;EACT;AACF;;;ACXO,SAASM,IAAQC,KAAKC,KAAAA;AAE3B,MAAID,QAAQ,QAAA,OAAeA,QAAQ,aAAa;AAC9C;EACF;AAGA,MAAIE,EAAOF,GAAAA,MAAQ,UAAU;AAC3BA,IAAAA,MAAM,CAACA,GAAAA;EACT;AAEA,MAAIG,EAAQH,GAAAA,GAAM;AAEhB,aAASI,MAAI,GAAGC,MAAIL,IAAIM,QAAQF,MAAIC,KAAGD,OAAK;AAC1CH,MAAAA,IAAGM,KAAK,MAAMP,IAAII,GAAAA,GAAIA,KAAGJ,GAAAA;IAC3B;EACF,OAAO;AAEL,aAAWQ,OAAOR,KAAK;AACrB,UAAIS,OAAOC,UAAUC,eAAeJ,KAAKP,KAAKQ,GAAAA,GAAM;AAClDP,QAAAA,IAAGM,KAAK,MAAMP,IAAIQ,GAAAA,GAAMA,KAAKR,GAAAA;MAC/B;IACF;EACF;AACF;;;ACzCO,IAAMY,MAAS,SAATA,IAIXC,KACAC,KACAC,KAAAA;AAGA,MAAI,KAAKC,KAAKF,GAAAA,GAAO;AACnB,WAAOG,EACLJ,KACAC,IAAKI,MAAM,GAAA,EAAKC,MAAM,GAAA,EAAG,EAAIC,KAAK,GAAA,GAClCL,GAAAA;EAEJ;AACA,SAAOF;AACT;;;IClBaQ,KAAQ,SAARA,GAAsBC,KAAAA;AACjC,MAAMC,MAASC,GAASF,GAAAA,IAAQG,KAAKJ,MAAMC,GAAAA,IAAQA;AACnD,SAAOC;AACT;;;ACCA,IAAMG,KAAgB,SAAhBA,GAAiBC,KAAAA;AAIrB,MAAIC,GAASD,GAAAA,KAAcE,MAAMF,GAAAA,GAAY;AAC3C,QAAA;AACE,aAAOG,GAAMH,GAAAA;IACd,SAACI,KAAAA;AAIA,aAAOJ;IACT;EACF;AACA,SAAOA;AACT;AAeO,IAAMK,KAAY,SAAZA,GACXC,KAAAA;AAEY,MADZC,MAAmBC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG,CAAE;AAExB,MAAMG,IAAyBR,GAAMG,GAAAA,KAAY,CAAE;AACnD,MAAIL,GAASU,CAAAA,GAAY;AACvB,WAAOZ,GAAcY,CAAAA;EACvB,OAAO;AAELC,WAAOC,KAAKF,CAAAA,EAAWG,QAAQ,SAACC,KAAAA;AAC9B,UAAMC,MAAQT,IAAOQ,GAAAA,IAAOhB,GAAcY,EAAUI,GAAAA,CAAAA;AACpD,UAAIE,GAASD,GAAAA,GAAO;AAClBX,QAAAA,GAAUW,KAAMA,GAAAA;MAClB;IACF,CAAA;EACF;AACA,SAAOT;AACT;;;AC/BaW,IAAAA,MAAO,SAAPA,GACXC,KACAC,KAAAA;AAEA,MAAMC,MAAcD,OAAW,CAAE;AACjC,MAAME,KAAaD,IAAYC,cAAc;AAC7C,MAAMC,MAAUF,IAAYE,WAAW;AACvC,MAAMC,KAAQH,IAAYG,SAASC;AACnC,MAAMC,MAAQL,IAAYK,SAAS;AACnC,MAAMC,IAAaD,OAASF;AAE5B,MAAII,EAAOT,GAAAA,MAAQ,YAAYA,QAAQ,MAAM;AAC3C,WAAOA;EACT;AAEA,MAAMU,IAAOC,MAAMC,QAAQZ,GAAAA,IAAO,CAAA,IAAK,CAAE;AACzC,MAAIa,KAAOC,OAAOD,KAAKb,GAAAA;AACvB,MAAIQ,GAAY;AACdK,IAAAA,KAAOV,KACHU,GAAKd,KAAK,SAACgB,KAAMC,KAAAA;AAAK,aACpBD,IAAKE,YAAAA,EAAcC,cAAcF,IAAMC,YAAAA,CAAAA;IAAc,CAAA,IAEvDJ,GAAKd,KAAAA;EACX;AAEA,MAAIK,KAAS;AACXS,IAAAA,KAAOA,GAAKT,QAAAA;EACd;AACAS,EAAAA,GAAKM,QAAQ,SAACC,KAAAA;AACZ,QAAMC,MAAiBP,OAAOQ,OAAO,CAAA,GAAIpB,GAAAA;AACzCmB,IAAAA,IAAed,QAAQA,MAAQ;AAC/BG,MAAKU,GAAAA,IAAOrB,IAAKC,IAAIoB,GAAAA,GAAMC,GAAAA;EAC7B,CAAA;AAEA,SAAOX;AACT;;;ICjDaa,KAAY,SAAZA,GAAaC,KAAAA;AAAoB,MAAfC,MAAMC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AACtC,SAAOG,KAAKN,UAAUC,KAAK,MAAMC,GAAAA;AACnC;;;ACbO,SAASK,IAASC,KAAAA;AACvB,SAAOA,OAAQC,EAAOD,GAAAA,MAAS,YAAA,CAAaE,MAAMC,QAAQH,GAAAA;AAC5D;AAMO,SAASI,IAAgBJ,KAAAA;AAG9B,SACED,IAASC,GAAAA,KAASA,IAAKK,eAAeL,IAAKK,YAAYC,SAAS;AAEpE;AASO,SAASC,IACdC,KAAAA;AAGA,MAAIP,EAAOO,GAAAA,MAAU,YAAYA,QAAU,MAAM;AAC/C,WAAOA;EACT;AACA,MAAIC;AACJ,MAAIC;AAEJ,MAAIF,eAAiBN,OAAO;AAC1B,QAAIS;AACJF,IAAAA,MAAS,CAAA;AACT,SAAKC,IAAI,GAAGC,MAAIH,IAAMI,QAAQF,IAAIC,KAAGD,KAAK;AACxCD,MAAAA,IAAOC,CAAAA,IAAKH,IAAgBC,IAAME,CAAAA,CAAAA;IACpC;AACA,WAAOD;EACT;AACA,MAAIL,IAAgBI,GAAAA,GAAQ;AAC1B,WAAOA;EACT;AAEAC,EAAAA,MAAS,CAAE;AACX,OAAKC,KAAKF,KAAO;AAEf,QAAIA,IAAMK,eAAeH,CAAAA,GAAI;AAC3BD,MAAAA,IAAOC,CAAAA,IAAKH,IAAiBC,IAAcE,CAAAA,CAAAA;IAC7C;EACF;AACA,SAAOD;AACT;;;AC5BA,IAAMK,KAAY,SAAZA,IAAaC,KAAQC,KAAAA;AACzB,SAAA,EAAA,OAAgBD,QAAW,eAAA,CAAgBC;AAC7C;AAkCO,SAASC,IACdC,IACAH,KAAAA;AAGG,MAFHC,MAAcG,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAAK,MACtBG,IAAKH,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAER,MAAA,CAAKJ,KAAQ;AACX,WAAOG;EACT;AAEA,MAAII,MAAU,GAAG;AACfJ,IAAAA,KAASK,IAAgBL,EAAAA;EAC3B;AAEA,MAAIM,IAASN,EAAAA,KAAWM,IAAST,GAAAA,GAAS;AACxC,aAAWU,OAAOV,KAAQ;AACxB,UAAIS,IAAST,IAAOU,GAAAA,CAAAA,GAAO;AAEzB,YAAA,CAAKD,IAAUN,GAAeO,GAAAA,CAAAA,GAAO;AACnCC,iBAAOC,OAAOT,IAAMU,EAAKH,CAAAA,GAAAA,KAAM,CAAA,CAAA,CAAA;QACjC;AACA,YAAA,CAAKI,IAAgBd,IAAOU,GAAAA,CAAAA,GAAO;AACjCR,UAAAA,IACGC,GAAeO,GAAAA,GACfV,IAAeU,GAAAA,GAChBT,KACAM,IAAQ,CAAA;QAEZ,OAAO;AACL,cAAIR,GAAUC,IAAOU,GAAAA,GAAMT,GAAAA,GAAiB;AACzCE,YAAAA,GAAeO,GAAAA,IAAOV,IAAOU,GAAAA;UAChC;QACF;MACF,OAAO;AACL,YAAIX,GAAUC,IAAOU,GAAAA,GAAMT,GAAAA,GAAiB;AAC1CU,iBAAOC,OAAOT,IAAMU,EAAA,CAAA,GAAKH,KAAMV,IAAOU,GAAAA,CAAAA,CAAAA;QACxC;MACF;IACF;EACF;AACA,SAAOP;AACT;;;IClGaY,MAAc,SAAdA,IAAeC,KAAAA;AAE1B,MAAMC,MAASD,IAAIE,SAAAA,EAAWC,MAAM,IAAA;AACpC,MAAMC,OAAOH,IAAO,CAAA,EAAGE,MAAM,GAAA,EAAK,CAAA,KAAM,IAAIE,SAAAA,EAAWJ,IAAO,CAAA,KAAM;AACpE,SAAOG,MAAM,IAAIA,MAAM;AACzB;;;ICNaE,MAAgB,SAAhBA,IAAiBC,KAAAA;AAC5B,MACEC,QACCD,MAAME,OAAOC,oBAAoBH,MAAME,OAAOE,mBAC/C;AACAC,YAAQC,KAAI,GAAAC,OACPP,KAAAA,+EAAAA,CAAAA;EAEP;AACF;AAMA,IAAIC,MAAwB;;;ICffO,MAAQ,SAARA,IAASC,KAAAA;AAAyC,MAA3BC,MAASC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC9C,SAAA,CAAQG,WAAWC,OAAON,GAAAA,EAAKO,YAAYN,GAAAA,CAAAA;AAC7C;;;ICGaO,MAAc,SAAdA,IAAeC,KAAAA;AAC1B,MAAIA,IAAIC,SAAAA,EAAWC,QAAQ,GAAA,MAAA,IAAa;AACtC,WAAOC,OAAOH,IAAIC,SAAAA,EAAWG,QAAQ,KAAK,EAAA,CAAA;EAC5C;AACA,MAAMC,MAAOC,IAAYN,GAAAA;AACzB,SAAOK,MAAO,IAAIE,IAAMJ,OAAOH,GAAAA,IAAOQ,KAAKC,IAAI,IAAIJ,GAAAA,CAAAA,IAASF,OAAOH,GAAAA;AACrE;;;ACJaU,IAAAA,MAAQ,SAARA,GACXC,KACAC,IAAAA;AAEW,WAAAC,IAAAC,UAAAC,QADRC,MAAAA,IAAMC,MAAAJ,IAAAA,IAAAA,IAAAA,IAAAA,CAAAA,GAAAK,KAAA,GAAAA,KAAAL,GAAAK,MAAA;AAANF,IAAAA,IAAME,KAAAJ,CAAAA,IAAAA,UAAAI,EAAAA;EAAA;AAET,MAAIF,IAAOD,SAAS,GAAG;AACrB,WAAOL,IAAKS,MAAAA,QAACT,CAAAA,IAAMC,KAAMC,EAAAA,GAAOI,IAAO,CAAA,CAAA,EAAEI,OAAAC,EAAKL,IAAOM,MAAM,CAAA,CAAA,CAAA,CAAA;EAC7D;AACA,MAAMC,IAAcC,IAAYb,GAAAA;AAChC,MAAMc,KAAcD,IAAYZ,EAAAA;AAChC,MAAMc,KAAUC,IAAYhB,GAAAA,IAAQgB,IAAYf,EAAAA;AAChD,MAAMgB,IAAYL,IAAcE;AAEhCI,EAAAA,IAAcD,CAAAA;AAEd,SAAOA,IAAYE,KAAKC,IAAI,IAAIL,EAAAA;AAClC;;;ACZaM,IAAAA,IAAS,SAATA,GACXC,KACAC,GAAAA;AAEW,WAAAC,KAAAC,UAAAC,QADRC,IAAAA,IAAMC,MAAAJ,KAAAA,IAAAA,KAAAA,IAAAA,CAAAA,GAAAK,KAAA,GAAAA,KAAAL,IAAAK,MAAA;AAANF,MAAME,KAAAJ,CAAAA,IAAAA,UAAAI,EAAAA;EAAA;AAET,MAAIF,EAAOD,SAAS,GAAG;AACrB,WAAOL,EAAMS,MAAAA,QAACT,CAAAA,EAAOC,KAAMC,CAAAA,GAAOI,EAAO,CAAA,CAAA,EAAEI,OAAAC,EAAKL,EAAOM,MAAM,CAAA,CAAA,CAAA,CAAA;EAC/D;AACA,MAAMC,IAAcC,IAAYb,GAAAA;AAChC,MAAMc,IAAcD,IAAYZ,CAAAA;AAChCc,EAAAA,IAAcH,CAAAA;AACdG,EAAAA,IAAcD,CAAAA;AAEd,SAAOE,IACLJ,IAAcE,GACdG,IAAMC,KAAKC,IAAI,IAAIC,IAAYnB,CAAAA,IAAQmB,IAAYpB,GAAAA,CAAAA,CAAAA,CAAAA;AAEvD;;;ACrBaqB,IAAAA,KAAQ,SAARA,IACXC,KACAC,KAAAA;AAEW,WAAAC,MAAAC,UAAAC,QADRC,KAAAA,IAAMC,MAAAJ,MAAAA,IAAAA,MAAAA,IAAAA,CAAAA,GAAAK,IAAA,GAAAA,IAAAL,KAAAK,KAAA;AAANF,IAAAA,GAAME,IAAAJ,CAAAA,IAAAA,UAAAI,CAAAA;EAAA;AAET,MAAIF,GAAOD,SAAS,GAAG;AACrB,WAAOL,GAAKS,MAAAA,QAACT,CAAAA,GAAMC,KAAMC,GAAAA,GAAOI,GAAO,CAAA,CAAA,EAAEI,OAAAC,EAAKL,GAAOM,MAAM,CAAA,CAAA,CAAA,CAAA;EAC7D;AACA,MAAMC,KAAUC,KAAKC,IAAI,IAAID,KAAKE,IAAIC,IAAYhB,GAAAA,GAAOgB,IAAYf,GAAAA,CAAAA,CAAAA;AACrE,UAAQgB,IAAMjB,KAAMY,EAAAA,IAAWK,IAAMhB,KAAMW,EAAAA,KAAYA;AACzD;;;ACXaM,IAAAA,KAAO,SAAPA,IACXC,KACAC,KAAAA;AAEW,WAAAC,IAAAC,UAAAC,QADRC,KAAAA,IAAMC,MAAAJ,IAAAA,IAAAA,IAAAA,IAAAA,CAAAA,GAAAK,MAAA,GAAAA,MAAAL,GAAAK,OAAA;AAANF,IAAAA,GAAME,MAAAJ,CAAAA,IAAAA,UAAAI,GAAAA;EAAA;AAET,MAAIF,GAAOD,SAAS,GAAG;AACrB,WAAOL,GAAIS,MAAAA,QAACT,CAAAA,GAAKC,KAAMC,GAAAA,GAAOI,GAAO,CAAA,CAAA,EAAEI,OAAAC,EAAKL,GAAOM,MAAM,CAAA,CAAA,CAAA,CAAA;EAC3D;AACA,MAAMC,KAAUC,KAAKC,IAAI,IAAID,KAAKE,IAAIC,IAAYhB,GAAAA,GAAOgB,IAAYf,GAAAA,CAAAA,CAAAA;AACrE,UAAQgB,IAAMjB,KAAMY,EAAAA,IAAWK,IAAMhB,KAAMW,EAAAA,KAAYA;AACzD;;;ACXO,IAAMM,MAAQ,SAARA,IAASC,KAAcC,KAAAA;AAClC,MAAMC,MAAOC,KAAKC,IAAI,IAAIH,GAAAA;AAC1B,SAAOI,EAAOF,KAAKJ,MAAMO,IAAMN,KAAKE,GAAAA,CAAAA,GAAQA,GAAAA;AAC9C;;;ACHO,SAASK,GACdC,KACAC,KAAAA;AAEA,MAAIC,MAAMC,QAAQH,GAAAA,GAAM;AACtB,QAAMI,MAAgB,CAAA;AACtB,aAASC,IAAI,GAAGA,IAAIL,IAAIM,QAAQD,KAAK;AACnC,UAAIE,EAAcP,IAAIK,CAAAA,CAAAA,GAAK;AACzBD,QAAAA,IAASC,CAAAA,IAAKN,GAAmBC,IAAIK,CAAAA,GAAIJ,GAAAA;MAC3C,OAAO;AACLG,QAAAA,IAASC,CAAAA,IAAKL,IAAIK,CAAAA;MACpB;IACF;AACA,WAAOD;EACT;AACA,MAAMI,MAAY,CAAE;AACpBC,SAAOC,KAAKV,GAAAA,EAAKW,QAAQ,SAACC,KAAAA;AACxB,QAAMC,KAAMb,IAAIY,GAAAA;AAChB,QAAA,CAAKX,IAASY,IAAKD,GAAAA,GAAM;AACvB,UAAIL,EAAcM,EAAAA,GAAM;AACtBL,QAAAA,IAAUI,GAAAA,IAAOb,GAAmBc,IAAKZ,GAAAA;MAC3C,OAAO;AACLO,QAAAA,IAAUI,GAAAA,IAAOC;MACnB;IACF;EACF,CAAA;AACA,SAAOL;AACT;;;ACnBA,IAAMM,KAAe,SAAfA,GACJC,KACAC,KAAAA;AAEG,MADHC,MAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAEP,MAAA,CAAKG,GAASN,GAAAA,GAAQ;AACpB,WAAOA;EACT;AAEA,MAAIO,EAAQP,GAAAA,GAAQ;AAClB,QAAMQ,MAAkB,CAAA;AACxB,aAASC,KAAI,GAAGA,KAAIT,IAAMI,QAAQK,MAAK;AACrC,UAAMC,IAAUR,MAAI,GAAAS,OAAMT,KAAIS,GAAAA,EAAAA,OAAIF,IAAC,GAAA,IAAA,IAAAE,OAAUF,IAAI,GAAA;AACjD,UAAIR,IAAOS,GAASV,IAAMS,EAAAA,CAAAA,GAAK;AAC7B;MACF;AACAD,MAAAA,IAASI,KAAKb,GAAaC,IAAMS,EAAAA,GAAIR,KAAQS,CAAAA,CAAAA;IAC/C;AACA,WAAOF;EACT;AAGA,WAAWK,KAAOb,KAAO;AACvB,QAAIc,OAAOC,UAAUC,eAAeC,KAAKjB,KAAOa,CAAAA,GAAM;AACpD,UAAMH,IAAUR,MAAI,GAAAS,OAAMT,KAAI,GAAA,EAAAS,OAAIE,CAAAA,IAAQA;AAC1C,UAAMK,KAAMlB,IAAMa,CAAAA;AAClB,UAAIZ,IAAOS,GAASQ,EAAAA,GAAM;AACxBlB,QAAAA,IAAMa,CAAAA,IAAOR;AACb;MACF;AACAL,MAAAA,IAAMa,CAAAA,IAAOd,GAAamB,IAAKjB,KAAQS,CAAAA;IACzC;EACF;AAEA,SAAOV;AACT;AAUA,IAAMmB,KAAa,SAAbA,IAAcC,KAAAA;AAAe,SAAK,SAACP,KAAAA;AAAW,WAAKO,IAAMC,SAASR,GAAAA;EAAI;AAAA;AAiCrE,IAAMS,KAAO,SAAPA,GACXF,GACAG,GAAAA;AAEA,MAAA,CAAKjB,GAASiB,CAAAA,GAAS;AACrB,WAAOA;EACT;AACA,MAAA,OAAWH,MAAU,UAAU;AAC7BA,QAAQ,CAACA,CAAAA;EACX;AACA,MAAMnB,IAAcM,EAAQa,CAAAA,IAASD,GAAWC,CAAAA,IAAqBA;AACrE,MAAMI,KAAaC,MAAMC,QAAQH,CAAAA,IAAOI,EAAOJ,CAAAA,IAAMK,EAAA,CAAA,GAASL,CAAAA;AAC9D,MAAMM,IAAS9B,GAAayB,IAAYvB,CAAAA;AACxC,SAAO6B,GAAmBD,GAAQ,SAACX,KAAAA;AAAG,WAAKa,GAAYb,GAAAA;EAAAA,CAAAA;AAIzD;;;ACzGO,IAAMc,MAAO,SAAPA,IACXC,KACAC,KAAAA;AAEA,MAAA,CAAKC,GAASF,GAAAA,KAAAA,OAAeA,QAAQ,YAAY;AAC/C,WAAO,CAAE;EACX;AAEA,MAAIG;AAEJ,MAAIC,MAAMC,QAAQJ,GAAAA,GAAO;AACvBE,IAAAA,MAAQF;EACV,OAAO;AACLE,IAAAA,MAAQ,CAACF,GAAAA;EACX;AAEA,SAAOE,IAAMG,OACX,SAACC,KAAKC,KAAAA;AACJ,QAAIC,OAAOC,UAAUC,eAAeC,KAAKZ,KAAKQ,GAAAA;AAAMD,MAAAA,IAAIC,GAAAA,IAAOR,IAAIQ,GAAAA;AACnE,WAAOD;EACR,GACD,CAAA,CAAA;AAEJ;;;AChCO,IAAMM,KAAW;;;ICUXC,MAAW,SAAXA,IAAYC,KAAAA;AACvB,MAAA,CAAKC,GAASD,GAAAA,GAAM;AAClB,WAAO;EACT;AACA,MAAME,MAAMF,IAAIG,QAAQC,IAAU,EAAA,EAAIC,MAAM,GAAA;AAC5C,MAAIH,IAAII,WAAW,GAAG;AACpB,WAAO;EACT;AACA,SAAOJ,IAAIK,MAAM,SAACC,KAAAA;AAChB,WAAO,QAAQC,KAAKD,GAAAA;EACtB,CAAA;AACF;;;ACrBYE,IAAAA,MAAAA,SAAAA,KAAAA;AAAAA,EAAAA,IAAa,OAAA,IAAA;AAAbA,EAAAA,IAAa,UAAA,IAAA;AAAbA,EAAAA,IAAa,aAAA,IAAA;AAAA,SAAbA;AAAa,EAAA,CAAA,CAAA;ACYlB,IAAMC,MAAoB,SAApBA,IAAqBC,KAAcC,KAAAA;AAC9C,MAAA,CAAKC,IAASF,GAAAA,GAAO;AACnB,UAAM,IAAIG,MAAK,GAAAC,OAAIJ,KAAAA,oBAAAA,CAAAA;EACrB;AACA,MAAA,CAAKE,IAASD,GAAAA,GAAO;AACnB,UAAM,IAAIE,MAAK,GAAAC,OAAIH,KAAAA,oBAAAA,CAAAA;EACrB;AACA,SAAO;AACT;AAAA,IAYaI,MAAQ,SAARA,GAASC,KAAAA;AACpB,SAAOA,IAAIC,QAAQC,IAAU,EAAA,EAAIC,MAAM,GAAA,EAAKC,IAAIC,MAAAA;AAClD;AAaO,IAAMC,KAAU,SAAVA,IAAWC,KAAWC,KAAAA;AACjC,SAAOD,QAAMC,MACThB,IAAciB,QACdF,MAAIC,MACFhB,IAAckB,cACdlB,IAAcmB;AACtB;AAaO,IAAMC,KAAiB,SAAjBA,IAAkBlB,KAAgBC,KAAAA;AAC7C,MAAID,IAAKmB,KAAK,GAAA,MAASlB,IAAKkB,KAAK,GAAA,GAAM;AACrC,WAAOrB,IAAciB;EACvB;AACA,WAASK,MAAI,GAAGA,MAAIpB,IAAKqB,QAAQD,OAAK;AACpC,QAAME,MAASV,GAAQZ,IAAKoB,GAAAA,GAAInB,IAAKmB,GAAAA,CAAAA;AACrC,QAAIE,QAAWxB,IAAciB,OAAO;AAClC,aAAOO;IACT;EACF;AACA,SAAOxB,IAAciB;AACvB;;;AClEO,IAAMQ,MAAK,SAALA,IAAMC,KAAcC,KAAAA;AAC/B,MAAIC,IAAkBF,KAAMC,GAAAA,GAAO;AACjC,WAAOE,GAAeC,IAAMJ,GAAAA,GAAOI,IAAMH,GAAAA,CAAAA,MAAWI,IAAcC;EACpE;AAEF;;;ACLO,IAAMC,MAAK,SAALA,IAAMC,KAAcC,KAAAA;AAC/B,MAAIC,IAAkBF,KAAMC,GAAAA,GAAO;AACjC,WACEE,GAAeC,IAAMJ,GAAAA,GAAOI,IAAMH,GAAAA,CAAAA,MAAWI,IAAcC;EAE/D;AAEF;;;ACPO,IAAMC,KAAM,SAANA,IAAOC,KAAcC,KAAAA;AAChC,MAAIC,IAAkBF,KAAMC,GAAAA,GAAO;AACjC,QAAME,KAASC,GAAeC,IAAML,GAAAA,GAAOK,IAAMJ,GAAAA,CAAAA;AACjD,WACEE,OAAWG,IAAcC,eAAeJ,OAAWG,IAAcE;EAErE;AAEF;;;ACRO,IAAMC,MAAK,SAALA,IAAMC,KAAcC,KAAAA;AAC/B,MAAIC,IAAkBF,KAAMC,GAAAA,GAAO;AACjC,WAAOE,GAAeC,IAAMJ,GAAAA,GAAOI,IAAMH,GAAAA,CAAAA,MAAWI,IAAcC;EACpE;AAEF;;;ACLO,IAAMC,MAAM,SAANA,IAAOC,KAAcC,KAAAA;AAChC,MAAIC,IAAkBF,KAAMC,GAAAA,GAAO;AACjC,QAAME,KAASC,GAAeC,IAAML,GAAAA,GAAOK,IAAMJ,GAAAA,CAAAA;AACjD,WAAOE,OAAWG,IAAcC,YAAYJ,OAAWG,IAAcE;EACvE;AAEF;;;ACLO,IAAMC,KAAY,SAAZA,IAAaC,KAAAA;AACxB,MAAIC,IAASD,GAAAA,GAAM;AACjB,QAAME,MAASC,IAAMH,GAAAA,EAAKI,KAAK,GAAA;AAC/B,QAAMC,KAAcL,IAAIM,MAAMC,EAAAA,KAAa,CAAA;AAC3C,WAAOF,GAAYG,SAASN,MAASG,GAAY,CAAA,IAAKH;EACxD;AACA,MAAMO,KAAST,IAAIU,QAAQ,WAAW,EAAA,EAAIA,QAAQ,QAAQ,GAAA;AAC1D,MAAMC,IAAMF,GACTG,MAAM,GAAA,EACNC,MAAM,GAAG,CAAA,EACTC,OAAO,SAACC,KAAAA;AAAC,WAAA,CAAA,CAAOA;EAAAA,CAAAA;AACnB,MAAMC,IAASC,IAAeN,GAAK,GAAG,GAAA,EAAKP,KAAK,GAAA;AAChD,MAAIH,IAASe,CAAAA,GAAS;AACpB,WAAOjB,GAAUiB,CAAAA;EACnB;AACA,SAAO;AACT;;;AClBA,IAAME,KAAgB,SAAhBA,IAAiBC,KAAMC,KAA6BC,IAAAA;AAAU,MAAAC,MAAAC,EAAAH,GAAAA,GAApCI,KAAIF,IAAA,CAAA,GAAKG,IAAIH,IAAAI,MAAA,CAAA;AAC3CP,EAAAA,MAASA,IAAOK,EAAAA,IAAQC,EAAKE,SAASR,IAAOK,EAAAA,KAAS,CAAA,IAAKH;AAC3D,MAAII,EAAKE,QAAQ;AACf,QAAIC,GAAST,GAAAA,KAAAA,CAAYU,EAAQV,GAAAA,GAAS;AACxCD,MAAAA,GAAcC,KAAQM,GAAMJ,EAAAA;IAC9B,OAAO;AACL,YAAM,IAAIS,MAAK,gBAAAC,OAAiBP,IAAAA,6BAAAA,CAAAA;IAClC;EACF;AACF;AAcO,IAAMQ,MAAM,SAANA,IAAOb,KAAmCc,KAAcZ,KAAAA;AACnEF,EAAAA,MAASA,OAAU,CAAE;AACrBD,EAAAA,GAAcC,KAAQc,IAAKC,MAAM,GAAA,GAAMb,GAAAA;AACvC,SAAOF;AACT;;;ICtBagB,MAAe,SAAfA,IAAgBC,KAAAA;AAC3B,UAAQA,OAAO,IACZC,MAAM,SAAA,EACNC,OAAO,SAACC,KAAAA;AAAC,WAAA,CAAA,CAAOA;EAAC,CAAA,EACjBC,IAAI,SAACC,KAAMC,KAAAA;AAEV,QAAIA,QAAU,GAAG;AACf,aAAOD,IAAKE,YAAAA;IACd;AAEA,WAAOF,IAAKG,OAAO,CAAA,EAAGC,YAAAA,IAAgBJ,IAAKK,MAAM,CAAA,EAAGH,YAAAA;EACtD,CAAA,EACCI,KAAK,EAAA;AACV;;;ICfaC,MAAgB,SAAhBA,IAAiBC,KAAAA;AAC5BA,EAAAA,MAAMA,OAAO;AACb,SAAOA,IAAIC,OAAO,CAAA,EAAGC,YAAAA,IAAgBF,IAAIG,MAAM,CAAA,EAAGC,YAAAA;AACpD;;;ICDaC,MAAmB,SAAnBA,IAAoBC,KAAAA;AAC/BA,EAAAA,MAAMA,OAAO;AACb,MAAMC,MAAUD,IAAIE,MAAM,KAAA,EAAOC,IAAI,SAACC,KAAAA;AAAC,WAAKC,IAAcD,GAAAA;EAAAA,CAAAA;AAC1D,SAAOH,IAAQK,KAAK,GAAA;AACtB;;;ICHaC,MAAW,SAAXA,IAAYC,KAAAA;AAAkC,MAArBC,MAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC9C,UAAQF,OAAO,IAAIK,QAAQ,IAAIC,OAAOL,KAAS,GAAA,GAAM,EAAA;AACvD;;;ICHaM,MAAU,SAAVA,IAAWC,KAAAA;AACtB,SAAQA,OAAOA,IAAIC,QAAQ,cAAc,EAAA,KAAQ;AACnD;;;ICRaC,MAAY,SAAZA,IAAaC,KAAAA;AAAmD,MAAtCC,MAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC/CF,EAAAA,MAAMA,OAAO;AACb,MAAIK,MAAI;AACR,MAAMC,KAAaC,IAAQN,IAAQO,QAAQ,MAAM,EAAA,EAAI,CAAA,CAAA;AACrD,MAAMC,MAAWH,KAAU,OAAAI,OAAUJ,EAAAA,IAAe;AACpD,MAAMK,KAASV,IAAQO,QAAQ,IAAII,OAAOH,KAAU,GAAA,GAAM,SAACI,KAAAA;AACzD,YAAQA,QAAU,MAAMb,IAAIK,KAAAA,IAAOJ,IAAQI,KAAAA,MAAS;EACtD,CAAA;AACA,SAAOE,IAAQI,EAAAA;AACjB;;;ICDaG,MAAoB,SAApBA,IAAqBC,KAAAA;AAChC,SAAOC,IAAUD,KAAK,0BAAA;AACxB;;;ICJaE,MAAkB,SAAlBA,IAAmBC,KAAAA;AAC9B,SAAOC,IAAUD,KAAK,sBAAA;AACxB;;;ICAaE,MAAe,SAAfA,IAAgBC,KAAAA;AAC3B,SAAOC,IAAUD,KAAK,eAAA;AACxB;;;ICDaE,MAAe,SAAfA,IAAgBC,KAAAA;AAAmC,MAAtBC,MAASC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AACpDF,EAAAA,MAAMA,IAAIK,QAAQ,wCAAwC,GAAA;AAC1DL,EAAAA,MAAMA,IAAIK,QAAQ,qBAAqB,OAAA;AACvCL,EAAAA,MAAMM,IAAQN,GAAAA,EAAKK,QAAQ,QAAQ,GAAA;AACnC,SAAOJ,MAAYD,IAAIO,YAAAA,IAAgBP;AACzC;;;ICJaQ,MAAY,SAAZA,MAAAA;AAAqC,MAAxBC,MAAGC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAAE,MAAEG,MAAKH,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC1C,MAAIG,MAAQ,GAAG;AACb,UAAM,IAAIC,WAAW,mCAAA;EACvB;AACA,MAAID,QAAUE,UAAU;AACtB,UAAM,IAAID,WAAW,yCAAA;EACvB;AAEAD,EAAAA,MAAQA,MAAQ;AAChB,MAAIJ,IAAIE,WAAW,KAAKE,QAAU,GAAG;AACnC,WAAO;EACT;AAIA,MAAIJ,IAAIE,SAASE,OAAS,KAAK,IAAI;AACjC,UAAM,IAAIC,WAAW,oDAAA;EACvB;AACA,MAAME,MAAiB,CAAA;AACvB,WAASC,MAAI,GAAGA,MAAIJ,KAAOI,OAAK;AAC9BD,IAAAA,IAAKE,KAAKT,GAAAA;EACZ;AACA,SAAOO,IAAKG,KAAK,EAAA;AACnB;;;ICvBaC,MAAS,SAATA,IAAUC,KAAAA;AAAiD,MAApCC,MAAMC,UAAAD,SAAA,KAAAC,UAAA,CAAA,MAAAC,SAAAD,UAAA,CAAA,IAAG;AAAC,MAAEE,MAAKF,UAAAD,SAAA,KAAAC,UAAA,CAAA,MAAAC,SAAAD,UAAA,CAAA,IAAG;AACtDF,EAAAA,MAAMA,OAAO;AACb,MAAMK,IAAMC,KAAKC,IAAIN,GAAAA;AACrB,MAAII,KAAOL,IAAIC,QAAQ;AACrB,WAAOD;EACT;AACA,MAAMQ,IAAYC,IAAUL,KAAOC,IAAML,IAAIC,MAAAA;AAC7C,SAAOA,MAAS,IAAIO,IAAYR,MAAMA,MAAMQ;AAC9C;;;ACdA,IAAME,KAAe,SAAfA,MAAAA;AAA4C,MAA5BC,MAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAC9B,MAAAG,MAAqBJ,IAAQK,MAAML,IAAQM,QAAQ,MAAM,EAAA,CAAA,GAAIC,MAAAC,EAAAJ,KAAA,CAAA,GAAtDK,KAAKF,IAAA,CAAA,GAAEG,MAAGH,IAAA,CAAA;AACjB,SAAO,EACLI,QAAQF,GAAMP,QACdU,OAAOF,IAAIR,QACXW,MAAMb,IAAQE,UAAUO,GAAMP,SAASQ,IAAIR,QAAAA;AAE/C;AAAA,IAwBaY,MAAU,SAAVA,MAAAA;AAAyD,MAA9CC,MAAGd,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAAE,MAAED,KAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAE1C,MAAMe,MAASD,IAAIb;AACnB,MAAAe,IAAgClB,GAAaC,EAAAA,GAArCW,MAAMM,EAANN,QAAQC,MAAKK,EAALL,OAAOC,IAAII,EAAJJ;AACvB,MAAIG,MAASL,OAAUK,MAASL,MAASC,KAAO;AAC9CG,IAAAA,MACEG,IAAOH,IAAII,OAAO,GAAGR,GAAAA,GAASA,MAASE,GAAM,GAAA,IAAOE,IAAII,OAAOR,GAAAA;EAClE,WAAUK,MAASL,OAAUK,MAAShB,GAAQE,QAAQ;AACrDa,IAAAA,MACEG,IAAOH,IAAII,OAAO,GAAGR,GAAAA,GAASA,MAASE,GAAM,GAAA,IAC7CE,IAAII,OAAOH,MAASJ,GAAAA;EACxB,WAAWI,MAAShB,GAAQE,QAAQ;AAClCa,IAAAA,MACEA,IAAII,OAAO,GAAGR,GAAAA,IACdO,IAAO,IAAIL,GAAM,GAAA,IACjBE,IAAII,OAAOH,MAASJ,GAAAA;EACxB;AACA,SAAOQ,IAAUL,KAAKf,EAAAA;AACxB;;;ACvDO,SAASqB,IAAcC,KAAaC,KAAAA;AACzC,MAAMC,MAASF,IAAI,CAAA,EAAGG,YAAAA,IAAgBH,IAAII,OAAO,CAAA;AACjD,SAAOF,IAAOG,QAAQ,YAAY,SAACC,KAAAA;AAAE,WAAAC,GAAAA,OAAQN,GAAAA,EAAMM,OAAGD,IAAGH,YAAAA,CAAAA;EAAa,CAAA;AACxE;;;ACdO,IAAMK,MAAe;;;ACsB5B,SAASC,IACPC,KACAC,KAAAA;AAEA,MAAMC,MAAU,oBAAIC;AACpB,MAAMC,MAAWH,QAAW,QAAXA,QAAAA,SAAAA,MAAeI;AAChC,WAASC,GAAMC,KAAAA;AACbL,IAAAA,IAAQM,IAAID,IAAKE,IAAIF,GAAAA;AACrBA,IAAAA,IAAKH,GAAAA,EAAUM,QAAQJ,EAAAA;EACzB;AACA,MAAIN,KAAM;AACRM,IAAAA,GAAMN,GAAAA;EACR;AACA,SAAOE;AACT;AAkBO,SAASS,GAIdC,IACAC,IACAZ,GAAAA;AACyC,MAAAa;AACzC,MAAMC,MAA4D,CAAA;AAClE,MAAMC,IAIF,CAAE;AACN,MAAMZ,IAAYH,MAAW,QAAXA,MAAAA,SAAAA,IAAeI;AACjC,MAAMY,MAAkBlB,IAAUc,IAAcT,CAAAA;AAEhD,MAAAc,IAAAC,EACmBP,EAAAA,GAAKQ;AAAA,MAAA;AAAxB,SAAAF,EAAAG,EAAAA,GAAAA,EAAAD,KAAAF,EAAAI,EAAAA,GAAAC,QAA0B;AAAA,UAAfhB,IAAIa,GAAAI;AACbR,QAAUT,EAAKE,EAAAA,IAAGgB,EAAAA,EAAA,CAAA,GAASlB,CAAAA,GAAImB,CAAAA,GAAAA,EAAAA,CAAAA,GAAWtB,GAAW,CAAA,CAAA,CAAA;IACvD;EAAC,SAAAuB,KAAAA;AAAAT,MAAAU,EAAAD,GAAAA;EAAA,UAAA;AAAAT,MAAAW,EAAAA;EAAA;AAAA,MAAAC,KAAAX,EAEgBP,GAAMmB,IAAI,SAACT,KAAAA;AAAC,WAAKA,IAAEb;EAAAA,CAAAA,CAAAA,GAAGuB;AAAA,MAAA;AAAvC,SAAAF,GAAAT,EAAAA,GAAAA,EAAAW,KAAAF,GAAAR,EAAAA,GAAAC,QAAyC;AAAA,UAA9Bd,IAAEuB,GAAAR;AAEX,UAAIR,EAAUiB,eAAexB,CAAAA,GAAK;AAAA,YAAAyB,GAAAC;AAChC,YAAMC,IAAapB,EAAUP,CAAAA;AAC7B2B,UAAWC,YAAQH,KAAAC,IAAGlB,IAAgBqB,IAAI7B,CAAAA,OAAG0B,QAAAA,MAAAA,SAAvBA,SAAAA,EAAyBE,cAAAA,QAAQH,MAAAA,SAAAA,IAAI;AAC3D,YAAMK,IAASH,EAAWG;AAE1B,YAAMC,KAAAA,CAAgBD,KAAAA,CAAWvB,EAAUuB,EAAO9B,EAAAA;AAClD,YAAI+B,IAAc;AAChBzB,UAAAA,IAAc0B,KAAKL,CAAAA;QACpB,WAAUG,GAAQ;AACjB,cAAIvB,EAAUuB,EAAO9B,EAAAA,GAAK;AACxBO,cAAUuB,EAAO9B,EAAAA,EAAIL,CAAAA,EAAUqC,KAAKL,CAAAA;UACtC,OAAO;AACLpB,cAAUuB,EAAO9B,EAAAA,IAAGiB,EAAA,CAAA,GAAMtB,GAAW,CAACgC,CAAAA,CAAAA;UACxC;QACF;MACF;IACF;EAAC,SAAAT,KAAAA;AAAAG,IAAAA,GAAAF,EAAAD,GAAAA;EAAA,UAAA;AAAAG,IAAAA,GAAAD,EAAAA;EAAA;AAED,MAAMa,IAAS3B,IAAc4B,UAAM7B,MAAGC,IAAc,CAAA,EAAGwB,YAAMzB,QAAAA,QAAAA,SAAAA,SAAvBA,IAAyBL,KAAKmC;AAEpE,SAAAlB,EAAA,EACEjB,IAAIiC,EAAAA,GACHtC,GAAWW,GAAAA;AAEhB;;;AC7EO,IAAM8B,KAAe,SAAfA,GAIXC,KACAC,KACAC,KAAAA;AAEA,MAAMC,MACJD,QAAU,QAAVA,QAAAA,SAAAA,MAAe,SAACE,KAAAA;AAAI,QAAAC;AAAA,WAAMD,IAAKE,UAAMD,MAAGD,IAAKE,YAAM,QAAAD,QAAAA,SAAXA,SAAAA,IAAaE,KAAK;EAAQ;AAEpE,MAAMC,IAAUC,GAAaT,KAAOG,GAAAA;AACpC,MAAMO,IAAoB,oBAAIC;AAC9B,MAAMC,IAAYX,QAAW,QAAXA,QAAAA,SAAAA,MAAeY;AAEjC,WAASC,GAAWP,IAAgBQ,GAAAA;AAIlC,QAAIA,MAAa,QAAQA,MAAa,QAAQ;AAC5CL,QAAkBM,MAAAA;IACpB;AAEA,QAAIN,EAAkBO,IAAIV,EAAAA,GAAK;AAC7B,aAAO,CAAA;IACT;AAEAG,MAAkBQ,IAAIX,EAAAA;AACtB,YAAQC,EAAQD,EAAAA,KAAO,CAAA,GAAIY,IAAI,SAACf,IAAAA;AAC9B,aAAAgB,EAAAA,EACKhB,CAAAA,GAAAA,EAAAA,GAAAA,CAAAA,GAAIiB,EAAA,EACPd,IAAIH,GAAKG,GAAAA,GACRK,GAAWE,GAAWV,GAAKG,IAAIJ,IAAiBC,EAAAA,CAAAA,CAAAA,CAAAA;IAErD,CAAA;EACF;AAEA,SAAAiB,EAAA,EACEd,IAAI,OAAA,GACHK,GAAWE,GAAW,QAAQ,MAAA,CAAA;AAEnC;;;ACtDA,IAAMQ,MAAM,CAAE,EAACC;AAgBR,SAASC,IAIdC,KACAC,KAAAA;AAOqC,MADrCC,MAAgDC,UAAAC,SAAAD,KAAAA,UAAAE,CAAAA,MAAAA,SAAAF,UAAG,CAAA,IAAA,EAAEG,SAAS,MAAA;AAE9D,SAAOC,EAASP,GAAAA;AAShB,WAAeO,EACbC,KACAC,IACAC,IAAAA;AArDJ,QAAIC,MAAKR;AAkDP,WAAA,IAAAS,QAAA,SAAAC,GAAAC,GAAAA;AAAA,UAAAC,KAAAC,KAMQC,GACFC,IACAC,GACAC,GACEC,IACAC,IA4BAC;AAnCNP,MAAAA,MAAKL,IAAAP,SAAA,KAAAO,IAAA,CAAA,MAAAN,SAAAM,IAAA,CAAA,IAAG;AAEFM,UAAmB,CAAA;AAInBI,MAAAA,MAAWN,MAAGb,IAAQmB,iBAAW,QAAAN,QAAAA,SAAAA,MAAIS;AACxB,aAAAZ,QAAAa,QAAMxB,IAAKO,KAAMC,IAAOC,IAAQM,GAAAA,CAAAA,EAAhCU,MA7DvB,SAAAC,KAAAA;AAAA,YAAA;AAwFI,cAAAC,KAAA,WAAAA;AACML,gBAAO,CAAE;AAEf,iBAAKJ,KAAOX,KAAM;AAEhB,kBAAIX,IAAIgC,KAAKrB,KAAMW,CAAAA,GAAM;AACvBI,kBAAKJ,CAAAA,IAAOA,MAAQE,KAAcJ,IAAWT,IAAKW,CAAAA;cACpD;YACF;AAEA,mBAAAN,EAAOU,CAAAA;UAA4B;AArC7BD,UAAAA,KAAaK;AACnB,cAAA,CAAKL;AAAY,mBAAAT,EAAO,IAAA;AAExB,cAAIL,IAAKa,EAAAA,GAAc;AAGrB,gBAAAS,KAAA,WAAAA;AAAA,kBAAA,EACSV,IAAaZ,IAAKa,EAAAA,EAAajB,QAAM;AAEnC,uBAAAQ,QAAAa,QAAMlB,EACbC,IAAKa,EAAAA,EAAaD,CAAAA,GAClBA,GACAZ,KACAQ,GAAAA,CAAAA,EAJOU,KAKR,SAAAK,KAAAA;AA3ET,sBAAA;AAsEQb,oBAAAA,KAASa;AAOT,wBAAIb,IAAQ;AACVD,wBAASe,KAAKd,EAAAA;oBAChB;AA/ER,2BAAAY;kBAAS,SAACG,KAAAA;AAAW,2BAAOnB,EAAAmB,GAAAA;kBAAM;gBAAC,GAAAnB,CAAAA;cA2E1B;AAAA,uBAAA,CAAA,CAAA;YAAA,GA3EseoB,MAAA,WAAAA;AAmFze,kBAAIhC,IAAQI,WAAWE,IAAKa,EAAAA,EAAajB,UAAAA,CAAWa,EAASb;AAC3D,uBAAAS,EAAO,IAAA;AAAK,qBApFpBe,GAAGC,KAAIM,IAAAA;YAAI;AAiELf,gBAAAA;AACAJ,YAAAA;AACA,gBAAAoB;AAQG,oBA3ERA,OAAiB,SAAUC,KAAAA;AAAsB,qBAAOA,KAAG;AAAW,oBAAIA,IAAEX;AAAoB,yBAAA,KAAYW,IAAEX,KAAIU,KAAAtB,CAAAA;AAAiC,oBAAA;AAAmB,sBAAIuB,IAAEC,KAAG;AAAoB,wBAAID,IAAEjC;AAA0B,6BAAOiC,IAAEC,IAAAA,IAAQJ,IAAgBL,KAAKM,IAAAA,IAAQE;;AAAwCA,sBAAAA,MAACP;kBAAW;AAAsCO,oBAAAA,MAAIA,IAAER,KAAKM,IAAAA;gBAAiB,SAAQI,KAAAA;AAA2B,yBAAOzB,EAAMyB,GAAAA;gBAAuB;cAAO;YAAE,GAAGC,KAAKL,IAAAA,GAAKL,EAAAA;UAqFje;AAamC,iBAlGvCF,GAAGC,KAAIM,IAAAA;QAAE,SAACF,KAAAA;AAAW,iBAAOnB,EAAAmB,GAAAA;QAAM;MAAC,GAAhCO,KAAKL,IAAAA,GAAKrB,CAAAA;IA6DgD,CAAA;EAsC1D;AACH;;;ACjGA,IAAM2B,MAAM,CAAE,EAACC;AAUR,SAASC,IAIdC,KACAC,KAAAA;AAO4B,MAD5BC,KAAgDC,UAAAC,SAAAD,KAAAA,UAAAE,CAAAA,MAAAA,SAAAF,UAAG,CAAA,IAAA,EAAEG,SAAS,MAAA;AAE9D,SAAOC,IAASP,GAAAA;AAShB,WAASO,IACPC,KACAC,KACAC,GAAAA;AAE4B,QAAAC;AAAA,QAD5BC,KAAKT,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAER,QAAMU,KAAmB,CAAA;AACzB,QAAIC;AACJ,QAAIC;AACJ,QAAIC;AACJ,QAAMC,OAAWN,IAAGT,GAAQe,iBAAW,QAAAN,MAAAA,SAAAA,IAAIO;AAC3C,QAAMC,IAAalB,IAAKO,KAAMC,KAAOC,GAAQE,EAAAA;AAC7C,QAAA,CAAKO;AAAY,aAAO;AAExB,QAAIX,IAAKS,GAAAA,GAAc;AACrBD,UAAAA;AACAJ,MAAAA;AAEA,aAAA,EAASI,IAAaR,IAAKS,GAAAA,EAAab,QAAQ;AAE9CU,YAASP,IACPC,IAAKS,GAAAA,EAAaD,CAAAA,GAClBA,GACAR,KACAI,EAAAA;AAGF,YAAIE,GAAQ;AACVD,UAAAA,GAASO,KAAKN,CAAAA;QAChB;MACF;AAGA,UAAIZ,GAAQI,WAAWE,IAAKS,GAAAA,EAAab,UAAAA,CAAWS,GAAST;AAC3D,eAAO;IACX;AAIA,QAAMiB,IAAO,CAAE;AAEf,SAAKN,OAAOP,KAAM;AAEhB,UAAIX,IAAIyB,KAAKd,KAAMO,GAAAA,GAAM;AACvBM,UAAKN,GAAAA,IAAOA,QAAQE,MAAcJ,KAAWL,IAAKO,GAAAA;MACpD;IACF;AAEA,WAAOM;EACT;AACF;;;ACnEA,IAAME,MAAe,SAAfA,IAIJC,KAAAA;AAEA,SAAA,CAAQC,MAAMC,QAAQF,GAAAA,KAAUG,EAAOH,GAAAA,MAAU;AACnD;AAuEA,IAAMI,MAAW,SAAXA,IAIJJ,KACAK,KACAC,KAAAA;AACwD,MAAAC;AACxD,MAAIC,IAA8D;AAClE,MAAMC,IAAWH,IAAQG;AACzB,MAAMC,IAAWJ,IAAQI;AACzB,MAAMC,MAAWJ,IAAGD,IAAQK,iBAAW,QAAAJ,MAAAA,SAAAA,IAAIK;AAG3C,MAAIX,MAAMC,QAAQF,GAAAA,GAAQ;AACxB,aAASa,KAAI,GAAGA,KAAIb,IAAMc,QAAQD,MAAK;AACrCL,UAASJ,IAASJ,IAAMa,EAAAA,GAAIR,KAAW,EACrCI,UAAUA,GACVC,UAAUA,GACVC,aAAaA,GAAAA,CAAAA;AAEf,UAAIH,GAAQ;AACV;MACF;IACF;EACF;AAEA,MAAIT,IAAaC,GAAAA,GAAQ;AACvB,QAAMe,KAAWN,EAAST,KAAOU,CAAAA;AACjC,QAAIL,IAAUU,EAAAA,GAAW;AACvB,aAAOA;IACT;AACA,QAAIA,GAASJ,EAAAA,KAAgBI,GAASJ,EAAAA,EAAaG,QAAQ;AACzDN,UAASJ,IAASW,GAASJ,EAAAA,GAAcN,KAAW,EAClDI,UAAUA,GACVC,UAAUK,GAASC,IACnBL,aAAaA,GAAAA,CAAAA;IAEjB;EACF;AAEA,SAAOH;AACT;AAiBA,SAASS,IAIPjB,KACAK,KACAM,KAAAA;AAEA,MAAMO,MAAuD,CAAA;AAI7D,MAAMT,MAAW,SAAXA,IACJU,KACAT,KAAAA;AAEA,QAAIA,KAAU;AACZS,MAAAA,IAAKT,WAAWA;IAClB;AAMAQ,IAAAA,IAAKE,KAAKD,GAAAA;AAEV,WAAOA;EACR;AAED,MAAMb,MAAU,EAGdG,UAAUA,KACVE,aAAAA,IAAAA;AAGF,MAAMH,IAASJ,IAASJ,KAAOK,KAAWC,GAAAA;AAE1C,SAAO,EAAEE,QAAQA,GAAQU,MAAMA,IAAAA;AACjC;AAeA,SAASG,IAIPrB,KACAmB,KAAAA;AAEA,MAAMX,MAAyD,CAAA;AAE/D,MAAA,CAAKR,IAAMc,UAAAA,CAAWK,KAAM;AAC1B,WAAOX;EACT;AAEAA,EAAAA,IAAOY,KAAKD,GAAAA;AAEZ,SAAOA,IAAKT,UAAU;AACpB,QAAIY,MAAAA;AAEJ,aAAST,MAAI,GAAGA,MAAIb,IAAMc,QAAQD,OAAK;AACrC,UAAMU,MAAOvB,IAAMa,GAAAA;AAEnB,UAAIU,IAAKP,OAAOG,IAAKT,UAAU;AAC7B;MACF;AAEAS,MAAAA,MAAOG,MAAcC;AACrBf,MAAAA,IAAOY,KAAKD,GAAAA;IACd;AAEA,QAAA,CAAKG,KAAa;AAChB;IACF;EACF;AAEA,SAAOd;AACT;AAgBO,SAASgB,GAIdxB,KACAK,KACAM,KAAAA;AAEA,MAAA,CAAKV,MAAMC,QAAQF,GAAAA,GAAQ;AACzB,UAAM,IAAIyB,UAAU,+BAA4BtB,EAAUH,GAAAA,CAAAA;EAC5D;AAEA,MAAA,OAAWK,QAAc,YAAY;AACnC,UAAM,IAAIoB,UAAU,iCAA8BtB,EAAUE,GAAAA,CAAAA;EAC9D;AAEA,MAAMqB,MAAgBT,IAAoBjB,KAAOK,KAAWM,GAAAA;AAE5D,SAAOU,IAA2BK,IAAcR,MAAMQ,IAAclB,MAAAA;AACtE;;;ACpQO,SAASmB,IAGdC,KAAkCC,KAAAA;AAClC,MAAA,CAAKD,KAAW;AACd,WAAO,CAAA;EACT;AACA,MAAME,IAAYD,QAAW,QAAXA,QAAAA,SAAAA,MAAeE;AACjC,MAAMC,IAAe,CAAA;AACrB,WAASC,IAAYC,KAAAA;AACnB,QAAA,CAAKF,EAAKG,SAASD,GAAAA,GAAO;AACxBF,QAAKI,KAAKF,GAAAA;IACZ;AACA,QAAIG,MAAMC,QAAQJ,IAAKJ,CAAAA,CAAAA,GAAY;AACjCI,MAAAA,IAAKJ,CAAAA,EAAUS,QAAQ,SAACC,KAAAA;AACtBP,QAAAA,IAAYO,GAAAA;MACd,CAAA;IACF;EACF;AAEAZ,EAAAA,IAAUW,QAAQ,SAACC,KAAAA;AAAI,WAAKP,IAAYO,GAAAA;EAAAA,CAAAA;AAExC,SAAOR,EAAKS,IAAI,SAACC,KAAAA;AACf,WAAAC,EAAAA,EAAYD,CAAAA,GAAAA,GAAAA,GAAAA,CAAAA,GAACE,EAAA,CAAA,GAAGd,GAAW,CAAA,CAAA,CAAA;EAC7B,CAAA;AACF;;;ACrCA,IAAMe,MAAM,CAAE,EAACC;AAeR,SAASC,IAIdC,KACAC,KAKAC,KAAAA;AAEA,SAAOC,EAAYH,GAAAA;AAEnB,WAAeG,EACbC,KACAC,KACAC,IAAAA;AAHF,WAAA,IAAAC,QAAA,SAAAC,IAAAC,GAAAA;AAAA,UAKQC,GACFC,KACAC,KACAC,GACEC,IAEAC,IAqBAC;AA3BAN,UAAmB,CAAA;AAInBI,MAAAA,KAAWZ,QAAW,QAAXA,QAAAA,SAAAA,MAAee;AAEhB,aAAAV,QAAAW,QAAMjB,IAASG,KAAMC,KAAOC,EAAAA,CAAAA,EAA5Ba,MA/CpB,SAAAC,KAAAA;AAAA,YAAA;AAmEI,cAAAC,MAAA,WAAAA;AACML,gBAAO,CAAE;AAEf,iBAAKJ,OAAOG,IAAS;AAEnB,kBAAIlB,IAAIyB,KAAKP,IAASH,GAAAA,GAAM;AAC1BI,kBAAKJ,GAAAA,IAAOA,QAAQE,KAAWJ,IAAWK,GAAQH,GAAAA;cACpD;YACF;AAEA,mBAAAJ,GAAOQ,CAAAA;UAA4B;AA9B7BD,UAAAA,KAAUK;AAChB,cAAIhB,IAAKU,EAAAA,GAAW;AAGlB,gBAAAS,MAAA,WAAAA;AAAA,kBAAA,EACSV,IAAaT,IAAKU,EAAAA,EAAUU,QAAM;AAEhC,uBAAAjB,QAAAW,QAAMf,EACbC,IAAKU,EAAAA,EAAUD,CAAAA,GACfA,GACAE,EAAAA,CAAAA,EAHOI,KAIR,SAAAM,KAAAA;AA1DT,sBAAA;AAsDQd,oBAAAA,MAASc;AAMT,wBAAId,KAAQ;AACVD,wBAASgB,KAAKf,GAAAA;oBAChB;AA9DR,2BAAAY;kBAAS,SAACI,KAAAA;AAAW,2BAAOlB,EAAAkB,GAAAA;kBAAM;gBAAC,GAAAlB,CAAAA;cA0D1B;AAAA,uBAAA,CAAA,CAAA;YAAA,GA1DsemB,KAAA,WAAAA;AAAA,qBAA/eP,IAAGC,KAAIO,IAAAA;YAAI;AAiDLhB,gBAAAA;AAEA,gBAAAiB;AAOG,oBA1DRA,OAAiB,SAAUC,KAAAA;AAAsB,qBAAOA,KAAG;AAAW,oBAAIA,IAAEZ;AAAoB,yBAAA,KAAYY,IAAEZ,KAAIW,KAAArB,CAAAA;AAAiC,oBAAA;AAAmB,sBAAIsB,IAAEC,KAAG;AAAoB,wBAAID,IAAEP;AAA0B,6BAAOO,IAAEC,IAAAA,IAAQJ,GAAgBN,KAAKO,IAAAA,IAAQE;;AAAwCA,sBAAAA,MAACR;kBAAW;AAAsCQ,oBAAAA,MAAIA,IAAET,KAAKO,IAAAA;gBAAiB,SAAQI,KAAAA;AAA2B,yBAAOxB,EAAMwB,GAAAA;gBAAuB;cAAO;YAAE,GAAGC,KAAKL,IAAAA,GAAKN,GAAAA;UAgEje;AAamC,iBA7EvCF,IAAGC,KAAIO,IAAAA;QAAE,SAACF,IAAAA;AAAW,iBAAOlB,EAAAkB,EAAAA;QAAM;MAAC,GAAhCO,KAAKL,IAAAA,GAAKpB,CAAAA;IA+C0C,CAAA;EA+BpD;AACH;;;ACpEA,IAAM0B,MAAM,CAAE,EAACC;AAaR,SAASC,IAIdC,KACAC,KAKAC,KAAAA;AAEA,SAAOC,IAAYH,GAAAA;AAEnB,WAASG,IACPC,KACAC,IACAC,GAAAA;AAEA,QAAMC,MAAmB,CAAA;AACzB,QAAIC;AACJ,QAAIC;AACJ,QAAIC;AACJ,QAAMC,IAAWT,QAAW,QAAXA,QAAAA,SAAAA,MAAeU;AAEhC,QAAMC,IAAUZ,IAASG,KAAMC,IAAOC,CAAAA;AACtC,QAAIF,IAAKO,CAAAA,GAAW;AAClBD,MAAAA,KAAAA;AAGA,aAAA,EAASA,KAAaN,IAAKO,CAAAA,EAAUG,QAAQ;AAE3CN,QAAAA,KAASL,IAAYC,IAAKO,CAAAA,EAAUD,EAAAA,GAAaA,IAAYG,CAAAA;AAE7D,YAAIL,IAAQ;AACVD,UAAAA,IAASQ,KAAKP,EAAAA;QAChB;MACF;IACF;AAIA,QAAMQ,MAAO,CAAE;AAEf,SAAKP,KAAOI,GAAS;AAEnB,UAAIhB,IAAIoB,KAAKJ,GAASJ,CAAAA,GAAM;AAC1BO,QAAAA,IAAKP,CAAAA,IAAOA,MAAQE,IAAWJ,MAAWM,EAAQJ,CAAAA;MACpD;IACF;AAEA,WAAOO;EACT;AACF;;;ACtCA,SAASE,IAIPC,KACAC,KACAC,KACAC,KACAC,GAAAA;AAEM,MADNC,KAAKC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AAER,MAAIG;AACJ,MAAMC,IAAWR,QAAW,QAAXA,QAAAA,SAAAA,MAAeS;AAChCV,EAAAA,IAAaD,KAAMG,KAAOC,GAAQC,EAAAA;AAElC,MAAIL,IAAKU,CAAAA,GAAW;AAClBD,IAAAA,MAAAA;AACAJ,IAAAA;AAEA,WAAA,EAASI,MAAaT,IAAKU,CAAAA,EAAUH,QAAQ;AAE3CR,MAAAA,IACEC,IAAKU,CAAAA,EAAUD,GAAAA,GACfR,KACAC,KACAO,KACAT,KACAK,EAAAA;IAEJ;EACF;AACF;AAgBO,SAASO,IAIdC,KACAZ,KACAC,KAAAA;AAEAH,EAAAA,IAAYc,KAAMZ,KAAcC,GAAAA;AAClC;;;AC5EO,IAAMY,MAAc,SAAdA,IACXC,KACAC,KAAAA;AAEA,MAAMC,MAAAA,OAAmBF,QAAY,aAAaA,IAAAA,IAAYA;AAC9D,SAAOC,MACHC,IAAUC,QAAQ,QAAQ,EAAA,IAAM,MAAMF,IAAYE,QAAQ,QAAQ,EAAA,IAClED;AACN;;;ACPO,IAAME,KAAiB,SAAjBA,GAAkBC,KAAcC,KAAAA;AAC3C,MAAMC,MAASC,GACbF,QAAQG,GAAAA,IAAyBC,OAAOC,SAASC,OAAO,GAAA;AAE1D,SAAOC,OAAOC,UAAUC,eAAeC,KAAKT,KAAQF,GAAAA;AACtD;;;ICLaY,MAAgB,SAAhBA,IAAiBC,KAAAA;AAI5B,SAAO,8BAA8BC,KAAKD,GAAAA;AAC5C;;;ACJO,IAAME,MAAe,SAAfA,IAAgBC,KAAoBC,KAAAA;AAC/C,MAAMC,MAAYC,GAChBF,QAAQG,GAAAA,IAAyBC,OAAOC,SAASC,OAAO,GAAA;AAE1D,MAAMC,MAASL,GAASH,GAAAA;AACxB,SACEQ,IAAOC,aAAaP,IAAUO,YAAYD,IAAOE,SAASR,IAAUQ;AAExE;;;AChBA,IAAMC,MAAe,SAAfA,IAAgBC,KAAAA;AAEpB,MAAIC,EAAQD,GAAAA,GAAQ;AAClB,QAAME,KAAsB,CAAA;AAC5B,aAASC,IAAI,GAAGA,IAAIH,IAAMI,QAAQD,KAAK;AACrC,UAAA,CAAKE,GAASL,IAAMG,CAAAA,CAAAA,GAAK;AACvBD,QAAAA,GAASI,KAAKC,OAAOP,IAAMG,CAAAA,CAAAA,CAAAA;AAC3B;MACF;AACAD,MAAAA,GAASI,KAAKP,IAAaC,IAAMG,CAAAA,CAAAA,CAAAA;IACnC;AAEA,WAAOD;EACT;AAGA,WAAWM,OAAOR,KAAO;AACvB,QAAIS,OAAOC,UAAUC,eAAeC,KAAKZ,KAAOQ,GAAAA,GAAM;AACpD,UAAMK,IAAMb,IAAMQ,GAAAA;AAClB,UAAIM,GAAYD,CAAAA,KAAQE,GAAOF,CAAAA,GAAM;AAEnCb,QAAAA,IAAMQ,GAAAA,IAAOQ;AACb;MACF;AACA,UAAA,CAAKX,GAASQ,CAAAA,GAAM;AAClBb,QAAAA,IAAMQ,GAAAA,IAAOD,OAAOM,CAAAA;AACpB;MACF;AACAb,MAAAA,IAAMQ,GAAAA,IAAOT,IAAac,CAAAA;IAC5B;EACF;AACA,SAAOb;AACT;AAAA,IA4CaiB,KAAc,SAAdA,IAAeC,KAAAA;AAC1B,MAAA,CAAKb,GAASa,GAAAA,GAAW;AACvB,WAAOA;EACT;AACA,MAAMC,KAASpB,IAAYqB,EAAMF,CAAAA,GAAAA,GAAAA,CAAAA;AACjC,SAAOG,GAAmBF,IAAQ,SAACN,KAAAA;AAAG,WAAKC,GAAYD,GAAAA;EAAAA,CAAAA;AACzD;;;ACnFA,SAASS,IAAOC,KAAAA;AACd,SAAOC,mBAAmBD,GAAAA,EACvBE,QAAQ,QAAQ,GAAA,EAChBA,QAAQ,SAAS,GAAA,EACjBA,QAAQ,QAAQ,GAAA,EAChBA,QAAQ,SAAS,GAAA,EACjBA,QAAQ,QAAQ,GAAA,EAChBA,QAAQ,SAAS,GAAA,EACjBA,QAAQ,SAAS,GAAA;AACtB;AAAA,IA0BaC,MAAkB,SAAlBA,IACXC,KAAAA;AAEW,MADXC,KAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAGP;AAEV,MAAMU,IAAkB,CAAA;AACxBC,EAAAA,IAAQN,KAAQ,SAASO,IAAUX,KAAKY,KAAAA;AACtC,QAAIZ,QAAQ,QAAA,OAAeA,QAAQ,aAAa;AAC9C;IACF;AACA,QAAA,CAAKa,EAAQb,GAAAA,GAAM;AACjBA,MAAAA,MAAM,CAACA,GAAAA;IACT;AAEAU,IAAAA,IAAQV,KAAK,SAASc,IAAWC,KAAAA;AAC/B,UAAIC,GAAOD,GAAAA,GAAI;AACbA,QAAAA,MAAIA,IAAEE,YAAAA;MACR,WAAWC,GAASH,GAAAA,GAAI;AACtBA,QAAAA,MAAII,KAAKC,UAAUL,GAAAA;MACrB;AACAN,QAAMY,KAAKhB,GAAQO,GAAAA,IAAO,MAAMP,GAAQU,GAAAA,CAAAA;IAC1C,CAAA;EACF,CAAA;AAEA,SAAON,EAAMa,KAAK,GAAA;AACpB;;;ACnEA,IAAMC,MAAa;AAaZ,IAAMC,MAAoB,SAApBA,IAAqBC,KAAaC,KAAAA;AAC7CD,EAAAA,MAAMA,QAAQE,GAAAA,IAAyBC,OAAOC,SAASC,OAAO;AAC9D,MAAMC,MAAgBC,GAAeP,GAAAA;AACrC,MAAMQ,KAAcV,IAAWW,KAAKT,GAAAA;AAAAA,SAC7BM,IAAcL,GAAAA;AACrB,MAAMS,MAAWF,KAAcR,IAAIW,QAAQb,KAAY,EAAA,IAAME,KAAKY,MAChE,GAAA,EACA,CAAA;AACF,MAAMC,IAAWC,GAAcR,GAAAA;AAC/B,MAAMS,IAAAA,CAAUF,IAAQG,GAAAA,OACjBN,EAAAA,IAAO,GAAAM,OACPN,IAAAA,GAAAA,EAAOM,OAAIF,GAAcR,GAAAA,CAAAA;AAChC,SAAA,GAAAU,OAAUD,CAAAA,EAAMC,OAAGR,KAAcA,GAAY,CAAA,IAAK,EAAA;AACpD;;;ICdaS,MAAO,SAAPA,MAAAA;AACX,MAAMC,MAAY,CAChB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GAAA;AAEF,MAAMD,MAAiB,CAAA;AACvB,WAASE,MAAI,GAAGA,MAAI,IAAIA,OAAK;AAC3B,QAAIA,QAAM,KAAKA,QAAM,MAAMA,QAAM,MAAMA,QAAM,IAAI;AAC/CF,MAAAA,IAAKE,GAAAA,IAAK;IACZ,OAAO;AACLF,MAAAA,IAAKE,GAAAA,IAAKD,IAAUE,KAAKC,KAAKD,KAAKE,OAAAA,IAAWJ,IAAUK,SAAS,CAAA,CAAA;IACnE;EACF;AACA,SAAON,IAAKO,KAAK,EAAA;AACnB;",
  "names": ["arrayPad", "array", "length", "chars", "push", "arrayChunk", "arr", "size", "arrRange", "arrayPad", "Math", "ceil", "length", "map", "_", "i", "slice", "arrayFlatten", "arr", "depth", "arguments", "length", "undefined", "Array", "isArray", "reduce", "acc", "val", "concat", "slice", "arrayFlattenDeep", "arr", "arrayFlatten", "Infinity", "arrayGroupBy", "array", "callback", "reduce", "result", "item", "key", "push", "arrayPadLength", "array", "length", "value", "_isArray", "TypeError", "method", "total", "Math", "abs", "arrayUnique", "arr", "byKey", "undefined", "Array", "from", "Set", "_toConsumableArray", "Map", "map", "item", "values", "bind", "fn", "_len", "arguments", "length", "args", "Array", "_key", "context", "funcArgs", "slice", "wrap", "_len2", "wrapArgs", "_key2", "apply", "concat", "classNames", "classes", "i", "arguments", "length", "arg", "undefined", "push", "Array", "isArray", "inner", "apply", "_toConsumableArray", "_typeof", "toString", "Object", "prototype", "key", "hasOwnProperty", "call", "join", "cookieRead", "name", "_isStandardBrowserEnv", "match", "RegExp", "exec", "document", "cookie", "decodeURIComponent", "cookieWrite", "name", "value", "expires", "path", "domain", "secure", "arguments", "length", "undefined", "_isStandardBrowserEnv", "cookie", "encodeURIComponent", "_isNumber", "push", "Date", "toUTCString", "_isString", "concat", "document", "join", "cookieRemove", "name", "cookieWrite", "Date", "now", "timeRemaining", "currTime", "format", "arguments", "length", "undefined", "prefix", "orginalDate", "Date", "originalDataTick", "getTime", "originalFormatedDate", "dateFormat", "newDate", "newFormatedDate", "newChars", "split", "oldChars", "diff", "i", "substr", "debounce", "func", "waitMilliseconds", "arguments", "length", "undefined", "options", "isImmediate", "timeoutId", "_this", "this", "_len", "args", "Array", "_key", "shouldCallNow", "clearTimeout", "setTimeout", "apply", "getEnvName", "key", "arguments", "length", "undefined", "getQueryString", "getEnvConfig", "source", "path", "envName", "env", "getEnvName", "configNode", "get", "undefined", "_isObject", "_isRegexp", "concat", "forEach", "obj", "fn", "_typeof", "_isArray", "i", "l", "length", "call", "key", "Object", "prototype", "hasOwnProperty", "getCtx", "source", "path", "defaultValue", "test", "get", "split", "slice", "join", "parse", "json", "result", "_isString", "JSON", "tryParseValue", "itemValue", "_isString", "isNaN", "parse", "_unused", "deepParse", "jsonStr", "result", "arguments", "length", "undefined", "outerJson", "Object", "keys", "forEach", "key", "next", "_isObject", "sort", "old", "options", "sortOptions", "ignoreCase", "reverse", "depth", "Infinity", "level", "processing", "_typeof", "copy", "Array", "isArray", "keys", "Object", "left", "right", "toLowerCase", "localeCompare", "forEach", "key", "subSortOptions", "assign", "stringify", "obj", "pretty", "arguments", "length", "undefined", "JSON", "isObject", "item", "_typeof", "Array", "isArray", "isClassInstance", "constructor", "name", "simpleDeepClone", "input", "output", "i", "l", "length", "hasOwnProperty", "needMerge", "source", "mergeUndefined", "mergeOptions", "target", "arguments", "length", "undefined", "depth", "simpleDeepClone", "isObject", "key", "Object", "assign", "_defineProperty", "isClassInstance", "digitLength", "num", "eSplit", "toString", "split", "len", "length", "checkBoundary", "num", "boundaryCheckingState", "Number", "MAX_SAFE_INTEGER", "MIN_SAFE_INTEGER", "console", "warn", "concat", "strip", "num", "precision", "arguments", "length", "undefined", "parseFloat", "Number", "toPrecision", "float2Fixed", "num", "toString", "indexOf", "Number", "replace", "dLen", "digitLength", "strip", "Math", "pow", "times", "num1", "num2", "_len", "arguments", "length", "others", "Array", "_key", "apply", "concat", "_toConsumableArray", "slice", "num1Changed", "float2Fixed", "num2Changed", "baseNum", "digitLength", "leftValue", "checkBoundary", "Math", "pow", "divide", "num1", "num2", "_len", "arguments", "length", "others", "Array", "_key", "apply", "concat", "_toConsumableArray", "slice", "num1Changed", "float2Fixed", "num2Changed", "checkBoundary", "times", "strip", "Math", "pow", "digitLength", "minus", "num1", "num2", "_len", "arguments", "length", "others", "Array", "_key", "apply", "concat", "_toConsumableArray", "slice", "baseNum", "Math", "pow", "max", "digitLength", "times", "plus", "num1", "num2", "_len", "arguments", "length", "others", "Array", "_key", "apply", "concat", "_toConsumableArray", "slice", "baseNum", "Math", "pow", "max", "digitLength", "times", "round", "num", "ratio", "base", "Math", "pow", "divide", "times", "removePropertiesBy", "obj", "removeFn", "Array", "isArray", "newValue", "i", "length", "_isPlainObject", "returnObj", "Object", "keys", "forEach", "key", "val", "processValue", "value", "ruleFn", "path", "arguments", "length", "undefined", "_isObject", "_isArray", "newValue", "i", "newPath", "concat", "push", "key", "Object", "prototype", "hasOwnProperty", "call", "val", "omitWhenIn", "rules", "includes", "omit", "target", "valueClone", "Array", "isArray", "_toConsumableArray", "_objectSpread", "result", "removePropertiesBy", "_isUndefined", "pick", "obj", "keys", "_isObject", "_keys", "Array", "isArray", "reduce", "acc", "key", "Object", "prototype", "hasOwnProperty", "call", "verRegex", "validate", "ver", "_isString", "arr", "replace", "verRegex", "split", "length", "every", "el", "test", "CompareResult", "validateWithError", "verA", "verB", "validate", "Error", "concat", "clean", "ver", "replace", "verRegex", "split", "map", "Number", "compare", "a", "b", "Equal", "GreaterThan", "LessThan", "compareVersion", "join", "i", "length", "result", "eq", "verA", "verB", "validateWithError", "compareVersion", "clean", "CompareResult", "Equal", "gt", "verA", "verB", "validateWithError", "compareVersion", "clean", "CompareResult", "GreaterThan", "gte", "verA", "verB", "validateWithError", "result", "compareVersion", "clean", "CompareResult", "GreaterThan", "Equal", "lt", "verA", "verB", "validateWithError", "compareVersion", "clean", "CompareResult", "LessThan", "lte", "verA", "verB", "validateWithError", "result", "compareVersion", "clean", "CompareResult", "LessThan", "Equal", "normalize", "ver", "validate", "verStr", "clean", "join", "matchResult", "match", "verRegex", "length", "tryVer", "replace", "arr", "split", "slice", "filter", "s", "newVer", "arrayPadLength", "loopObjectSet", "source", "_ref", "value", "_ref2", "_toArray", "head", "tail", "slice", "length", "_isObject", "_isArray", "Error", "concat", "set", "path", "split", "strCamelCase", "str", "split", "filter", "s", "map", "word", "index", "toLowerCase", "charAt", "toUpperCase", "slice", "join", "strCapitalize", "str", "charAt", "toUpperCase", "slice", "toLowerCase", "strCapitalizeAll", "str", "newStrs", "split", "map", "s", "strCapitalize", "join", "strClean", "str", "pattern", "arguments", "length", "undefined", "replace", "RegExp", "strTrim", "str", "replace", "strFormat", "str", "pattern", "arguments", "length", "undefined", "i", "matchRegex", "strTrim", "replace", "regexStr", "concat", "result", "RegExp", "match", "strFormatBankcard", "str", "strFormat", "strFormatIdcard", "str", "strFormat", "strFormatTel", "str", "strFormat", "strKebabCase", "str", "lowerCase", "arguments", "length", "undefined", "replace", "strTrim", "toLowerCase", "strRepeat", "str", "arguments", "length", "undefined", "count", "RangeError", "Infinity", "rpts", "i", "push", "join", "strPad", "str", "length", "arguments", "undefined", "value", "len", "Math", "abs", "repeatStr", "strRepeat", "parsePattern", "pattern", "arguments", "length", "undefined", "_pattern$split", "split", "replace", "_pattern$split2", "_slicedToArray", "start", "end", "before", "after", "mask", "strMask", "str", "strLen", "_parsePattern", "strPad", "substr", "strFormat", "strTransCamel", "str", "symbol", "newStr", "toLowerCase", "substr", "replace", "$1", "concat", "CHILDREN_KEY", "treeToMap", "tree", "childrenKey", "nodeMap", "Map", "childKey", "CHILDREN_KEY", "visit", "node", "set", "id", "forEach", "arrayToTree", "nodes", "currentState", "_topLevelNodes$0$pare", "topLevelNodes", "mappedArr", "currentStateMap", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "value", "_objectSpread", "_defineProperty", "err", "e", "f", "_iterator2", "map", "_step2", "hasOwnProperty", "_currentStateMap$get$", "_currentStateMap$get", "mappedElem", "expanded", "get", "parent", "parentIsRoot", "push", "rootId", "length", "undefined", "arrayToTree2", "nodes", "childrenKey", "parentIdFn", "parentIdResolver", "item", "_item$parent", "parent", "id", "grouped", "arrayGroupBy", "parentConsumedMap", "Set", "childKey", "CHILDREN_KEY", "childrenOf", "parentId", "clear", "has", "add", "map", "_objectSpread", "_defineProperty", "own", "hasOwnProperty", "filterTree", "tree", "test", "options", "arguments", "length", "undefined", "cascade", "preorder", "node", "index", "parent", "$args", "Promise", "$return", "$error", "_options$childrenKey", "level", "children", "result", "key", "childIndex", "childrenKey", "testResult", "next", "CHILDREN_KEY", "resolve", "then", "$await_4", "$If_1", "call", "$Loop_2", "$await_5", "push", "$boundEx", "$Loop_2_exit", "this", "$Loop_2_trampoline", "q", "pop", "_exception", "bind", "own", "hasOwnProperty", "filterTreeSync", "tree", "test", "options", "arguments", "length", "undefined", "cascade", "preorder", "node", "index", "parent", "_options$childrenKey", "level", "children", "result", "key", "childIndex", "childrenKey", "CHILDREN_KEY", "testResult", "push", "next", "call", "isSingleNode", "nodes", "Array", "isArray", "_typeof", "traverse", "predicate", "options", "_options$childrenKey", "result", "modifier", "parentId", "childrenKey", "CHILDREN_KEY", "i", "length", "newNodes", "id", "findNode", "path", "node", "push", "findParentNodes", "matchedNode", "item", "findAncestors", "TypeError", "searchResults", "treeToArray", "treeNodes", "childrenKey", "childKey", "CHILDREN_KEY", "list", "flattenTree", "tree", "includes", "push", "Array", "isArray", "forEach", "item", "map", "s", "_objectSpread", "_defineProperty", "own", "hasOwnProperty", "updateTree", "tree", "onUpdate", "childrenKey", "walkThrough", "node", "index", "parent", "Promise", "$return", "$error", "children", "result", "key", "childIndex", "childKey", "newNode", "next", "CHILDREN_KEY", "resolve", "then", "$await_4", "$If_1", "call", "$Loop_2", "length", "$await_5", "push", "$boundEx", "$Loop_2_exit", "this", "$Loop_2_trampoline", "q", "pop", "_exception", "bind", "own", "hasOwnProperty", "updateTreeSync", "tree", "onUpdate", "childrenKey", "walkThrough", "node", "index", "parent", "children", "result", "key", "childIndex", "childKey", "CHILDREN_KEY", "newNode", "length", "push", "next", "call", "walkThrough", "node", "onNodeWalked", "childrenKey", "index", "parent", "level", "arguments", "length", "undefined", "childIndex", "childKey", "CHILDREN_KEY", "walkThroughTree", "tree", "combineUrls", "baseURL", "relativeURL", "myBaseUrl", "replace", "hasQueryString", "name", "url", "params", "paramStrToJson", "_isStandardBrowserEnv", "window", "location", "href", "Object", "prototype", "hasOwnProperty", "call", "isAbsoluteUrl", "url", "test", "isSameOrigin", "requestURL", "url", "originURL", "uriParse", "_isStandardBrowserEnv", "window", "location", "href", "parsed", "protocol", "host", "processValue", "value", "_isArray", "newValue", "i", "length", "_isObject", "push", "String", "key", "Object", "prototype", "hasOwnProperty", "call", "val", "_isUndefined", "_isNull", "undefined", "paramsClean", "reqQuery", "result", "_objectSpread", "removePropertiesBy", "encode", "val", "encodeURIComponent", "replace", "paramsSerialize", "params", "encoder", "arguments", "length", "undefined", "parts", "forEach", "serialize", "key", "_isArray", "parseValue", "v", "_isDate", "toISOString", "_isObject", "JSON", "stringify", "push", "join", "HASH_REGEX", "removeQueryString", "url", "key", "_isStandardBrowserEnv", "window", "location", "href", "existedParams", "paramStrToJson", "existedHash", "exec", "rootUrl", "replace", "split", "querystr", "toQueryString", "newUrl", "concat", "uuid", "hashTable", "i", "Math", "ceil", "random", "length", "join"]
}
