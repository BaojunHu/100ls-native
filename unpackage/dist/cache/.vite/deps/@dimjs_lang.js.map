{
  "version": 3,
  "sources": ["../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-array-buffer.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-array-buffer-view.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-blob.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-boolean.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-deep-equal.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-empty.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-error.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-file.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-form-data.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-nan.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-promise.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-shallow-equal.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-url-search-params.ts"],
  "sourcesContent": ["import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as an `ArrayBuffer` object.\n *\n * @example\n * ``` ts\n * isArrayBuffer(new ArrayBuffer(2));\n * // => true\n * isArrayBuffer(new Array(2));\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is an array buffer, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-array-buffer\n */\nexport const isArrayBuffer = (value): value is ArrayBuffer => {\n  return type(value) === 'arrayBuffer';\n};\n", "/**\n * @description\n * Determine if a value is a view on an ArrayBuffer\n *\n * @example\n * ``` ts\n * isArrayBufferView(new DataView(new ArrayBuffer(2)));\n * // => true\n * ```\n *\n * @param {Object} value The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n *\n * @docsCategory preference/lang\n * @codeFilter is-array-buffer-view\n */\nexport function isArrayBufferView(value): value is ArrayBufferView {\n  let result;\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(value);\n  } else {\n    result = value && value.buffer && value.buffer instanceof ArrayBuffer;\n  }\n  return !!result;\n}\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as an `Blob` object.\n *\n * @example\n * ``` ts\n * isBlob(new Blob());\n * // => true\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a Blob object, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-blob\n */\nexport const isBlob = (value): value is Blob => {\n  return type(value) === 'blob';\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Determines whether the given value is a boolean.\n *\n * @example\n * ``` ts\n * isBoolean(false);\n * // => true\n * isBoolean(() => {});\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns True if the value is a boolean, false otherwise.\n *\n * @docsCategory preference/lang\n * @codeFilter is-boolean\n */\nexport const isBoolean = (value): value is boolean => {\n  return type(value) === 'boolean';\n};\n", "import { isArray } from './is-array.js';\n\n/**\n * @description\n * Deep comparison of two variables a and b, returning whether they are equal according to a recursive equality algorithm.\n *\n * @example\n * ``` ts\n * isDeepEqual({ a: [2, 3], b: [4] }, { a: [2, 3], b: [4] });\n * // => true\n * isDeepEqual([null, null, null], [null, null, null]);\n * // => true\n * isDeepEqual([{ a: 3 }, { b: 4 }], [{ a: '3' }, { b: '4' }]);\n * // => false\n * isDeepEqual(NaN, 'abc');\n * // => false\n * ```\n *\n * @param a The a to check.\n * @param b The b to check.\n * @returns Returns true if value is a equal, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-deep-equal\n */\nexport function isDeepEqual(a, b): boolean {\n  if (a === b) return true;\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const arrA = isArray(a);\n    const arrB = isArray(b);\n    let i;\n    let length;\n    let key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length !== b.length) {\n        return false;\n      }\n      for (i = length; i-- !== 0; ) {\n        if (!isDeepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (arrA !== arrB) {\n      return false;\n    }\n\n    const dateA = a instanceof Date;\n    const dateB = b instanceof Date;\n    if (dateA !== dateB) return false;\n    if (dateA && dateB) return a.getTime() === b.getTime();\n\n    const regexpA = a instanceof RegExp;\n    const regexpB = b instanceof RegExp;\n    if (regexpA !== regexpB) return false;\n    if (regexpA && regexpB) return a.toString() === b.toString();\n\n    const keys = Object.keys(a);\n    length = keys.length;\n\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0; ) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0; ) {\n      key = keys[i];\n      if (!isDeepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\n", "import { isNull } from './is-null.js';\nimport { isObject } from './is-object.js';\nimport { isUndefined } from './is-undefined.js';\n\n/**\n * @description\n * Checks if a `value` is `empty`.\n * `{}, null, undefined, [] ` is empty; `0, false` is not empty.\n *\n * @example\n * ``` ts\n * isEmpty(undefined);\n * // => true\n * isEmpty([]);\n * // => true\n * isEmpty({});\n * // => true\n * isEmpty(null);\n * // => true\n * isEmpty(0);\n * // => false\n * isEmpty(false);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a `empty`, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-empty\n */\nexport const isEmpty = (value): boolean => {\n  if (isUndefined(value)) {\n    return true;\n  }\n  if (isNull(value)) {\n    return true;\n  }\n  if (isObject(value)) {\n    return Object.keys(value).length <= 0;\n  }\n  return !String(value);\n};\n", "import { isObjectLike } from './is-object-like.js';\nimport { isPlainObject } from './is-plain-object.js';\nimport { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n * `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @example\n * ``` ts\n * isError(new Error());\n * // => true\n * isError(Error);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns `true` if `value` is an error object, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-error\n */\nexport const isError = (value): value is Error => {\n  if (!isObjectLike(value)) {\n    return false;\n  }\n  return (\n    type(value) === 'error' ||\n    type(value) === 'domError' ||\n    (typeof value.message == 'string' &&\n      typeof value.name == 'string' &&\n      !isPlainObject(value))\n  );\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is an `File`\n *\n * @example\n * ``` ts\n * const file = new File(['content'], 'filename.txt', { type: 'text/plain' });\n * isFile(file);\n * // => true\n * isFile('filename.txt');\n * // => false\n * ```\n *\n * @param value value The value to check.\n * @returns Returns `true` if `value` is an File object, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-file\n */\nexport const isFile = (value): value is File => {\n  return type(value) === 'file';\n};\n", "/**\n * @description\n * Checks if `value` is an `FormData`\n *\n * @example\n * ``` ts\n * isFormData(new FormData());\n * // => true\n * isFormData('form');\n * // => false\n * ```\n *\n * @warning\n * Note `miniprogram` don't support `Blob`, upload please use `wx.uploadFile()`\n *\n * @param value The value to check.\n * @returns Returns `true` if `value` is an FormData object, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-form-data\n */\nexport const isFormData = (value): value is FormData => {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n};\n", "import { isNumber } from './is-number.js';\n\n/**\n * @description\n * Checks if `value` is `NaN`.\n *\n * @example\n * ``` ts\n * isNaN(NaN);\n * // => true\n * isNaN(new Number(NaN));\n * // => true\n * isNaN(undefined);\n * // => false\n * isNaN('1111');\n * // => false\n * ```\n *\n * @note\n * This method is based on Number.isNaN and is not the same as global isNaN which returns true for undefined and other non-number values.\n *\n *\n * @param value The value to check.\n * @returns Returns `true` if value is `NaN`, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-nan\n */\nexport const isNaN = (value): value is File => {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n};\n", "/**\n * @description\n * Checks if `value` is a `Promise`\n *\n * @example\n * ``` ts\n * async function testAsync() {\n *    await Promise.resolve(1);\n * }\n *\n * function test() {\n *    return 1;\n * }\n * isPromise(testAsync());\n * // => true\n * isPromise(test());\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a `Promise`, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-promise\n */\nexport const isPromise = <T>(value): value is Promise<T> => {\n  if (value !== null && typeof value === 'object') {\n    return value && typeof value.then === 'function';\n  }\n  return false;\n};\n", "/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n *\n * @param x - The first value to compare.\n * @param y - The second value to compare.\n *\n * @docsCategory preference/lang\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * @description\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n *\n * @example\n * ``` ts\n * isShallowEqual([1, 2, 3], [1, 2, 3]);\n * // => true\n * isShallowEqual({ a: 5, b: {} }, { a: 5, b: {} });\n * // => false\n * ```\n *\n * @param objA - The first object to compare.\n * @param objB - The second object to compare.\n * @returns Returns true when the values of all keys are strictly equal.\n *\n * @docsCategory preference/lang\n * @codeFilter is-shallow-equal\n *\n */\nexport function isShallowEqual(objA, objB): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "/**\n * @description\n * Determine if a value is a URLSearchParams object\n *\n * @example\n * ``` ts\n * isUrlSearchParams(new URLSearchParams());\n * // => true\n * isUrlSearchParams('foo=1&bar=2');\n * // => false\n * ```\n *\n * @param  value The value to test\n * @returns True if value is a URLSearchParams object, otherwise false\n *\n * @docsCategory preference/lang\n * @codeFilter is-url-search-params\n */\nexport function isUrlSearchParams(value): value is URLSearchParams {\n  return (\n    typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams\n  );\n}\n"],
  "mappings": "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",
  "names": ["isArrayBuffer", "value", "type", "isArrayBufferView", "value", "result", "ArrayBuffer", "isView", "buffer", "isBlob", "value", "type", "isBoolean", "value", "type", "isDeepEqual", "a", "b", "_typeof", "arrA", "isArray", "arrB", "i", "length", "key", "dateA", "Date", "dateB", "getTime", "regexpA", "RegExp", "regexpB", "toString", "keys", "Object", "prototype", "hasOwnProperty", "call", "isEmpty", "value", "isUndefined", "isNull", "isObject", "Object", "keys", "length", "String", "isError", "value", "isObjectLike", "type", "message", "name", "isPlainObject", "isFile", "value", "type", "isFormData", "value", "FormData", "isNaN", "value", "isNumber", "isPromise", "value", "_typeof", "then", "is", "x", "y", "isShallowEqual", "objA", "objB", "_typeof", "keysA", "Object", "keys", "keysB", "length", "i", "prototype", "hasOwnProperty", "call", "isUrlSearchParams", "value", "URLSearchParams"]
}
