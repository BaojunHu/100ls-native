{
  "version": 3,
  "sources": ["../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-date.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-object.ts", "../../../../../node_modules/@dimjs/lang/dist/@dimjs/lang/src/is-regexp.ts"],
  "sourcesContent": ["import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is classified as a `Date` object.\n *\n * @example\n * ``` ts\n * isDate(new Date());\n * // => true\n * isDate(Date.now());\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a date object, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-date\n */\nexport const isDate = (value): value is Date => {\n  return type(value) === 'date';\n};\n", "import { isFunction } from './is-function.js';\n\n/**\n * @description\n * Checks if `value` is the language type of Object. (e.g. arrays, objects, regexes, new Number(0), and new String(''))\n *\n * @example\n * ``` ts\n * isObject(() => {});\n * // => true\n * isObject(new A());\n * // => true\n * isObject({});\n * // => true\n * isObject(null);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @param failfn The value indicate if function is Object?, default false\n * @returns Returns true if value is an object, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-object\n */\nexport const isObject = (value, failfn = false): boolean => {\n  const t = typeof value;\n  return (\n    (value &&\n      (t === 'object' ||\n        (!failfn && (t === 'function' || isFunction(value))))) ||\n    false\n  );\n};\n", "import { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is a `RegExp`\n *\n * @example\n * ``` ts\n * isRegexp(/test/);\n * // => true\n * isRegexp('test');\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns true if value is a `RegExp`, else false.\n *\n * @docsCategory preference/lang\n * @codeFilter is-regexp\n */\nexport const isRegexp = (value): value is RegExp => {\n  return type(value) === 'regexp';\n};\n"],
  "mappings": ";;;;;;;IAoBaA,KAAS,SAATA,GAAUC,IAAAA;AACrB,SAAOC,GAAKD,EAAAA,MAAW;AACzB;;;ICGaE,IAAW,SAAXA,GAAYC,IAAAA;AAAmC,MAA5BC,KAAMC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG;AACvC,MAAMG,IAACC,EAAUN,EAAAA;AACjB,SACGA,OACEK,MAAM,YAAA,CACHJ,OAAWI,MAAM,cAAcE,EAAWP,EAAAA,OAChD;AAEJ;;;ICbaQ,IAAW,SAAXA,GAAYC,GAAAA;AACvB,SAAOC,GAAKD,CAAAA,MAAW;AACzB;",
  "names": ["isDate", "value", "type", "isObject", "value", "failfn", "arguments", "length", "undefined", "t", "_typeof", "isFunction", "isRegexp", "value", "type"]
}
