import type { UseInfiniteData, UseInfiniteScrollOptions, UseInfiniteService } from "./types";
declare const useInfiniteScroll: <TData extends UseInfiniteData>(service: UseInfiniteService<TData>, options?: UseInfiniteScrollOptions<TData>) => {
    data: Readonly<import("vue").Ref<TData | undefined, TData | undefined>>;
    loading: Readonly<import("vue").Ref<boolean, boolean>>;
    loadingMore: Readonly<import("vue").Ref<boolean, boolean>>;
    noMore: import("vue").ComputedRef<boolean>;
    loadMore: () => void;
    loadMoreAsync: () => Promise<TData> | undefined;
    reload: () => void;
    reloadAsync: () => Promise<TData>;
    mutate: (mutateData: any) => void;
    scrollMethod: () => void;
    cancel: () => void;
};
export default useInfiniteScroll;
