import { ref, createApp, defineComponent, watchEffect, watch } from "vue";
import useRequest from "../useRequest";
function renderHook(renderFC) {
  const app = createApp(
    defineComponent({
      setup() {
        renderFC();
        return () => {
        };
      }
    })
  );
  app.mount(document.createElement("div"));
}
const DEFAULT_KEY = "VUE_HOOKS_PLUS_USE_REQUEST_DEFAULT_KEY";
function keyIsStringOrNumber(value) {
  return typeof value === "string" || typeof value === "number";
}
function useFetchs(service, options, self) {
  const fetchKeyPersist = ref(self == null ? void 0 : self.fetchKey);
  const fetchs = ref({});
  const newFetchs = ref({});
  const setFetchs = (fetchs_) => {
    newFetchs.value = fetchs_;
  };
  const fetchRun = (...args) => {
    var _a, _b;
    const newstFetchKey = ref();
    const cacheKey = (_b = (_a = fetchKeyPersist.value) == null ? void 0 : _a.call(fetchKeyPersist, ...args)) != null ? _b : DEFAULT_KEY;
    newstFetchKey.value = cacheKey;
    renderHook(() => {
      const { data, run, params, loading } = useRequest(service, {
        ...options,
        cacheKey,
        manual: true
      });
      watchEffect(() => {
        fetchs.value[cacheKey] = {
          key: cacheKey,
          data: data == null ? void 0 : data.value,
          params: params.value,
          loading: loading.value
        };
        setFetchs(fetchs.value);
      });
      run(...args);
      watch([data, params, loading, newstFetchKey], (curr) => {
        const [
          newData = void 0,
          newParams = void 0,
          newLoading = false,
          key = DEFAULT_KEY
        ] = curr;
        const fetchKey = keyIsStringOrNumber(key) ? key : DEFAULT_KEY;
        fetchs.value[fetchKey] = {
          key: fetchKey,
          data: newData,
          params: newParams,
          loading: newLoading
        };
        setFetchs(fetchs.value);
      });
    });
  };
  return {
    fetchs: newFetchs,
    fetchRun
  };
}
export {
  useFetchs as default
};
