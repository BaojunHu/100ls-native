{"version":3,"file":"type-BjxMfswv.js","sources":["@dimjs/lang/src/type.ts"],"sourcesContent":["/**\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 2\n */\ntype ValueOf<T> = T[keyof T];\n\n/**\n * @description\n * An object that maps JavaScript types to their corresponding string representations.\n *\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 1\n */\nconst TYPES = {\n  boolean: 'boolean',\n  undefined: 'undefined',\n  number: 'number',\n  string: 'string',\n  '[object Object]': 'object',\n  '[object Function]': 'function',\n  '[object RegExp]': 'regexp',\n  '[object Array]': 'array',\n  '[object Date]': 'date',\n  '[object Error]': 'error',\n  '[object Blob]': 'blob',\n  '[object File]': 'file',\n  '[object DOMException]': 'domError',\n  '[object ArrayBuffer]': 'arrayBuffer',\n} as const;\n\n/**\n * @description\n * Returns the type of the given value.\n *\n * @param value - The value to determine the type of.\n * @returns The type of the value.\n *\n * @docsCategory preference/lang\n * @docsPage types-type\n * @docsWeight 3\n */\nexport function type(value): ValueOf<typeof TYPES> {\n  return (\n    TYPES[typeof value] ||\n    TYPES[Object.prototype.toString.call(value)] ||\n    (value ? 'object' : 'null')\n  );\n}\n"],"names":["TYPES","boolean","undefined","number","string","type","value","_typeof","Object","prototype","toString","call"],"mappings":";4DAeA,IAAMA,EAAQ,CACZC,QAAS,UACTC,UAAW,YACXC,OAAQ,SACRC,OAAQ,SACR,kBAAmB,SACnB,oBAAqB,WACrB,kBAAmB,SACnB,iBAAkB,QAClB,gBAAiB,OACjB,iBAAkB,QAClB,gBAAiB,OACjB,gBAAiB,OACjB,wBAAyB,WACzB,uBAAwB,eAcnB,SAASC,EAAKC,GACnB,OACEN,EAAKO,EAAQD,KACbN,EAAMQ,OAAOC,UAAUC,SAASC,KAAKL,MACpCA,EAAQ,SAAW,OAExB"}