{"version":3,"file":"is-error.js","sources":["@dimjs/lang/src/is-error.ts"],"sourcesContent":["import { isObjectLike } from './is-object-like.js';\nimport { isPlainObject } from './is-plain-object.js';\nimport { type } from './type.js';\n\n/**\n * @description\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n * `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @example\n * ``` ts\n * isError(new Error());\n * // => true\n * isError(Error);\n * // => false\n * ```\n *\n * @param value The value to check.\n * @returns Returns `true` if `value` is an error object, else `false`.\n *\n * @docsCategory preference/lang\n * @codeFilter is-error\n */\nexport const isError = (value): value is Error => {\n  if (!isObjectLike(value)) {\n    return false;\n  }\n  return (\n    type(value) === 'error' ||\n    type(value) === 'domError' ||\n    (typeof value.message == 'string' &&\n      typeof value.name == 'string' &&\n      !isPlainObject(value))\n  );\n};\n"],"names":["isError","value","isObjectLike","type","message","name","isPlainObject"],"mappings":";mMAuBaA,EAAU,SAAVA,EAAWC,GACtB,IAAKC,EAAaD,GAAQ,CACxB,OAAO,KACT,CACA,OACEE,EAAKF,KAAW,SAChBE,EAAKF,KAAW,mBACRA,EAAMG,SAAW,iBAChBH,EAAMI,MAAQ,WACpBC,EAAcL,EAErB"}