/**
 * @description
 * Convert string to camel case format
 *
 * @example
 * ``` ts
 * strCamelCase('--foo-bar--');
 * // => fooBar
 * strCamelCase('__FOO_ BAR__');
 * // => fooBar
 * strCamelCase('__FOO_- BAR__');
 * // => fooBar
 * ```
 *
 * @param str The string to be converted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-camel-case
 */
export declare const strCamelCase: (str: string) => string;
/**
 * @description
 * Converts strings of first character to uppercase
 *
 * @example
 * ``` ts
 * strCapitalize('FRED');
 * // => Fred
 * strCapitalize('');
 * // => ''
 * ```
 *
 * @param str The string to be converted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-capitalize
 */
export declare const strCapitalize: (str: string) => string;
/**
 * @description
 * Converts strings of first character to uppercase
 *
 * @example
 * ``` ts
 * strCapitalizeAll('Standard tax united states');
 * // => Standard Tax United States
 * strCapitalizeAll('Standard  tax    united  states');
 * // => Standard Tax United States
 * ```
 *
 * @param str The string to be converted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-capitalize-all
 */
export declare const strCapitalizeAll: (str: string) => string;
/**
 * @description
 * Clears string Spaces, or customizes cleared regular expressions
 * the default action to `Removes the space in the middle of the entire string`
 *
 * @example
 * ``` ts
 * strClean('F R ED');
 * // => FRED
 * strClean(' F R ED ');
 * // => FRED
 * ```
 *
 * @param str The input string.
 * @param pattern The pattern to be removed. Defaults to '\\s*' (any whitespace).
 * @returns The cleaned string.
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-clean
 */
export declare const strClean: (str: string, pattern?: string) => string;
/**
 * @description
 * Formats a string.
 *
 * @param str The string to format.
 * @param pattern The formatting pattern. Default is '### #### ####'.
 * @returns The formatted string.
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-format
 */
export declare const strFormat: (str: string, pattern?: string) => string;
/**
 * @description
 * Bank card number 16-19 digits, format to `#### #### #### #### ####`
 *
 * @example
 * ``` ts
 * strFormatBankcard('62226002600010724');
 * // => 6222 6002 6000 1072 4
 * strFormatBankcard('6222600260001072');
 * // => 6222 6002 6000 1072
 * strFormatBankcard('6222600260001072444');
 * // => 6222 6002 6000 1072 444
 * ```
 *
 * @param str String to be formatted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-format-bankcard
 */
export declare const strFormatBankcard: (str: string) => string;
/**
 * @description
 * The ID number is between 16 and 18 digits, format to `###### ######## ####`
 *
 * @example
 * ``` ts
 * strFormatIdcard('500102198692876443');
 * // => 500102 19869287 6443
 * strFormatIdcard('50010219869287643');
 * // => 500102 19869287 643
 * ```
 *
 * @param str String to be formatted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-format-idcard
 */
export declare const strFormatIdcard: (str: string) => string;
/**
 * @description
 * Phone number formatting with `### #### ####`
 *
 * @example
 * ``` ts
 * strFormatTel('13764826699');
 * // => 137 6482 6699
 * strFormatTel('13764826699883');
 * // => 137 6482 6699
 * strFormatTel('13764826');
 * // => 137 6482 6
 * ```
 *
 * @param str String to be formatted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-format-tel
 */
export declare const strFormatTel: (str: string) => string;
/**
 * @description
 * Convert string to camel case format
 *
 * @example
 * ``` ts
 * strKebabCase('Foo Bar', true);
 * // => foo-bar
 * strKebabCase('Foo bar', true);
 * // => foo-bar
 * strKebabCase('Foo bar', false);
 * // => Foo-bar
 * ```
 *
 * @param str The string to be converted
 * @param lowerCase If need to convert to lower case
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-kebab-case
 */
export declare const strKebabCase: (str: string, lowerCase?: boolean) => string;
/**
 * @description
 * Generate a string with mask symbols
 *
 * @example
 * ``` ts
 * strMask('13764826699');
 * // => 137****6699
 * strMask('13764826699', '###----####');
 * // => 137----6699
 * strMask('tyc15129@qq.com', '###----###');
 * // => tyc----com
 * ```
 *
 * @param str string to be formatted
 * @param pattern default is `###****####`
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-mask
 * @docsPage str-mask
 * @docsWeight 1
 */
export declare const strMask: (str?: string, pattern?: string) => string;
/**
 * @description
 * Fill the string left or right
 *
 * @example
 * ``` ts
 * strPad('12', 10, '0');
 * // => 1200000000
 * strPad('12', -5, '0');
 * // => 00012
 * strPad('12', -5, '*');
 * // => ***12
 * ```
 *
 * @param str String to be processed
 * @param length Total length of string will be filled to e.g. `-5` | `5` symbol `-` indicates directory `left`
 * @param value The default string to populate
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-pad
 */
export declare const strPad: (str: string, length?: number, value?: string) => string;
/**
 * @description
 * Repeats a string a specified number of times.
 * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
 *
 * @example
 * ``` ts
 * strRepeat('0', 3);
 * // => '000'
 * strRepeat(' 12 3', 1);
 * // => ' 12 3'
 * strRepeat('123', 2);
 * // => '123123'
 * ```
 *
 * @param str - The string to repeat.
 * @param count - The number of times to repeat the string.
 * @returns The repeated string.
 * @throws {RangeError} If the count is negative, equal to Infinity, or would result in a string that exceeds the maximum size.
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-repeat
 */
export declare const strRepeat: (str?: string, count?: number) => string;
/**
 * @description
 * Transforms a string from camel case to a specified symbol-separated case.
 *
 * @param str - The input string in camel case.
 * @param symbol - The symbol used to separate the words in the output string. It can be either '-' or '_'.
 * @returns The transformed string in the specified symbol-separated case.
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-trans-camel
 */
export declare function strTransCamel(str: string, symbol: "-" | "_"): string;
/**
 * @description
 * Clears the Spaces before and after the string
 *
 * @example
 * ``` ts
 * strTrim('  foo  ');
 * // => foo
 * strTrim('\tfoo\t');
 * // => foo
 * strTrim(' F R ED ');
 * // => F R ED
 * ```
 *
 * @param str The string to be converted
 *
 * @docsCategory preference/utils/string
 * @codeFilter str-trim
 */
export declare const strTrim: (str: string) => string;

export {};
