{"version":3,"file":"str-mask.js","sources":["@dimjs/utils/src/string/str-mask.ts"],"sourcesContent":["import { strFormat } from './str-format.js';\nimport { strPad } from './str-pad.js';\n\n/**\n * @description\n * Parses the given pattern and returns an object containing information about the pattern.\n *\n * @param pattern The pattern to parse. Defaults to '###****####'.\n * @returns An object with the following properties:\n *   - before: The length of the characters before the mask in the pattern.\n *   - after: The length of the characters after the mask in the pattern.\n *   - mask: The length of the mask in the pattern.\n *\n * @docsCategory preference/utils/string\n * @docsPage str-mask-parse\n * @docsWeight 2\n */\nconst parsePattern = (pattern = '###****####') => {\n  const [start, end] = pattern.split(pattern.replace(/#/g, ''));\n  return {\n    before: start.length,\n    after: end.length,\n    mask: pattern.length - (start.length + end.length),\n  };\n};\n\n/**\n * @description\n * Generate a string with mask symbols\n *\n * @example\n * ``` ts\n * strMask('13764826699');\n * // => 137****6699\n * strMask('13764826699', '###----####');\n * // => 137----6699\n * strMask('tyc15129@qq.com', '###----###');\n * // => tyc----com\n * ```\n *\n * @param str string to be formatted\n * @param pattern default is `###****####`\n *\n * @docsCategory preference/utils/string\n * @codeFilter str-mask\n * @docsPage str-mask\n * @docsWeight 1\n */\nexport const strMask = (str = '', pattern = '###****####'): string => {\n  // Handle the original string, not enough Spaces are filled in the pattern template, and the excess is truncated to the length of ****\n  const strLen = str.length;\n  const { before, after, mask } = parsePattern(pattern);\n  if (strLen > before && strLen < before + after) {\n    str =\n      strPad(str.substr(0, before), before + mask, ' ') + str.substr(before);\n  } else if (strLen > before && strLen < pattern.length) {\n    str =\n      strPad(str.substr(0, before), before + mask, ' ') +\n      str.substr(strLen - after);\n  } else if (strLen > pattern.length) {\n    str =\n      str.substr(0, before) +\n      strPad('', mask, ' ') +\n      str.substr(strLen - after);\n  }\n  return strFormat(str, pattern);\n};\n"],"names":["parsePattern","pattern","arguments","length","undefined","_pattern$split","split","replace","_pattern$split2","_slicedToArray","start","end","before","after","mask","strMask","str","strLen","_parsePattern","strPad","substr","strFormat"],"mappings":";6LAiBA,IAAMA,EAAe,SAAfA,IAA4C,IAA5BC,EAAOC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,cAC9B,IAAAG,EAAqBJ,EAAQK,MAAML,EAAQM,QAAQ,KAAM,KAAIC,EAAAC,EAAAJ,EAAA,GAAtDK,EAAKF,EAAA,GAAEG,EAAGH,EAAA,GACjB,MAAO,CACLI,OAAQF,EAAMP,OACdU,MAAOF,EAAIR,OACXW,KAAMb,EAAQE,QAAUO,EAAMP,OAASQ,EAAIR,QAE/C,MAwBaY,EAAU,SAAVA,IAAyD,IAA9CC,EAAGd,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,GAAE,IAAED,EAAOC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,cAE1C,IAAMe,EAASD,EAAIb,OACnB,IAAAe,EAAgClB,EAAaC,GAArCW,EAAMM,EAANN,OAAQC,EAAKK,EAALL,MAAOC,EAAII,EAAJJ,KACvB,GAAIG,EAASL,GAAUK,EAASL,EAASC,EAAO,CAC9CG,EACEG,EAAOH,EAAII,OAAO,EAAGR,GAASA,EAASE,EAAM,KAAOE,EAAII,OAAOR,EAClE,MAAM,GAAIK,EAASL,GAAUK,EAAShB,EAAQE,OAAQ,CACrDa,EACEG,EAAOH,EAAII,OAAO,EAAGR,GAASA,EAASE,EAAM,KAC7CE,EAAII,OAAOH,EAASJ,EACxB,MAAO,GAAII,EAAShB,EAAQE,OAAQ,CAClCa,EACEA,EAAII,OAAO,EAAGR,GACdO,EAAO,GAAIL,EAAM,KACjBE,EAAII,OAAOH,EAASJ,EACxB,CACA,OAAOQ,EAAUL,EAAKf,EACxB"}