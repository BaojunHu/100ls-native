/**
 * @description
 * Reads the value of a cookie by its name.
 *
 * @example
 * ``` ts
 * cookieWrite('foo', 'abc');
 * cookieRead('foo');
 * // => abc
 * ```
 *
 * @param name - The name of the cookie.
 * @returns The value of the cookie, or null if the cookie does not exist.
 *
 * @docsCategory preference/utils/cookie
 * @codeFilter cookie
 */
export declare const cookieRead: (name: string) => string | null;
/**
 * @description
 * Removes a cookie by setting its value to an empty string and setting the expiration date to the past.
 *
 * @example
 * ``` ts
 * cookieWrite('foo', 'abc');
 * cookieRemove('foo');
 * cookieRead('foo');
 * // => null
 * ```
 *
 * @param name - The name of the cookie to remove.
 *
 * @docsCategory preference/utils/cookie
 * @codeFilter cookie
 */
export declare const cookieRemove: (name: string) => void;
/**
 * @description
 * Writes a cookie with the specified name, value, and optional parameters.
 *
 * @example
 * ``` ts
 * cookieWrite('foo', 'bar baz%');
 * document.cookie.indexOf('foo=bar%20baz%25') !== -1;
 * // => true
 * ```
 *
 * @param name - The name of the cookie.
 * @param value - The value of the cookie.
 * @param expires - The expiration date of the cookie (in milliseconds since Unix Epoch).
 * @param path - The path on the server where the cookie is valid.
 * @param domain - The domain where the cookie is valid.
 * @param secure - Indicates if the cookie should only be transmitted over secure HTTPS connections.
 *
 * @docsCategory preference/utils/cookie
 * @codeFilter cookie
 */
export declare const cookieWrite: (name: string, value: string, expires?: number, path?: string, domain?: string, secure?: boolean) => void;

export {};
