/**
 * @description
 * Determines if two versions are equal.
 *
 * @param verA - The first version.
 * @param verB - The second version.
 * @returns True if the versions are equal, false otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-eq
 * @codeFilter eq
 */
export declare const eq: (verA: string, verB: string) => boolean;
/**
 * @description
 * Determines if version `verA` is greater than version `verB`.
 *
 * @param verA - The first version to compare.
 * @param verB - The second version to compare.
 * @returns `true` if `verA` is greater than `verB`, `false` otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-gt
 * @codeFilter gt
 */
export declare const gt: (verA: string, verB: string) => boolean;
/**
 * @description
 * Determines if verA is greater than or equal to verB.
 *
 * @param verA - The first version to compare.
 * @param verB - The second version to compare.
 * @returns True if verA is greater than or equal to verB, false otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-gte
 * @codeFilter gte
 */
export declare const gte: (verA: string, verB: string) => boolean;
/**
 * @description
 * Determines if version `verA` is less than version `verB`.
 *
 * @param verA - The first version to compare.
 * @param verB - The second version to compare.
 * @returns `true` if `verA` is less than `verB`, `false` otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-lt
 * @codeFilter lt
 */
export declare const lt: (verA: string, verB: string) => boolean;
/**
 * @description
 * Determines if version A is less than or equal to version B.
 *
 * @param verA - The first version to compare.
 * @param verB - The second version to compare.
 * @returns True if version A is less than or equal to version B, false otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-lte
 * @codeFilter lte
 */
export declare const lte: (verA: string, verB: string) => boolean;
/**
 * @description
 *
 * Returns the formatted version string displayed on the client, with the version number major.min.patch always remaining three digits
 *
 * @param ver version string
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-normalize
 * @codeFilter normalize
 */
export declare const normalize: (ver: string) => string;
/**
 * @description
 * Validates a version string.
 *
 * @param ver - The version string to validate.
 * @returns True if the version string is valid, false otherwise.
 *
 * @docsCategory preference/utils/semver
 * @docsPage semver-validate
 * @codeFilter validate
 */
export declare const validate: (ver: string) => boolean;

export {};
