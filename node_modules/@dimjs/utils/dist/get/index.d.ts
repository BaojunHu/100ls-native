/**
 * @docsCategory preference/utils/pick
 * @docsPage types-get
 */
export type IsEmptyObject<T> = T extends null | undefined ? true : T extends {} ? keyof T extends never ? true : false : false;
/**
 * @docsCategory preference/utils/pick
 * @docsPage types-get
 */
export type Path<T extends Record<string, any> | null | undefined> = IsEmptyObject<T> extends true ? string : {
	[Key in keyof T & string]: T[Key] extends object ? `${Key}` | `${Key}.${Path<T[Key]>}` : `${Key}`;
}[keyof T & string];
/**
 * @description
 * Gets the value at path of object. TODO: typings.
 *
 * @example
 * ``` ts
 * get({ a: { b: false } }, 'a.b');
 * // => false
 * get(undefined, 'a.b', '1');
 * // => 1
 * ```
 *
 * @param source The object to query.
 * @param path The path of the property to get.
 * @param defaultValue The value returned for undefined resolved values.
 *
 * @docsCategory preference/utils/get
 * @codeFilter get
 */
export declare const get: <T extends Record<string, any> | null | undefined, K extends Path<T>>(source: T, path: K, defaultValue?: any) => any;

export {};
