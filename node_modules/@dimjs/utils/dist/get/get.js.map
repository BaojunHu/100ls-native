{"version":3,"file":"get.js","sources":["@dimjs/utils/src/get/get.ts"],"sourcesContent":["import { isNull, isUndefined } from '@dimjs/lang';\nimport { type Path } from './types.js';\n\n/**\n * @docsCategory preference/utils/get\n * @docsPage types-get\n */\nconst loopObjectRead = (source: object, [head, ...tail]: string[]) => {\n  source = source[head];\n  return tail.length && source ? loopObjectRead(source, tail) : source;\n};\n/**\n * @description\n * Gets the value at path of object. TODO: typings.\n *\n * @example\n * ``` ts\n * get({ a: { b: false } }, 'a.b');\n * // => false\n * get(undefined, 'a.b', '1');\n * // => 1\n * ```\n *\n * @param source The object to query.\n * @param path The path of the property to get.\n * @param defaultValue The value returned for undefined resolved values.\n *\n * @docsCategory preference/utils/get\n * @codeFilter get\n */\nexport const get = <\n  T extends Record<string, any> | null | undefined,\n  K extends Path<T>,\n>(\n  source: T,\n  path: K,\n  defaultValue?\n) => {\n  const result = loopObjectRead(source || {}, path.split('.'));\n  return isUndefined(result) || isNull(result) ? defaultValue : result;\n};\n"],"names":["loopObjectRead","source","_ref","_ref2","_toArray","head","tail","slice","length","get","path","defaultValue","result","split","_isUndefined","_isNull"],"mappings":";iLAOA,IAAMA,EAAiB,SAAjBA,EAAkBC,EAAcC,GAAgC,IAAAC,EAAAC,EAAAF,GAA7BG,EAAIF,EAAA,GAAKG,EAAIH,EAAAI,MAAA,GACpDN,EAASA,EAAOI,GAChB,OAAOC,EAAKE,QAAUP,EAASD,EAAeC,EAAQK,GAAQL,CAChE,EAoBO,IAAMQ,EAAM,SAANA,EAIXR,EACAS,EACAC,GAEA,IAAMC,EAASZ,EAAeC,GAAU,CAAE,EAAES,EAAKG,MAAM,MACvD,OAAOC,EAAYF,IAAWG,EAAOH,GAAUD,EAAeC,CAChE"}