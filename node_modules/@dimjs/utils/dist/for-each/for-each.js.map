{"version":3,"file":"for-each.js","sources":["@dimjs/utils/src/for-each/for-each.ts"],"sourcesContent":["import { isArray } from '@dimjs/lang';\n\n/**\n * @description\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * @example\n * ``` ts\n *   let sum = 0;\n *\n *    forEach([1, 2, 3, 4, 5], function (val) {\n *      sum += val;\n *    });\n *\n *    console.log(sum);\n * // => 15\n * ```\n *\n * - If `obj` is an Array callback will be called passing\n * - the value, index, and complete array for each item.\n *\n * - If 'obj' is an Object callback will be called passing\n * - the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @docsCategory preference/utils/for-each\n * @codeFilter for-each\n */\nexport function forEach(obj, fn: (value, key, source) => void) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (let i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n"],"names":["forEach","obj","fn","_typeof","_isArray","i","l","length","call","key","Object","prototype","hasOwnProperty"],"mappings":";oHA8BO,SAASA,EAAQC,EAAKC,GAE3B,GAAID,IAAQ,aAAeA,IAAQ,YAAa,CAC9C,MACF,CAGA,GAAIE,EAAOF,KAAQ,SAAU,CAC3BA,EAAM,CAACA,EACT,CAEA,GAAIG,EAAQH,GAAM,CAEhB,IAAK,IAAII,EAAI,EAAGC,EAAIL,EAAIM,OAAQF,EAAIC,EAAGD,IAAK,CAC1CH,EAAGM,KAAK,KAAMP,EAAII,GAAIA,EAAGJ,EAC3B,CACF,KAAO,CAEL,IAAK,IAAMQ,KAAOR,EAAK,CACrB,GAAIS,OAAOC,UAAUC,eAAeJ,KAAKP,EAAKQ,GAAM,CAClDP,EAAGM,KAAK,KAAMP,EAAIQ,GAAMA,EAAKR,EAC/B,CACF,CACF,CACF"}