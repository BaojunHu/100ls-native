{"version":3,"file":"walk-through-tree.js","sources":["@dimjs/utils/src/tree/walk-through-tree.ts"],"sourcesContent":["import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @docsCategory preference/utils/tree\n * @docsPage walk-through-tree\n * @docsWeight 3\n */\ntype OnNodeWalked<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n> = (\n  node: TreeNode<Node, Key>,\n  index?: number,\n  parent?: TreeNode<Node, Key>,\n  level?: number\n) => void;\n\n/**\n * @description\n * Walks through a tree structure and performs an action on each node.\n *\n * @template Node - The type of the tree node.\n * @template Key - The type of the property key used to access the children of a node.\n * @param node - The root node of the tree.\n * @param onNodeWalked - The callback function to be called for each node in the tree.\n * @param childrenKey - The property key used to access the children of a node. If not provided, it defaults to \"children\".\n * @param index - The index of the current node within its parent's children array.\n * @param parent - The parent node of the current node.\n * @param level - The level of the current node in the tree hierarchy.\n *\n * @docsCategory preference/utils/tree\n * @docsPage walk-through-tree\n * @docsWeight 2\n */\nfunction walkThrough<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  node: TreeNode<Node, Key>,\n  onNodeWalked: OnNodeWalked<Node, Key>,\n  childrenKey?: Key,\n  index?: number,\n  parent?: TreeNode<Node, Key>,\n  level = 0\n): void {\n  let childIndex: number;\n  const childKey = childrenKey ?? CHILDREN_KEY;\n  onNodeWalked(node, index, parent, level);\n\n  if (node[childKey]) {\n    childIndex = -1;\n    level++;\n    // Looks like a parent.\n    while (++childIndex < node[childKey].length) {\n      // Looks like a parent.\n      walkThrough(\n        node[childKey][childIndex],\n        onNodeWalked,\n        childrenKey,\n        childIndex,\n        node,\n        level\n      );\n    }\n  }\n}\n\n/**\n * @description\n * Create a new tree consisting of copies of all nodes\n * The tree is walked in preorder (NLR), visiting the node itself, then its head, etc.\n *\n * @param tree The tree to walktrough\n * @param onNodeWalked The hook method to allow we walkThrough the tree node item.\n * @param childrenKey The key of tree children item\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-walk-through\n * @docsPage walk-through-tree\n * @docsWeight 1\n */\nexport function walkThroughTree<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(\n  tree: TreeNode<Node, Key>,\n  onNodeWalked: OnNodeWalked<Node, Key>,\n  childrenKey?: Key\n): void {\n  walkThrough(tree, onNodeWalked, childrenKey);\n}\n"],"names":["walkThrough","node","onNodeWalked","childrenKey","index","parent","level","arguments","length","undefined","childIndex","childKey","CHILDREN_KEY","walkThroughTree","tree"],"mappings":";6CAuCA,SAASA,EAIPC,EACAC,EACAC,EACAC,EACAC,GAEM,IADNC,EAAKC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,EAER,IAAIG,EACJ,IAAMC,EAAWR,IAAW,MAAXA,SAAAA,EAAAA,EAAeS,EAChCV,EAAaD,EAAMG,EAAOC,EAAQC,GAElC,GAAIL,EAAKU,GAAW,CAClBD,GAAe,EACfJ,IAEA,QAASI,EAAaT,EAAKU,GAAUH,OAAQ,CAE3CR,EACEC,EAAKU,GAAUD,GACfR,EACAC,EACAO,EACAT,EACAK,EAEJ,CACF,CACF,CAgBO,SAASO,EAIdC,EACAZ,EACAC,GAEAH,EAAYc,EAAMZ,EAAcC,EAClC"}