/*! @flatjs/forge MIT @dimjs/utils */
import{CHILDREN_KEY as n}from"./constant.js";var r={}.hasOwnProperty;function e(e,t){var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{cascade:false};return u(e);function u(e,l,c){var o=arguments;return new Promise((function(f,h){var s,a,d,v,p,g,m,y,P;a=o.length>3&&o[3]!==undefined?o[3]:0;d=[];m=(s=i.childrenKey)!==null&&s!==void 0?s:n;return Promise.resolve(t(e,l,c,a)).then(function(n){try{y=n;if(!y)return f(null);if(e[m]){g=-1;a++;var t;function c(){if(++g<e[m].length){return Promise.resolve(u(e[m][g],g,e,a)).then((function(n){try{v=n;if(v){d.push(v)}return c}catch(n){return h(n)}}),h)}else return[1]}return(t=function(n){while(n){if(n.then)return void n.then(t,h);try{if(n.pop){if(n.length)return n.pop()?o.call(this):n;else n=c}else n=n.call(this)}catch(n){return h(n)}}}.bind(this))(c);function o(){if(i.cascade&&e[m].length&&!d.length)return f(null);return l.call(this)}}function l(){P={};for(p in e){if(r.call(e,p)){P[p]=p===m?d:e[p]}}return f(P)}return l.call(this)}catch(s){return h(s)}}.bind(this),h)}))}}export{e as filterTree};
//# sourceMappingURL=filter-tree.js.map
