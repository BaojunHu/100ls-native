{"version":3,"file":"tree-to-array.js","sources":["@dimjs/utils/src/tree/tree-to-array.ts"],"sourcesContent":["import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type TreeNode,\n  type TreeNodeItem,\n} from './types.js';\n\n/**\n * @description\n * Converts a tree structure to an array of nodes.\n *\n * @param treeNodes - The array of tree nodes.\n * @param childrenKey - The property key used to access children nodes. If not provided, it defaults to \"children\".\n *\n * @returns An array of nodes representing the flattened tree structure.\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-to-array\n */\nexport function treeToArray<\n  Node extends TreeNodeItem,\n  Key extends ArrayPropertyKey<Node>,\n>(treeNodes: TreeNode<Node, Key>[], childrenKey?: Key): Node[] {\n  if (!treeNodes) {\n    return [];\n  }\n  const childKey = (childrenKey ?? CHILDREN_KEY) as string;\n  const list: Node[] = [];\n  function flattenTree(tree) {\n    if (!list.includes(tree)) {\n      list.push(tree);\n    }\n    if (Array.isArray(tree[childKey])) {\n      tree[childKey].forEach((item) => {\n        flattenTree(item);\n      });\n    }\n  }\n\n  treeNodes.forEach((item) => flattenTree(item));\n\n  return list.map((s) => {\n    return { ...s, [childKey]: [] };\n  });\n}\n"],"names":["treeToArray","treeNodes","childrenKey","childKey","CHILDREN_KEY","list","flattenTree","tree","includes","push","Array","isArray","forEach","item","map","s","_objectSpread","_defineProperty"],"mappings":";iHAmBO,SAASA,EAGdC,EAAkCC,GAClC,IAAKD,EAAW,CACd,MAAO,EACT,CACA,IAAME,EAAYD,IAAW,MAAXA,SAAAA,EAAAA,EAAeE,EACjC,IAAMC,EAAe,GACrB,SAASC,EAAYC,GACnB,IAAKF,EAAKG,SAASD,GAAO,CACxBF,EAAKI,KAAKF,EACZ,CACA,GAAIG,MAAMC,QAAQJ,EAAKJ,IAAY,CACjCI,EAAKJ,GAAUS,SAAQ,SAACC,GACtBP,EAAYO,EACd,GACF,CACF,CAEAZ,EAAUW,SAAQ,SAACC,GAAI,OAAKP,EAAYO,MAExC,OAAOR,EAAKS,KAAI,SAACC,GACf,OAAAC,EAAAA,EAAYD,CAAAA,EAAAA,MAACE,EAAA,CAAA,EAAGd,EAAW,IAC7B,GACF"}