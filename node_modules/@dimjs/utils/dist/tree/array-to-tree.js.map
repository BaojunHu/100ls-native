{"version":3,"file":"array-to-tree.js","sources":["@dimjs/utils/src/tree/array-to-tree.ts"],"sourcesContent":["import { CHILDREN_KEY } from './constant.js';\nimport {\n  type ArrayPropertyKey,\n  type ExpandableTreeNode,\n  type ExpandableTreeNodeResult,\n  type RootExpandableTreeNodeResult,\n  type TreeNodeId,\n  type TreeNodeInput,\n} from './types.js';\n\n/**\n * @description\n * Converts a tree structure to a map, where each node is mapped to its corresponding ID.\n *\n * @param tree The root node of the tree structure.\n * @param childrenKey The key used to access the children array of each node.\n * @returns A map where each node is mapped to its corresponding ID.\n *\n * @docsCategory preference/utils/tree\n * @docsPage array-to-tree\n * @docsWeight 2\n */\nfunction treeToMap<T extends { id: TreeNodeId }, K extends ArrayPropertyKey<T>>(\n  tree?: ExpandableTreeNode<T, K>,\n  childrenKey?: string\n): Map<TreeNodeId, ExpandableTreeNode<T, K>> {\n  const nodeMap = new Map<TreeNodeId, ExpandableTreeNode<T, K>>();\n  const childKey = childrenKey ?? CHILDREN_KEY;\n  function visit(node: ExpandableTreeNode<T, K>) {\n    nodeMap.set(node.id, node);\n    node[childKey].forEach(visit);\n  }\n  if (tree) {\n    visit(tree);\n  }\n  return nodeMap;\n}\n\n/**\n * @description\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n *\n * @param nodes The flat nodes with optional property `parent`\n * @param currentState\n * @param childrenKey The children property of tree.\n * @returns\n *\n * @docsCategory preference/utils/tree\n * @codeFilter tree-array-to\n * @docsPage array-to-tree\n * @docsWeight 1\n */\nexport function arrayToTree<\n  Node extends { id: TreeNodeId },\n  Key extends ArrayPropertyKey<Node>,\n>(\n  nodes: TreeNodeInput<Node, Key>[],\n  currentState?: ExpandableTreeNode<Node, Key>,\n  childrenKey?: Key\n): RootExpandableTreeNodeResult<Node, Key> {\n  const topLevelNodes: Array<ExpandableTreeNodeResult<Node, Key>> = [];\n  const mappedArr: {\n    [id: string]: ExpandableTreeNodeResult<Node, Key> & {\n      [key in Key]: Array<ExpandableTreeNodeResult<Node, Key>>;\n    };\n  } = {};\n  const childKey = (childrenKey ?? CHILDREN_KEY) as string;\n  const currentStateMap = treeToMap(currentState, childKey);\n\n  // First map the nodes of the array to an object -> create a hash table.\n  for (const node of nodes) {\n    mappedArr[node.id] = { ...(node as any), [childKey]: [] };\n  }\n\n  for (const id of nodes.map((n) => n.id)) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (mappedArr.hasOwnProperty(id)) {\n      const mappedElem = mappedArr[id];\n      mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n      const parent = mappedElem.parent;\n      // If the element is not at the root level, add it to its parent array of children.\n      const parentIsRoot = !parent || !mappedArr[parent.id];\n      if (parentIsRoot) {\n        topLevelNodes.push(mappedElem);\n      } else if (parent) {\n        if (mappedArr[parent.id]) {\n          mappedArr[parent.id][childKey].push(mappedElem);\n        } else {\n          mappedArr[parent.id] = { [childKey]: [mappedElem] } as any;\n        }\n      }\n    }\n  }\n\n  const rootId = topLevelNodes.length ? topLevelNodes[0].parent?.id : undefined;\n\n  return {\n    id: rootId,\n    [childKey]: topLevelNodes,\n  } as RootExpandableTreeNodeResult<Node, Key>;\n}\n"],"names":["treeToMap","tree","childrenKey","nodeMap","Map","childKey","CHILDREN_KEY","visit","node","set","id","forEach","arrayToTree","nodes","currentState","_topLevelNodes$0$pare","topLevelNodes","mappedArr","currentStateMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","_objectSpread","_defineProperty","err","e","f","_iterator2","map","_step2","hasOwnProperty","_currentStateMap$get$","_currentStateMap$get","mappedElem","expanded","get","parent","parentIsRoot","push","rootId","length","undefined"],"mappings":";wHAsBA,SAASA,EACPC,EACAC,GAEA,IAAMC,EAAU,IAAIC,IACpB,IAAMC,EAAWH,IAAW,MAAXA,SAAAA,EAAAA,EAAeI,EAChC,SAASC,EAAMC,GACbL,EAAQM,IAAID,EAAKE,GAAIF,GACrBA,EAAKH,GAAUM,QAAQJ,EACzB,CACA,GAAIN,EAAM,CACRM,EAAMN,EACR,CACA,OAAOE,CACT,CAkBO,SAASS,EAIdC,EACAC,EACAZ,GACyC,IAAAa,EACzC,IAAMC,EAA4D,GAClE,IAAMC,EAIF,CAAE,EACN,IAAMZ,EAAYH,IAAW,MAAXA,SAAAA,EAAAA,EAAeI,EACjC,IAAMY,EAAkBlB,EAAUc,EAAcT,GAEhD,IAAAc,EAAAC,EACmBP,GAAKQ,EAAA,IAAxB,IAAAF,EAAAG,MAAAD,EAAAF,EAAAI,KAAAC,MAA0B,CAAA,IAAfhB,EAAIa,EAAAI,MACbR,EAAUT,EAAKE,IAAGgB,EAAAA,EAAA,CAAA,EAASlB,GAAImB,CAAAA,EAAAA,KAAWtB,EAAW,IACvD,CAAC,CAAA,MAAAuB,GAAAT,EAAAU,EAAAD,EAAA,CAAA,QAAAT,EAAAW,GAAA,CAAA,IAAAC,EAAAX,EAEgBP,EAAMmB,KAAI,SAACT,GAAC,OAAKA,EAAEb,OAAGuB,EAAA,IAAvC,IAAAF,EAAAT,MAAAW,EAAAF,EAAAR,KAAAC,MAAyC,CAAA,IAA9Bd,EAAEuB,EAAAR,MAEX,GAAIR,EAAUiB,eAAexB,GAAK,CAAA,IAAAyB,EAAAC,EAChC,IAAMC,EAAapB,EAAUP,GAC7B2B,EAAWC,UAAQH,GAAAC,EAAGlB,EAAgBqB,IAAI7B,MAAG0B,MAAAA,SAAvBA,OAAAA,EAAAA,EAAyBE,kBAAQH,SAAA,EAAAA,EAAI,MAC3D,IAAMK,EAASH,EAAWG,OAE1B,IAAMC,GAAgBD,IAAWvB,EAAUuB,EAAO9B,IAClD,GAAI+B,EAAc,CAChBzB,EAAc0B,KAAKL,EACpB,MAAM,GAAIG,EAAQ,CACjB,GAAIvB,EAAUuB,EAAO9B,IAAK,CACxBO,EAAUuB,EAAO9B,IAAIL,GAAUqC,KAAKL,EACtC,KAAO,CACLpB,EAAUuB,EAAO9B,IAAGiB,EAAA,CAAA,EAAMtB,EAAW,CAACgC,GACxC,CACF,CACF,CACF,CAAC,CAAA,MAAAT,GAAAG,EAAAF,EAAAD,EAAA,CAAA,QAAAG,EAAAD,GAAA,CAED,IAAMa,EAAS3B,EAAc4B,QAAM7B,EAAGC,EAAc,GAAGwB,UAAMzB,MAAAA,kBAAvBA,EAAyBL,GAAKmC,UAEpE,OAAAlB,EAAA,CACEjB,GAAIiC,GACHtC,EAAWW,EAEhB"}