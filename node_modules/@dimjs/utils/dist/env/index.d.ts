/**
 * Retrieves the environment-specific configuration value from a given source object.
 *
 * @example
 * ``` ts
 * class EnvConfig {
 *  public rsaPublicKey = {
 *    local: 'local',
 *     prod: 'prod',
 *   };
 * };
 * const envConfig = new EnvConfig();
 * env.getEnvConfig(envConfig, 'rsaPublicKey', 'local')
 * // => local
 * ```
 *
 * @template T - The type of the configuration value to retrieve.
 * @param source - The source object to retrieve the configuration value from.
 * @param path - The path to the configuration value within the source object.
 * @param envName - Optional. The name of the environment. If not provided, the default environment name will be used.
 * @returns The environment-specific configuration value, or `undefined` if not found.
 *
 * @docsCategory preference/utils/env
 * @codeFilter get-env-config
 */
export declare const getEnvConfig: <T = string>(source: any, path: string, envName?: string) => T | undefined;
/**
 * @description
 * Retrieves the environment name from the query string or returns 'prod' as the default value.
 *
 * @param key - The key to retrieve the environment name from the query string. Defaults to 'env'.
 * @returns The environment name.
 *
 * @docsCategory preference/utils/env
 * @codeFilter get-env-name
 */
export declare const getEnvName: (key?: string) => string;

export {};
