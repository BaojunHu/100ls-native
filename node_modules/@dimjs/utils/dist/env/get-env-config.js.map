{"version":3,"file":"get-env-config.js","sources":["@dimjs/utils/src/env/get-env-config.ts"],"sourcesContent":["import { isObject, isRegexp } from '@dimjs/lang';\nimport { get } from '../get/get.js';\nimport { getEnvName } from './get-env-name.js';\n\n/**\n * Retrieves the environment-specific configuration value from a given source object.\n *\n * @example\n * ``` ts\n * class EnvConfig {\n *  public rsaPublicKey = {\n *    local: 'local',\n *     prod: 'prod',\n *   };\n * };\n * const envConfig = new EnvConfig();\n * env.getEnvConfig(envConfig, 'rsaPublicKey', 'local')\n * // => local\n * ```\n *\n * @template T - The type of the configuration value to retrieve.\n * @param source - The source object to retrieve the configuration value from.\n * @param path - The path to the configuration value within the source object.\n * @param envName - Optional. The name of the environment. If not provided, the default environment name will be used.\n * @returns The environment-specific configuration value, or `undefined` if not found.\n *\n * @docsCategory preference/utils/env\n * @codeFilter get-env-config\n */\nexport const getEnvConfig = <T = string>(\n  source,\n  path: string,\n  envName?: string\n): T | undefined => {\n  const env = envName || getEnvName();\n  const configNode = get(source, path, undefined);\n  if (isObject(configNode) && !isRegexp(configNode)) {\n    return get(configNode, `${env}`, undefined) as T;\n  } else {\n    return configNode as T;\n  }\n};\n"],"names":["getEnvConfig","source","path","envName","env","getEnvName","configNode","get","undefined","_isObject","_isRegexp","concat"],"mappings":";qeA6BO,IAAMA,EAAe,SAAfA,EACXC,EACAC,EACAC,GAEA,IAAMC,EAAMD,GAAWE,IACvB,IAAMC,EAAaC,EAAIN,EAAQC,EAAMM,WACrC,GAAIC,EAASH,KAAgBI,EAASJ,GAAa,CACjD,OAAOC,EAAID,EAAU,GAAAK,OAAKP,GAAOI,UACnC,KAAO,CACL,OAAOF,CACT,CACF"}