/**
 * @description
 * Creates a new URL by combining the specified URLs
 *
 * @example
 * ``` ts
 * combineUrls('https://api.github.com/', '/users');
 * // => 'https://api.github.com/users'
 * combineUrls('https://api.github.com/users', '');
 * // => 'https://api.github.com/users'
 * ```
 *
 * @param {string|function} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 *
 * @docsCategory preference/utils/uri
 * @codeFilter combine-urls
 */
export declare const combineUrls: (baseURL: string | (() => string), relativeURL: string) => string;
/**
 * @description
 * Retrieves the value of a query parameter from a URL.
 *
 * @example
 * ``` ts
 * getQueryString('ntv_bar_hidden','http://localhost:20001/?ntv_bar_hidden=1#/_tc_ntv_bar_set_navbar_demo');
 * // => 1
 * getQueryString('xxx','http://localhost:20001/?ntv_bar_hidden=1#/_tc_ntv_bar_set_navbar_demo');
 * // => undefined
 * ```
 *
 * @param name - The name of the query parameter.
 * @param url - The URL to extract the query parameter from. If not provided, the current window location will be used.
 * @returns The value of the query parameter, or `undefined` if it doesn't exist.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter get-query-string
 */
export declare function getQueryString(name: string, url?: string): string | undefined;
/**
 * @description
 * Retrieves the search parameter string from a given URL.
 *
 * @example
 * ``` ts
 * getSearchParamStr('http://localhost:20001/?ntv_bar_hidden&password=1#/_tc_ntv_bar_set_navbar_demo');
 * // => 'ntv_bar_hidden&password=1'
 * ```
 *
 * @param url - The URL from which to extract the search parameter string.
 * @returns The search parameter string without the hash symbol.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter get-search-param-str
 */
export declare const getSearchParamStr: (url: string) => string;
/**
 * @description
 * Checks if a given query parameter exists in the URL.
 *
 * @example
 * ``` ts
 * hasQueryString('ntv_bar_hidden','http://localhost:20001/?ntv_bar_hidden#/_tc_ntv_bar_set_navbar_demo');
 * // => true
 * ```
 *
 * @param name - The name of the query parameter to check.
 * @param url - The URL to check. If not provided, the current window location will be used.
 * @returns A boolean indicating whether the query parameter exists in the URL.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter has-query-string
 */
export declare const hasQueryString: (name: string, url?: string) => boolean;
/**
 * @description
 * Determines whether the specified URL is absolute
 *
 * @example
 * ``` ts
 * isAbsoluteUrl('123://example.com/');
 * // => false
 * isAbsoluteUrl('//example.com/');
 * // => true
 * isAbsoluteUrl('https://api.github.com/users');
 * // => true
 * ```
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 *
 * @docsCategory preference/utils/uri
 * @codeFilter is-absolute-url
 */
export declare const isAbsoluteUrl: (url: string) => boolean;
/**
 * @description
 * check if given url is http url or path
 *
 * @example
 * ``` ts
 * isHttpUrl('http://example.com');
 * // => true
 * isHttpUrl('ftp://example.com');
 * // => true
 * isHttpUrl('example.com');
 * // => false
 * ```
 *
 *
 * @param url url
 *
 * @docsCategory preference/utils/uri
 * @codeFilter is-http-url
 */
export declare const isHttpUrl: (url: string) => boolean | "";
/**
 * @description
 * Determine if a URL shares the same origin as the current location
 *
 * @example
 * ``` ts
 * isSameOrigin('https://github.com/axios/axios', 'https://github.com/test');
 * // => true
 * isSameOrigin('https://github.com/axios/axios');
 * // => false
 * ```
 *
 * @param {String} requestURL The URL to test
 * @returns {boolean} True if URL shares the same origin, otherwise false
 *
 * @docsCategory preference/utils/uri
 * @codeFilter is-same-origin
 */
export declare const isSameOrigin: (requestURL: string, url?: string) => boolean;
/**
 * @description
 * Modifies the query string of a given URL by adding or updating the specified parameters.
 *
 *
 * @example
 * ``` ts
 * modifyQueryString('https://example.org/abc', { user: 0 });
 * // => 'https://example.org/abc?user=0'
 * modifyQueryString('https://example.org/abc?abc=123', { abc: '1234' };
 * // => 'https://example.org/abc?abc=1234'
 * ```
 *
 * @param url - The URL to modify.
 * @param params - The parameters to add or update in the query string.
 * @returns The modified URL with the updated query string.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter modify-query-string
 */
export declare const modifyQueryString: (url: string, params: object) => string;
/**
 * @description
 * Converts a URL parameter string to a JSON object.
 *
 *
 * @example
 * ``` ts
 * paramStrToJson('https://www.domaiin.com/catalog/kzfoo-glasses?facetValueIds=5-15-41-31-2-1&page=1&price=ASC');
 * // => {
 * // =>  facetValueIds: '5-15-41-31-2-1',
 * // =>  page: '1',
 * // =>  price: 'ASC',
 * // => }
 * ```
 *
 * @param url - The URL containing the parameter string.
 * @returns The JSON object representing the parameter string.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter param-str-to-json
 */
export declare const paramStrToJson: (url: string) => {};
/**
 * @description
 * Normally for MD5(GET) signature, we need to remove `undefined`, `null`.
 * And convert all property value into `String` type. And sort `Array` property with alpha
 *
 * @example
 * ```ts
 * {
 *   foo: 'bar',
 *    // undefined will be removed.
 *    bar: undefined,
 *    // null will be removed.
 *    door: null,
 *    fex: '',
 *    fex2: ' ',
 *    child: {
 *      name: undefined,
 *      pwd: null,
 *      sex: 1,
 *      others: [3, 1, true, undefined],
 *    },
 *    array: ['name', '3', '1', true, null, undefined],
 *  }
 * // =>
 * {
 *    foo: 'bar',
 *    fex: '',
 *    fex2: ' ',
 *    child: {
 *      sex: '1',
 *      others: ['3', '1', 'true', 'undefined'],
 *    },
 *    array: ['name', '3', '1', true, null, undefined],
 * }
 * ```
 *
 * @param reqQuery - The request query object.
 * @returns The cleaned request query object.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter params-clean.spec.ts
 */
export declare const paramsClean: (reqQuery: Record<string, unknown>) => unknown;
declare function encode(val: string): string;
/**
 * @description
 * Follow java url encode standard, serialize url query params to url string with encode
 * Normally it will used to parse params into api url querystring.
 *
 * @example
 * ```ts
 * {
 *     foo: 'bar',
 *     // undefined will be removed.
 *     bar: undefined,
 *     // null will be removed.
 *     door: null,
 *     fex: '',
 *     fex2: ' ',
 *     array: ['name', '3', '1', true, null, undefined],
 *  }
 * /foo?foo=bar&fex=&fex2=+&array=name&array=3&array=1&array=true&array=null&array=undefined
 * ```
 * @param params request parameters
 * @param encoder @default encode
 *
 * @docsCategory preference/utils/uri
 * @codeFilter params-serialize
 */
export declare const paramsSerialize: (params: Record<string, unknown>, encoder?: typeof encode) => string;
/**
 * @description
 * Removes a query string parameter from a URL.
 *
 * @param url - The URL from which to remove the query string parameter.
 * @param key - The key of the query string parameter to remove.
 * @returns The modified URL with the specified query string parameter removed.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter remove-query-string
 */
export declare const removeQueryString: (url: string, key: string) => string;
/**
 * @description
 * Converts an object of parameters into a query string.
 *
 * @param params - The object containing the parameters.
 * @returns The query string representation of the parameters.
 *
 * @docsCategory preference/utils/uri
 * @codeFilter to-query-string
 */
export declare const toQueryString: (params: object) => string;
/**
 * @description
 * Parse a URL to discover it's components, Note the url must be with prefix `https://` or `http://`
 * Please don't use `//` prefix of uri.
 *
 *
 * @param {String} url The URL to be parsed
 * @returns {Object}
 *
 * @docsCategory preference/utils/uri
 * @codeFilter uri-parse
 */
export declare function uriParse(url: string): {
	href: string;
	protocol: string;
	host: string;
	hostname: string;
	port: string;
	pathname: string;
	search: string;
	hash: string;
} | {
	href?: undefined;
	protocol?: undefined;
	host?: undefined;
	hostname?: undefined;
	port?: undefined;
	pathname?: undefined;
	search?: undefined;
	hash?: undefined;
};

export {};
