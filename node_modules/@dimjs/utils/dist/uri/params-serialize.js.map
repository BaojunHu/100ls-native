{"version":3,"file":"params-serialize.js","sources":["@dimjs/utils/src/uri/params-serialize.ts"],"sourcesContent":["import { isArray, isDate, isObject } from '@dimjs/lang';\nimport { forEach } from '../for-each/for-each.js';\n\n/**\n * Encodes a string value for use in a URI.\n *\n * @param val - The string value to encode.\n * @returns The encoded string.\n *\n * @docsCategory preference/utils/uri\n * @docsPage params-serialize\n */\nfunction encode(val: string) {\n  return encodeURIComponent(val)\n    .replace(/%40/g, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%20/g, '+')\n    .replace(/%5B/gi, '[')\n    .replace(/%5D/gi, ']');\n}\n/**\n * @description\n * Follow java url encode standard, serialize url query params to url string with encode\n * Normally it will used to parse params into api url querystring.\n *\n * @example\n * ```ts\n * {\n *     foo: 'bar',\n *     // undefined will be removed.\n *     bar: undefined,\n *     // null will be removed.\n *     door: null,\n *     fex: '',\n *     fex2: ' ',\n *     array: ['name', '3', '1', true, null, undefined],\n *  }\n * /foo?foo=bar&fex=&fex2=+&array=name&array=3&array=1&array=true&array=null&array=undefined\n * ```\n * @param params request parameters\n * @param encoder @default encode\n *\n * @docsCategory preference/utils/uri\n * @codeFilter params-serialize\n */\nexport const paramsSerialize = (\n  params: Record<string, unknown>,\n  encoder = encode\n): string => {\n  const parts: string[] = [];\n  forEach(params, function serialize(val, key: string) {\n    if (val === null || typeof val === 'undefined') {\n      return;\n    }\n    if (!isArray(val)) {\n      val = [val];\n    }\n\n    forEach(val, function parseValue(v) {\n      if (isDate(v)) {\n        v = v.toISOString();\n      } else if (isObject(v)) {\n        v = JSON.stringify(v);\n      }\n      parts.push(encoder(key) + '=' + encoder(v));\n    });\n  });\n\n  return parts.join('&');\n};\n"],"names":["encode","val","encodeURIComponent","replace","paramsSerialize","params","encoder","arguments","length","undefined","parts","forEach","serialize","key","_isArray","parseValue","v","_isDate","toISOString","_isObject","JSON","stringify","push","join"],"mappings":";wQAYA,SAASA,EAAOC,GACd,OAAOC,mBAAmBD,GACvBE,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,IACtB,KA0BaC,EAAkB,SAAlBA,EACXC,GAEW,IADXC,EAAOC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAGP,EAEV,IAAMU,EAAkB,GACxBC,EAAQN,GAAQ,SAASO,EAAUX,EAAKY,GACtC,GAAIZ,IAAQ,aAAeA,IAAQ,YAAa,CAC9C,MACF,CACA,IAAKa,EAAQb,GAAM,CACjBA,EAAM,CAACA,EACT,CAEAU,EAAQV,GAAK,SAASc,EAAWC,GAC/B,GAAIC,EAAOD,GAAI,CACbA,EAAIA,EAAEE,aACR,MAAO,GAAIC,EAASH,GAAI,CACtBA,EAAII,KAAKC,UAAUL,EACrB,CACAN,EAAMY,KAAKhB,EAAQO,GAAO,IAAMP,EAAQU,GAC1C,GACF,IAEA,OAAON,EAAMa,KAAK,IACpB"}