{"version":3,"file":"set.js","sources":["@dimjs/utils/src/set/set.ts"],"sourcesContent":["import { isArray, isObject } from '@dimjs/lang';\n\n/**\n * @description\n * Sets a value in an object by traversing a given path.\n *\n * @param source - The source object to set the value in.\n * @param path - An array of strings representing the path to the target property.\n * @param value - The value to set at the target property.\n * @throws {Error} If any intermediate path node is not a plain object.\n *\n * @docsCategory preference/utils/set\n * @docsPage set\n */\nconst loopObjectSet = (source, [head, ...tail]: string[], value) => {\n  source = source[head] = tail.length ? source[head] || {} : value;\n  if (tail.length) {\n    if (isObject(source) && !isArray(source)) {\n      loopObjectSet(source, tail, value);\n    } else {\n      throw new Error(`path node ['.${head}'] must be plain object {}!`);\n    }\n  }\n};\n\n/**\n * @description\n * Sets the value at path of object. If a portion of path doesn't exist, it's created.\n *\n * @param source The object to modify.\n * @param path The path of the property to set.\n * @param value The value to set.\n *\n * @docsCategory preference/utils/set\n * @codeFilter set\n * @docsPage set\n */\nexport const set = (source: object | null | undefined, path: string, value) => {\n  source = source || {};\n  loopObjectSet(source, path.split('.'), value);\n  return source;\n};\n"],"names":["loopObjectSet","source","_ref","value","_ref2","_toArray","head","tail","slice","length","_isObject","_isArray","Error","concat","set","path","split"],"mappings":";6KAcA,IAAMA,EAAgB,SAAhBA,EAAiBC,EAAMC,EAA6BC,GAAU,IAAAC,EAAAC,EAAAH,GAApCI,EAAIF,EAAA,GAAKG,EAAIH,EAAAI,MAAA,GAC3CP,EAASA,EAAOK,GAAQC,EAAKE,OAASR,EAAOK,IAAS,CAAA,EAAKH,EAC3D,GAAII,EAAKE,OAAQ,CACf,GAAIC,EAAST,KAAYU,EAAQV,GAAS,CACxCD,EAAcC,EAAQM,EAAMJ,EAC9B,KAAO,CACL,MAAM,IAAIS,MAAK,gBAAAC,OAAiBP,iCAClC,CACF,CACF,EAcO,IAAMQ,EAAM,SAANA,EAAOb,EAAmCc,EAAcZ,GACnEF,EAASA,GAAU,CAAE,EACrBD,EAAcC,EAAQc,EAAKC,MAAM,KAAMb,GACvC,OAAOF,CACT"}