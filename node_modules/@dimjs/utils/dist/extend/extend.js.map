{"version":3,"file":"extend.js","sources":["@dimjs/utils/src/extend/extend.ts"],"sourcesContent":["import { isArray, isFunction, isPlainObject } from '@dimjs/lang';\n\n/**\n * @description\n * Merge the contents of two or more objects together into the first object.\n * Avoid use array function, cause of we may allow extend.bind()\n *\n * @note\n * target property `undefined` will be ignored. consider use `null` to override.\n *\n *\n * @example\n * ``` ts\n *  extend({name: 1}, {name: undefined}) ==> {name: 1}\n *  extend(target, [,object1][,objectN])\n *  extend([deep], target, [,object1][,objectN])\n *  1. extend({}, object1, object2);\n *  2. extend(true, {}, object1, object2);\n * ```\n *\n * @param args ([deep], target [,object1][,objectN])\n *\n * @docsCategory preference/utils/extend\n * @codeFilter extend\n */\nexport function extend(this: any, ...args) {\n  let name;\n  let src;\n  let copy;\n  let clone;\n  let target = args[0] || {};\n  let i = 1;\n  let deep = false;\n  const len = args.length;\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = args[i] || {};\n    i++;\n  }\n  if (typeof target !== 'object' && !isFunction(target)) {\n    target = {};\n  }\n  if (i === len) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    target = this;\n    i--;\n  }\n  for (; i < len; i++) {\n    const options = args[i];\n    if (options !== null) {\n      for (name in options) {\n        if (Object.prototype.hasOwnProperty.call(options, name)) {\n          src = target[name];\n          copy = options[name];\n          if (target === copy) {\n            continue;\n          }\n          let copyIsArray = isArray(copy);\n          if (deep && copy && (isPlainObject(copy) || copyIsArray)) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && isArray(src) ? src : [];\n            } else {\n              clone = src && isPlainObject(src) ? src : {};\n            }\n            target[name] = extend(deep, clone, copy);\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n  }\n\n  return target;\n}\n"],"names":["extend","name","src","copy","clone","_len","arguments","length","args","Array","_key","target","i","deep","len","_typeof","_isFunction","this","options","Object","prototype","hasOwnProperty","call","copyIsArray","_isArray","_isPlainObject","undefined"],"mappings":";qPAyBO,SAASA,IACd,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAAM,IAAA,IAAAC,EAAAC,UAAAC,OAJyBC,EAAIC,IAAAA,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAAJF,EAAIE,GAAAJ,UAAAI,EAAA,CAKvC,IAAIC,EAASH,EAAK,IAAM,CAAE,EAC1B,IAAII,EAAI,EACR,IAAIC,EAAO,MACX,IAAMC,EAAMN,EAAKD,OACjB,UAAWI,IAAW,UAAW,CAC/BE,EAAOF,EACPA,EAASH,EAAKI,IAAM,CAAE,EACtBA,GACF,CACA,GAAIG,EAAOJ,KAAW,WAAaK,EAAWL,GAAS,CACrDA,EAAS,CAAE,CACb,CACA,GAAIC,IAAME,EAAK,CAEbH,EAASM,KACTL,GACF,CACA,KAAOA,EAAIE,EAAKF,IAAK,CACnB,IAAMM,EAAUV,EAAKI,GACrB,GAAIM,IAAY,KAAM,CACpB,IAAKjB,KAAQiB,EAAS,CACpB,GAAIC,OAAOC,UAAUC,eAAeC,KAAKJ,EAASjB,GAAO,CACvDC,EAAMS,EAAOV,GACbE,EAAOe,EAAQjB,GACf,GAAIU,IAAWR,EAAM,CACnB,QACF,CACA,IAAIoB,EAAcC,EAAQrB,GAC1B,GAAIU,GAAQV,IAASsB,EAActB,IAASoB,GAAc,CACxD,GAAIA,EAAa,CACfA,EAAc,MACdnB,EAAQF,GAAOsB,EAAQtB,GAAOA,EAAM,EACtC,KAAO,CACLE,EAAQF,GAAOuB,EAAcvB,GAAOA,EAAM,CAAE,CAC9C,CACAS,EAAOV,GAAQD,EAAOa,EAAMT,EAAOD,EACrC,MAAO,GAAIA,IAASuB,UAAW,CAC7Bf,EAAOV,GAAQE,CACjB,CACF,CACF,CACF,CACF,CAEA,OAAOQ,CACT"}