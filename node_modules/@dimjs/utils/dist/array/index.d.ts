/**
 * @description
 * Split array into multi chunks
 *
 * @example
 * ``` ts
 * arrayChunk([1, 2, 3, 4, 5, 6], 2);
 * // => [
 * //     [1, 2],
 * //     [3, 4],
 * //     [5, 6],
 * //   ]
 * ```
 *
 * @param arr the array data
 * @param size chunks size
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-chunk
 */
export declare const arrayChunk: <T>(arr: T[], size: number) => T[][];
export type Recursive<T> = Array<T | Recursive<T>>;
/**
 * @description
 * Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
 *
 * @example
 * ``` ts
 * arrayFlattenDeep([1, 2, [3, 4, [5, 6]]]);
 * // => [1, 2, 3, 4, [5, 6]]
 * arrayFlatten([1, 2, [3, 4, [5, 6]]], 2);
 * // => [1, 2, 3, 4, 5, 6]
 * ```
 *
 * @param arr The array to flatten.
 * @param depth default 1
 * @returns A new array with the sub-array elements concatenated into it.
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-flatten
 */
export declare function arrayFlatten<T>(arr: Recursive<T>, depth?: number): Recursive<T>;
/**
 * @description
 * Recursively flattens array.
 *
 * @example
 * ``` ts
 * arrayFlatten([1, 2, [3, 4, [5, 6]]]);
 * // => [ 1, 2, 3, 4, 5, 6 ]
 * ```
 *
 * @param arr The array to flatten.
 * @returns Returns the new flattened array.
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-flatten-deep
 */
export declare function arrayFlattenDeep<T>(arr: Recursive<T>): Array<T>;
/**
 * @description
 * Groups elements of an array based on the result of a callback function.
 *
 * @example
 * ``` ts
 * arrayGroupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2],'6': [6.1, 6.3] }
 * ```
 *
 * @param array The array to process
 * @param callback Function to determine the group key for each element
 * @returns An object with the grouped elements
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-group-by
 */
export declare function arrayGroupBy<T>(array: T[], callback: (item: T) => string | number): Record<string | number, T[]>;
/**
 * @description
 * Module for returning arrays with a specific length by padding values.
 *
 * @example
 * ``` ts
 * arrayPad([], 2, '*');
 * // => ['*', '*']
 * arrayPad([], 2, '**');
 * // => ['**', '**']
 * ```
 *
 * @param array The array to pad.
 * @param length The padding length.
 * @param chars The string used as padding.
 * @returns Array\<T\>
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-pad
 */
export declare function arrayPad<T = string>(array: Array<T>, length: number, chars: T): T[];
/**
 * @description
 * Returns an array with a specified length by padding, left-padding and right-padding
 *
 * @example
 * ``` ts
 * const one = arrayPadLength([1, 2, 3], -5, 0);
 * one.join('.')
 * // => '0.0.1.2.3'
 * const three = arrayPadLength(two, 7, 9);
 * three.join('.')
 * // => '1.2.3.0.0.9.9'
 * ```
 *
 * @param array array
 * @param length Specifies the number of values to the left or right pad `-5` | `5` sign `-` indicates direction 'left'
 * @param value A placeholder of filling
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-pad-length
 */
export declare const arrayPadLength: <T>(array: T[], length: number, value?: T) => T[];
/**
 * @docsCategory preference/utils/array
 **/
export type ArrayArgs<T> = Array<T extends Array<unknown> ? T[0] : T>;
/**
 * @description
 * Given an array, removes specified elements and returns the modified array
 *
 * @example
 * ``` ts
 * arrayRemove(['red', 'red', 'green', 'red', 'blue'], 'red');
 * // => [ 'green', 'blue']
 * ```
 *
 * @param arr The current array
 * @param values The item that should be removed from all arrays
 * @returns The modified array
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-remove
 */
export declare function arrayRemove<T>(arr: T[], ...values: ArrayArgs<T>): T[];
/**
 * @description
 * Returns an array with only unique values. Objects are compared by reference,
 * unless the `byKey` argument is supplied, in which case matching properties will
 * be used to check duplicates
 *
 * @example
 * ``` ts
 * arrayUnique(['a', 'a', 'b', 'a', 'c', 'a', 'd']);
 * // => ['a', 'b', 'c', 'd']
 * arrayUnique([a, b, a, b, c, a])[1];
 * // => b
 * ```
 *
 * @param arr The array to remove duplicates from.
 * @param byKey Optional key to specify a property to compare for uniqueness.
 * @returns A new array with duplicate elements removed.
 *
 * @docsCategory preference/utils/array
 * @codeFilter array-unique
 */
export declare function arrayUnique<T>(arr: T[], byKey?: keyof T): T[];

export {};
