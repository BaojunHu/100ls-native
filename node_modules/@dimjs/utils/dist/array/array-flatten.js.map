{"version":3,"file":"array-flatten.js","sources":["@dimjs/utils/src/array/array-flatten.ts"],"sourcesContent":["export type Recursive<T> = Array<T | Recursive<T>>;\n\n/**\n * @description\n * Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n *\n * @example\n * ``` ts\n * arrayFlattenDeep([1, 2, [3, 4, [5, 6]]]);\n * // => [1, 2, 3, 4, [5, 6]]\n * arrayFlatten([1, 2, [3, 4, [5, 6]]], 2);\n * // => [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @param arr The array to flatten.\n * @param depth default 1\n * @returns A new array with the sub-array elements concatenated into it.\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-flatten\n */\nexport function arrayFlatten<T>(arr: Recursive<T>, depth = 1): Recursive<T> {\n  if (!Array.isArray(arr)) {\n    return arr;\n  }\n  return depth > 0\n    ? arr.reduce<T[]>(\n        (acc, val) => acc.concat(arrayFlatten(val as T[], depth - 1) as T[]),\n        []\n      )\n    : arr.slice();\n}\n"],"names":["arrayFlatten","arr","depth","arguments","length","undefined","Array","isArray","reduce","acc","val","concat","slice"],"mappings":";AAqBO,SAASA,EAAgBC,GAA4C,IAAzBC,EAAKC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,EACzD,IAAKG,MAAMC,QAAQN,GAAM,CACvB,OAAOA,CACT,CACA,OAAOC,EAAQ,EACXD,EAAIO,QACF,SAACC,EAAKC,GAAG,OAAKD,EAAIE,OAAOX,EAAaU,EAAYR,EAAQ,GAAU,GACpE,IAEFD,EAAIW,OACV"}