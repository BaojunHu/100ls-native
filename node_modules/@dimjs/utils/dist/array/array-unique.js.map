{"version":3,"file":"array-unique.js","sources":["@dimjs/utils/src/array/array-unique.ts"],"sourcesContent":["/**\n * @description\n * Returns an array with only unique values. Objects are compared by reference,\n * unless the `byKey` argument is supplied, in which case matching properties will\n * be used to check duplicates\n *\n * @example\n * ``` ts\n * arrayUnique(['a', 'a', 'b', 'a', 'c', 'a', 'd']);\n * // => ['a', 'b', 'c', 'd']\n * arrayUnique([a, b, a, b, c, a])[1];\n * // => b\n * ```\n *\n * @param arr The array to remove duplicates from.\n * @param byKey Optional key to specify a property to compare for uniqueness.\n * @returns A new array with duplicate elements removed.\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-unique\n */\nexport function arrayUnique<T>(arr: T[], byKey?: keyof T): T[] {\n  if (byKey === null || byKey === undefined) {\n    return Array.from(new Set(arr));\n  } else {\n    // Based on https://stackoverflow.com/a/58429784/772859\n    return [...new Map(arr.map((item) => [item[byKey], item])).values()];\n  }\n}\n"],"names":["arrayUnique","arr","byKey","undefined","Array","from","Set","_toConsumableArray","Map","map","item","values"],"mappings":";6DAqBO,SAASA,EAAeC,EAAUC,GACvC,GAAIA,IAAU,MAAQA,IAAUC,UAAW,CACzC,OAAOC,MAAMC,KAAK,IAAIC,IAAIL,GAC5B,KAAO,CAEL,OAAAM,EAAW,IAAIC,IAAIP,EAAIQ,KAAI,SAACC,GAAI,MAAK,CAACA,EAAKR,GAAQQ,EAAK,KAAGC,SAC7D,CACF"}