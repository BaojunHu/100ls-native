{"version":3,"file":"array-remove.js","sources":["@dimjs/utils/src/array/array-remove.ts"],"sourcesContent":["import { isArray } from '@dimjs/lang';\n\n/**\n * @docsCategory preference/utils/array\n **/\ntype ArrayArgs<T> = Array<T extends Array<unknown> ? T[0] : T>;\n\n/**\n * @docsCategory preference/utils/array\n **/\nfunction reduceAndRemove<T>(...items: T[]) {\n  return (arr: T[], cur: T) => {\n    if (isArray(cur)) {\n      arr.push((cur as any[]).reduce(reduceAndRemove(...items), []));\n    } else if (items.indexOf(cur) === -1) {\n      arr.push(cur);\n    }\n    return arr;\n  };\n}\n\n/**\n * @description\n * Given an array, removes specified elements and returns the modified array\n *\n * @example\n * ``` ts\n * arrayRemove(['red', 'red', 'green', 'red', 'blue'], 'red');\n * // => [ 'green', 'blue']\n * ```\n *\n * @param arr The current array\n * @param values The item that should be removed from all arrays\n * @returns The modified array\n *\n * @docsCategory preference/utils/array\n * @codeFilter array-remove\n */\nexport function arrayRemove<T>(arr: T[], ...values: ArrayArgs<T>): T[] {\n  return arr.reduce<T[]>(reduceAndRemove<T>(...(values as T[])), []);\n}\n"],"names":["reduceAndRemove","_len","arguments","length","items","Array","_key","arr","cur","_isArray","push","reduce","apply","indexOf","arrayRemove","_len2","values","_key2","_toConsumableArray"],"mappings":";oHAUA,SAASA,IAAkC,IAAA,IAAAC,EAAAC,UAAAC,OAAZC,EAAKC,IAAAA,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAALF,EAAKE,GAAAJ,UAAAI,EAAA,CAClC,OAAO,SAACC,EAAUC,GAChB,GAAIC,EAAQD,GAAM,CAChBD,EAAIG,KAAMF,EAAcG,OAAOX,EAAeY,aAAIR,GAAQ,IAC3D,MAAM,GAAIA,EAAMS,QAAQL,MAAS,EAAI,CACpCD,EAAIG,KAAKF,EACX,CACA,OAAOD,CACR,CACH,CAmBO,SAASO,EAAeP,GAAwC,IAAAQ,IAAAA,EAAAb,UAAAC,OAA3Ba,MAAMX,MAAAU,EAAAA,EAAAA,OAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CAAND,EAAMC,EAAAf,GAAAA,UAAAe,EAAA,CAChD,OAAOV,EAAII,OAAYX,EAAeY,WAAAM,EAAAA,EAAQF,IAAiB,GACjE"}