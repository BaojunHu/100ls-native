declare namespace currency {
	type Any = number | string | currency;
	type Format = (currency?: currency, opts?: Options) => string;
	interface Constructor {
		(value: currency.Any, opts?: currency.Options): currency;
		new (value: currency.Any, opts?: currency.Options): currency;
	}
	interface Options {
		symbol?: string;
		separator?: string;
		decimal?: string;
		errorOnInvalid?: boolean;
		precision?: number;
		increment?: number;
		useVedic?: boolean;
		pattern?: string;
		negativePattern?: string;
		format?: currency.Format;
		fromCents?: boolean;
	}
}
export interface currency {
	add(number: currency.Any): currency;
	subtract(number: currency.Any): currency;
	multiply(number: currency.Any): currency;
	divide(number: currency.Any): currency;
	distribute(count: number): Array<currency>;
	dollars(): number;
	cents(): number;
	format(opts?: currency.Options | currency.Format): string;
	toString(): string;
	toJSON(): number;
	readonly intValue: number;
	readonly value: number;
}
declare const currency: currency.Constructor;
/**
 * @docsCategory preference/utils/price
 * @docsPage types-price
 */
export type ValueType = number | string | currency;
/**
 * @docsCategory preference/utils/price
 * @docsPage types-price
 */
export type QuickPriceCalcApi = {
	toString(): string;
	format(): string;
	add(target: ValueType): currency;
	subtract(target: ValueType): currency;
	multiply(target: ValueType): currency;
	divide(target: ValueType): currency;
	equals(target: ValueType): boolean;
	lessThan(target: ValueType): boolean;
	lessEqlThan(target: ValueType): boolean;
	greaterThan(target: ValueType): boolean;
	greaterEqlThan(target: ValueType): boolean;
};
/**
 * @docsCategory preference/utils/price
 * @docsPage types-price
 */
export type PriceOption = {
	symbol?: string;
	separator?: string;
	decimal?: string;
	formatWithSymbol?: boolean;
	errorOnInvalid?: boolean;
	precision?: number;
	increment?: number;
	useVedic?: boolean;
};
/**
 * @description
 * Creates a QuickPriceCalcApi object for performing calculations and formatting on a given value.
 *
 * @example
 * ``` ts
 * price('3.8923').toString();
 * // => '3.89'
 * price('1237.72', { symbol: '€', separator: ',' }).format()
 * // => '€1,237.72'
 * ```
 *
 * @param value - The value to be used for calculations.
 * @param option - Optional configuration options for formatting.
 * @returns A QuickPriceCalcApi object with various methods for performing calculations and formatting.
 *
 * @docsCategory preference/utils/price
 * @codeFilter price
 */
export declare const price: (value: ValueType, option?: PriceOption) => QuickPriceCalcApi;

export {};
