{"version":3,"file":"price.js","sources":["@dimjs/utils/node_modules/currency.js/dist/currency.es.js","@dimjs/utils/src/price/price.ts"],"sourcesContent":["/*!\n * currency.js - v2.0.4\n * http://scurker.github.io/currency.js\n *\n * Copyright (c) 2021 Jason Wilson\n * Released under MIT license\n */\n\nvar defaults = {\n  symbol: '$',\n  separator: ',',\n  decimal: '.',\n  errorOnInvalid: false,\n  precision: 2,\n  pattern: '!#',\n  negativePattern: '-!#',\n  format: format,\n  fromCents: false\n};\n\nvar round = function round(v) {\n  return Math.round(v);\n};\n\nvar pow = function pow(p) {\n  return Math.pow(10, p);\n};\n\nvar rounding = function rounding(value, increment) {\n  return round(value / increment) * increment;\n};\n\nvar groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\nvar vedicRegex = /(\\d)(?=(\\d\\d)+\\d\\b)/g;\n/**\n * Create a new instance of currency.js\n * @param {number|string|currency} value\n * @param {object} [opts]\n */\n\nfunction currency(value, opts) {\n  var that = this;\n\n  if (!(that instanceof currency)) {\n    return new currency(value, opts);\n  }\n\n  var settings = Object.assign({}, defaults, opts),\n      precision = pow(settings.precision),\n      v = parse(value, settings);\n  that.intValue = v;\n  that.value = v / precision; // Set default incremental value\n\n  settings.increment = settings.increment || 1 / precision; // Support vedic numbering systems\n  // see: https://en.wikipedia.org/wiki/Indian_numbering_system\n\n  if (settings.useVedic) {\n    settings.groups = vedicRegex;\n  } else {\n    settings.groups = groupRegex;\n  } // Intended for internal usage only - subject to change\n\n\n  this.s = settings;\n  this.p = precision;\n}\n\nfunction parse(value, opts) {\n  var useRounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var v = 0,\n      decimal = opts.decimal,\n      errorOnInvalid = opts.errorOnInvalid,\n      decimals = opts.precision,\n      fromCents = opts.fromCents,\n      precision = pow(decimals),\n      isNumber = typeof value === 'number',\n      isCurrency = value instanceof currency;\n\n  if (isCurrency && fromCents) {\n    return value.intValue;\n  }\n\n  if (isNumber || isCurrency) {\n    v = isCurrency ? value.value : value;\n  } else if (typeof value === 'string') {\n    var regex = new RegExp('[^-\\\\d' + decimal + ']', 'g'),\n        decimalString = new RegExp('\\\\' + decimal, 'g');\n    v = value.replace(/\\((.*)\\)/, '-$1') // allow negative e.g. (1.99)\n    .replace(regex, '') // replace any non numeric values\n    .replace(decimalString, '.'); // convert any decimal values\n\n    v = v || 0;\n  } else {\n    if (errorOnInvalid) {\n      throw Error('Invalid Input');\n    }\n\n    v = 0;\n  }\n\n  if (!fromCents) {\n    v *= precision; // scale number to integer value\n\n    v = v.toFixed(4); // Handle additional decimal for proper rounding.\n  }\n\n  return useRounding ? round(v) : v;\n}\n/**\n * Formats a currency object\n * @param currency\n * @param {object} [opts]\n */\n\n\nfunction format(currency, settings) {\n  var pattern = settings.pattern,\n      negativePattern = settings.negativePattern,\n      symbol = settings.symbol,\n      separator = settings.separator,\n      decimal = settings.decimal,\n      groups = settings.groups,\n      split = ('' + currency).replace(/^-/, '').split('.'),\n      dollars = split[0],\n      cents = split[1];\n  return (currency.value >= 0 ? pattern : negativePattern).replace('!', symbol).replace('#', dollars.replace(groups, '$1' + separator) + (cents ? decimal + cents : ''));\n}\n\ncurrency.prototype = {\n  /**\n   * Adds values together.\n   * @param {number} number\n   * @returns {currency}\n   */\n  add: function add(number) {\n    var intValue = this.intValue,\n        _settings = this.s,\n        _precision = this.p;\n    return currency((intValue += parse(number, _settings)) / (_settings.fromCents ? 1 : _precision), _settings);\n  },\n\n  /**\n   * Subtracts value.\n   * @param {number} number\n   * @returns {currency}\n   */\n  subtract: function subtract(number) {\n    var intValue = this.intValue,\n        _settings = this.s,\n        _precision = this.p;\n    return currency((intValue -= parse(number, _settings)) / (_settings.fromCents ? 1 : _precision), _settings);\n  },\n\n  /**\n   * Multiplies values.\n   * @param {number} number\n   * @returns {currency}\n   */\n  multiply: function multiply(number) {\n    var intValue = this.intValue,\n        _settings = this.s;\n    return currency((intValue *= number) / (_settings.fromCents ? 1 : pow(_settings.precision)), _settings);\n  },\n\n  /**\n   * Divides value.\n   * @param {number} number\n   * @returns {currency}\n   */\n  divide: function divide(number) {\n    var intValue = this.intValue,\n        _settings = this.s;\n    return currency(intValue /= parse(number, _settings, false), _settings);\n  },\n\n  /**\n   * Takes the currency amount and distributes the values evenly. Any extra pennies\n   * left over from the distribution will be stacked onto the first set of entries.\n   * @param {number} count\n   * @returns {array}\n   */\n  distribute: function distribute(count) {\n    var intValue = this.intValue,\n        _precision = this.p,\n        _settings = this.s,\n        distribution = [],\n        split = Math[intValue >= 0 ? 'floor' : 'ceil'](intValue / count),\n        pennies = Math.abs(intValue - split * count),\n        precision = _settings.fromCents ? 1 : _precision;\n\n    for (; count !== 0; count--) {\n      var item = currency(split / precision, _settings); // Add any left over pennies\n\n      pennies-- > 0 && (item = item[intValue >= 0 ? 'add' : 'subtract'](1 / precision));\n      distribution.push(item);\n    }\n\n    return distribution;\n  },\n\n  /**\n   * Returns the dollar value.\n   * @returns {number}\n   */\n  dollars: function dollars() {\n    return ~~this.value;\n  },\n\n  /**\n   * Returns the cent value.\n   * @returns {number}\n   */\n  cents: function cents() {\n    var intValue = this.intValue,\n        _precision = this.p;\n    return ~~(intValue % _precision);\n  },\n\n  /**\n   * Formats the value as a string according to the formatting settings.\n   * @param {boolean} useSymbol - format with currency symbol\n   * @returns {string}\n   */\n  format: function format(options) {\n    var _settings = this.s;\n\n    if (typeof options === 'function') {\n      return options(this, _settings);\n    }\n\n    return _settings.format(this, Object.assign({}, _settings, options));\n  },\n\n  /**\n   * Formats the value as a string according to the formatting settings.\n   * @returns {string}\n   */\n  toString: function toString() {\n    var intValue = this.intValue,\n        _precision = this.p,\n        _settings = this.s;\n    return rounding(intValue / _precision, _settings.increment).toFixed(_settings.precision);\n  },\n\n  /**\n   * Value for JSON serialization.\n   * @returns {float}\n   */\n  toJSON: function toJSON() {\n    return this.value;\n  }\n};\n\nexport default currency;\n","import currency from 'currency.js';\n\n/**\n * @docsCategory preference/utils/price\n * @docsPage types-price\n */\ntype ValueType = number | string | currency;\n\n/**\n * @docsCategory preference/utils/price\n * @docsPage types-price\n */\ntype QuickPriceCalcApi = {\n  toString(): string;\n  format(): string;\n  add(target: ValueType): currency;\n  subtract(target: ValueType): currency;\n  multiply(target: ValueType): currency;\n  divide(target: ValueType): currency;\n  equals(target: ValueType): boolean;\n  lessThan(target: ValueType): boolean;\n  lessEqlThan(target: ValueType): boolean;\n  greaterThan(target: ValueType): boolean;\n  greaterEqlThan(target: ValueType): boolean;\n};\n\n/**\n * @docsCategory preference/utils/price\n * @docsPage types-price\n */\ntype PriceOption = {\n  symbol?: string;\n  separator?: string;\n  decimal?: string;\n  formatWithSymbol?: boolean;\n  errorOnInvalid?: boolean;\n  precision?: number;\n  increment?: number;\n  useVedic?: boolean;\n};\n\n/**\n * @description\n * Creates a QuickPriceCalcApi object for performing calculations and formatting on a given value.\n *\n * @example\n * ``` ts\n * price('3.8923').toString();\n * // => '3.89'\n * price('1237.72', { symbol: '€', separator: ',' }).format()\n * // => '€1,237.72'\n * ```\n *\n * @param value - The value to be used for calculations.\n * @param option - Optional configuration options for formatting.\n * @returns A QuickPriceCalcApi object with various methods for performing calculations and formatting.\n *\n * @docsCategory preference/utils/price\n * @codeFilter price\n */\nexport const price = (\n  value: ValueType,\n  option?: PriceOption\n): QuickPriceCalcApi => {\n  const currencyJs = currency(value, Object.assign({ separator: '' }, option));\n  const priceApi = {\n    toString() {\n      return currencyJs.toString();\n    },\n    format() {\n      return currencyJs.format();\n    },\n    add(target: ValueType): currency {\n      return currencyJs.add(target);\n    },\n    divide(target: ValueType): currency {\n      return currencyJs.divide(target);\n    },\n    subtract(target: ValueType): currency {\n      return currencyJs.subtract(target);\n    },\n    multiply(target: ValueType): currency {\n      return currencyJs.multiply(target);\n    },\n    equals(target: ValueType): boolean {\n      return currencyJs.subtract(target).toString() === '0.00';\n    },\n    lessThan(target: ValueType): boolean {\n      return currencyJs.subtract(target).toString().startsWith('-');\n    },\n    lessEqlThan(target: ValueType): boolean {\n      return priceApi.lessThan(target) || priceApi.equals(target);\n    },\n    greaterThan(target: ValueType): boolean {\n      const result = currencyJs.subtract(target).toString();\n      return !(result.startsWith('-') || result === '0.00');\n    },\n    greaterEqlThan(target: ValueType): boolean {\n      return priceApi.greaterThan(target) || priceApi.equals(target);\n    },\n  };\n  return priceApi;\n};\n"],"names":["defaults","symbol","separator","decimal","errorOnInvalid","precision","pattern","negativePattern","format","fromCents","round","v","Math","pow","p","rounding","value","increment","groupRegex","vedicRegex","currency","opts","that","this","settings","Object","assign","parse","intValue","useVedic","groups","s","useRounding","arguments","length","undefined","decimals","isNumber","isCurrency","regex","RegExp","decimalString","replace","Error","toFixed","split","dollars","cents","prototype","add","number","_settings","_precision","subtract","multiply","divide","distribute","count","distribution","pennies","abs","item","push","options","toString","toJSON","price","option","currencyJs","priceApi","target","equals","lessThan","startsWith","lessEqlThan","greaterThan","result","greaterEqlThan"],"mappings":"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","x_google_ignoreList":[0]}