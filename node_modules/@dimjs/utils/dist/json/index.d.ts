/**
 * @docsCategory preference/utils/json
 * @docsPage types-deep-parse
 */
export type PlainObject = Record<string, any>;
/**
 * @description
 * Recursively parses a JSON string or object, converting stringified values to their corresponding types.
 * If the input is an object, it will traverse the object and parse each value recursively.
 *
 * @param jsonStr - The JSON string or object to parse.
 * @param result - The result object to store the parsed values. Defaults to an empty object.
 * @returns The parsed JSON object with stringified values converted to their corresponding types.
 *
 * @docsCategory preference/utils/json
 * @codeFilter deep-parse
 * @docsPage deep-parse
 */
export declare const deepParse: (jsonStr: string | PlainObject, result?: PlainObject) => unknown;
/**
 * @description
 * Parses a JSON string or object and returns the parsed result.
 *
 * @param json - The JSON string or object to parse.
 * @returns The parsed result.
 *
 * @docsCategory preference/utils/json
 * @codeFilter parse
 */
export declare const parse: <T = unknown>(json: any) => T;
/**
 * @docsCategory preference/utils/json
 * @codeFilter sort
 * @docsPage sort
 */
export type SortJsonProps = {
	level?: number;
	depth?: number;
	reverse?: boolean;
	ignoreCase?: boolean;
};
/**
 * @description
 * Sorts the keys on objects
 *
 * @example
 * ``` ts
 * sort({ C: 3, a: 1, B: 2 }, { ignoreCase: true });
 * //=> { a: 1, B: 2, C: 3 }
 * ```
 *
 * @param {*} old                           - An object to sort the keys of, if not object just
 * @param {Object} [sortOptions = {}]       - optional parameters
 * @param [options.reverse = false]         - When sorting keys, converts all keys to lowercase so
 * @param [options.ignoreCase = false]      - When sorting keys, converts all keys to
 * @param [options.depth = Infinity]        - Depth's level sorting keys on a
 * @returns {*}                             - Object with sorted keys, if old wasn't an object
 *                                            returns whatever was passed
 * @docsCategory preference/utils/json
 * @codeFilter sort
 * @docsPage sort
 */
export declare const sort: (old: Record<string, any>, options?: SortJsonProps) => Record<string, any>;
/**
 * @description
 * Converts an object to a JSON string.
 *
 * @example
 * ``` ts
 * JSON.stringify(610523198909255112)
 * // => "610523198909255200"
 * ```
 *
 * @param obj - The object to be converted.
 * @param pretty - The number of spaces to use for indentation (optional).
 * @returns The JSON string representation of the object.
 *
 *
 * @docsCategory preference/utils/json
 * @codeFilter stringify
 */
export declare const stringify: (obj: any, pretty?: number) => string;

export {};
