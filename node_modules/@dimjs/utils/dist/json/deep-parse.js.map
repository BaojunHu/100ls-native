{"version":3,"file":"deep-parse.js","sources":["@dimjs/utils/src/json/deep-parse.ts"],"sourcesContent":["import { isObject, isString } from '@dimjs/lang';\nimport { parse } from './parse.js';\n\n/**\n * @docsCategory preference/utils/json\n * @docsPage types-deep-parse\n */\ntype PlainObject = Record<string, any>;\n\n/**\n * Note: 610523198909255112 parse will lose 112 to 200\n * @param itemValue\n *\n * @docsCategory preference/utils/json\n * @docsPage types-deep-parse\n */\nconst tryParseValue = (itemValue): unknown => {\n  // 如果字符串，并且是非数字的字符串，执行转换来避免精度丢失问题\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (isString(itemValue) && isNaN(itemValue)) {\n    try {\n      return parse(itemValue);\n    } catch {\n      // JSON.parse('ddd') ==> return 'ddd';\n      // 忽略报错，直接返回当前字符串即可.\n      // console.error(e);\n      return itemValue;\n    }\n  }\n  return itemValue;\n};\n\n/**\n * @description\n * Recursively parses a JSON string or object, converting stringified values to their corresponding types.\n * If the input is an object, it will traverse the object and parse each value recursively.\n *\n * @param jsonStr - The JSON string or object to parse.\n * @param result - The result object to store the parsed values. Defaults to an empty object.\n * @returns The parsed JSON object with stringified values converted to their corresponding types.\n *\n * @docsCategory preference/utils/json\n * @codeFilter deep-parse\n * @docsPage deep-parse\n */\nexport const deepParse = (\n  jsonStr: string | PlainObject,\n  result: PlainObject = {}\n): unknown => {\n  const outerJson: PlainObject = parse(jsonStr) || {};\n  if (isString(outerJson)) {\n    return tryParseValue(outerJson);\n  } else {\n    // handle (object | array)\n    Object.keys(outerJson).forEach((key) => {\n      const next = (result[key] = tryParseValue(outerJson[key])) as PlainObject;\n      if (isObject(next)) {\n        deepParse(next, next);\n      }\n    });\n  }\n  return result;\n};\n"],"names":["tryParseValue","itemValue","_isString","isNaN","parse","_unused","deepParse","jsonStr","result","arguments","length","undefined","outerJson","Object","keys","forEach","key","next","_isObject"],"mappings":";qJAgBA,IAAMA,EAAgB,SAAhBA,EAAiBC,GAIrB,GAAIC,EAASD,IAAcE,MAAMF,GAAY,CAC3C,IACE,OAAOG,EAAMH,EACd,CAAC,MAAAI,GAIA,OAAOJ,CACT,CACF,CACA,OAAOA,CACT,EAeO,IAAMK,EAAY,SAAZA,EACXC,GAEY,IADZC,EAAmBC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,CAAE,EAExB,IAAMG,EAAyBR,EAAMG,IAAY,CAAE,EACnD,GAAIL,EAASU,GAAY,CACvB,OAAOZ,EAAcY,EACvB,KAAO,CAELC,OAAOC,KAAKF,GAAWG,SAAQ,SAACC,GAC9B,IAAMC,EAAQT,EAAOQ,GAAOhB,EAAcY,EAAUI,IACpD,GAAIE,EAASD,GAAO,CAClBX,EAAUW,EAAMA,EAClB,CACF,GACF,CACA,OAAOT,CACT"}