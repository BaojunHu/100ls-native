{"version":3,"file":"sort.js","sources":["@dimjs/utils/src/json/sort.ts"],"sourcesContent":["/**\n * @docsCategory preference/utils/json\n * @codeFilter sort\n * @docsPage sort\n */\ntype SortJsonProps = {\n  level?: number;\n  depth?: number;\n  reverse?: boolean;\n  ignoreCase?: boolean;\n};\n/**\n * @description\n * Sorts the keys on objects\n *\n * @example\n * ``` ts\n * sort({ C: 3, a: 1, B: 2 }, { ignoreCase: true });\n * //=> { a: 1, B: 2, C: 3 }\n * ```\n *\n * @param {*} old                           - An object to sort the keys of, if not object just\n * @param {Object} [sortOptions = {}]       - optional parameters\n * @param [options.reverse = false]         - When sorting keys, converts all keys to lowercase so\n * @param [options.ignoreCase = false]      - When sorting keys, converts all keys to\n * @param [options.depth = Infinity]        - Depth's level sorting keys on a\n * @returns {*}                             - Object with sorted keys, if old wasn't an object\n *                                            returns whatever was passed\n * @docsCategory preference/utils/json\n * @codeFilter sort\n * @docsPage sort\n */\nexport const sort = (\n  old: Record<string, any>,\n  options?: SortJsonProps\n): Record<string, any> => {\n  const sortOptions = options || {};\n  const ignoreCase = sortOptions.ignoreCase || false;\n  const reverse = sortOptions.reverse || false;\n  const depth = sortOptions.depth || Infinity;\n  const level = sortOptions.level || 1;\n  const processing = level <= depth;\n\n  if (typeof old !== 'object' || old === null) {\n    return old;\n  }\n\n  const copy = Array.isArray(old) ? [] : {};\n  let keys = Object.keys(old);\n  if (processing) {\n    keys = ignoreCase\n      ? keys.sort((left, right) =>\n          left.toLowerCase().localeCompare(right.toLowerCase())\n        )\n      : keys.sort();\n  }\n\n  if (reverse) {\n    keys = keys.reverse();\n  }\n  keys.forEach((key) => {\n    const subSortOptions = Object.assign({}, sortOptions);\n    subSortOptions.level = level + 1;\n    copy[key] = sort(old[key], subSortOptions);\n  });\n\n  return copy;\n};\n"],"names":["sort","old","options","sortOptions","ignoreCase","reverse","depth","Infinity","level","processing","_typeof","copy","Array","isArray","keys","Object","left","right","toLowerCase","localeCompare","forEach","key","subSortOptions","assign"],"mappings":";6DAgCaA,IAAAA,EAAO,SAAPA,EACXC,EACAC,GAEA,IAAMC,EAAcD,GAAW,CAAE,EACjC,IAAME,EAAaD,EAAYC,YAAc,MAC7C,IAAMC,EAAUF,EAAYE,SAAW,MACvC,IAAMC,EAAQH,EAAYG,OAASC,SACnC,IAAMC,EAAQL,EAAYK,OAAS,EACnC,IAAMC,EAAaD,GAASF,EAE5B,GAAII,EAAOT,KAAQ,UAAYA,IAAQ,KAAM,CAC3C,OAAOA,CACT,CAEA,IAAMU,EAAOC,MAAMC,QAAQZ,GAAO,GAAK,CAAE,EACzC,IAAIa,EAAOC,OAAOD,KAAKb,GACvB,GAAIQ,EAAY,CACdK,EAAOV,EACHU,EAAKd,MAAK,SAACgB,EAAMC,GAAK,OACpBD,EAAKE,cAAcC,cAAcF,EAAMC,cAAc,IAEvDJ,EAAKd,MACX,CAEA,GAAIK,EAAS,CACXS,EAAOA,EAAKT,SACd,CACAS,EAAKM,SAAQ,SAACC,GACZ,IAAMC,EAAiBP,OAAOQ,OAAO,CAAA,EAAIpB,GACzCmB,EAAed,MAAQA,EAAQ,EAC/BG,EAAKU,GAAOrB,EAAKC,EAAIoB,GAAMC,EAC7B,IAEA,OAAOX,CACT"}