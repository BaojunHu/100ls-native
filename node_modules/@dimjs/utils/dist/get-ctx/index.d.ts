/**
 * @docsCategory preference/utils/get-ctx
 * @docsPage types-get-ctx
 */
export type IsEmptyObject<T> = T extends null | undefined ? true : T extends {} ? keyof T extends never ? true : false : false;
/**
 * @docsCategory preference/utils/get-ctx
 * @docsPage types-get-ctx
 */
export type Path<T extends Record<string, any> | null | undefined> = IsEmptyObject<T> extends true ? string : {
	[Key in keyof T & string]: T[Key] extends object ? `${Key}` | `${Key}.${Path<T[Key]>}` : `${Key}`;
}[keyof T & string];
/**
 * @description
 * Get the context of target `path` object
 *
 * @param source The object to query.
 * @param path The path of the property to get.
 *
 * @docsCategory preference/utils/get-ctx
 * @codeFilter get-ctx
 */
export declare const getCtx: <T extends Record<string, any> | null | undefined, K extends Path<T>>(source: T, path: K, defaultValue?: any) => unknown;

export {};
