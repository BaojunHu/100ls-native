{"version":3,"file":"minus.js","sources":["@dimjs/utils/src/number/minus.ts"],"sourcesContent":["import { digitLength } from './digit-length.js';\nimport { times } from './times.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Subtracts two numbers and returns the result.\n * If additional numbers are provided, it subtracts them sequentially.\n *\n * @param num1 The first number to subtract.\n * @param num2 The second number to subtract.\n * @param others Additional numbers to subtract.\n * @returns The result of the subtraction.\n *\n * @docsCategory preference/utils/number\n * @codeFilter minus\n */\nexport const minus = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return minus(minus(num1, num2), others[0], ...others.slice(1));\n  }\n  const baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));\n  return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;\n};\n"],"names":["minus","num1","num2","_len","arguments","length","others","Array","_key","apply","concat","_toConsumableArray","slice","baseNum","Math","pow","max","digitLength","times"],"mappings":";mOAiBaA,IAAAA,EAAQ,SAARA,EACXC,EACAC,GAEW,IAAAC,IAAAA,EAAAC,UAAAC,OADRC,MAAMC,MAAAJ,EAAAA,EAAAA,OAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAANF,EAAME,EAAAJ,GAAAA,UAAAI,EAAA,CAET,GAAIF,EAAOD,OAAS,EAAG,CACrB,OAAOL,EAAKS,WAACT,EAAAA,CAAAA,EAAMC,EAAMC,GAAOI,EAAO,IAAEI,OAAAC,EAAKL,EAAOM,MAAM,KAC7D,CACA,IAAMC,EAAUC,KAAKC,IAAI,GAAID,KAAKE,IAAIC,EAAYhB,GAAOgB,EAAYf,KACrE,OAAQgB,EAAMjB,EAAMY,GAAWK,EAAMhB,EAAMW,IAAYA,CACzD"}