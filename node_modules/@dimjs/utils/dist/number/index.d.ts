/**
 * @docsCategory preference/utils/number
 * @docsPage types-number
 */
export type NumType = number | string;
/**
 * @description
 * Returns the length of the decimal part of a number.
 * @param num - The number to calculate the decimal length of.
 * @returns The length of the decimal part of the number.
 *
 * @docsCategory preference/utils/number
 * @codeFilter digit-length
 */
export declare const digitLength: (num: NumType) => number;
/**
 * @description
 * Divides two numbers and returns the result.
 * If additional numbers are provided, it performs a series of divisions.
 *
 *
 * @param num1 The first number to divide.
 * @param num2 The second number to divide.
 * @param others Additional numbers to divide.
 * @returns The result of the division.
 *
 * @docsCategory preference/utils/number
 * @codeFilter divide
 */
export declare const divide: (num1: NumType, num2: NumType, ...others: NumType[]) => number;
/**
 * @description
 * Checks if the given number is within the safe integer boundary.
 * If the number is beyond the boundary, a warning message is logged.
 *
 * @param num - The number to be checked.
 *
 * @docsCategory preference/utils/number
 * @docsPage types-number
 */
export declare const checkBoundary: (num: number) => void;
/**
 * @description
 * Converts a floating-point number to a fixed-point number.
 * If the number is in scientific notation, it will be converted to a fixed-point number.
 *
 * @param num - The number to convert.
 * @returns The converted fixed-point number.
 *
 * @docsCategory preference/utils/number
 * @codeFilter float2-fixed
 */
export declare const float2Fixed: (num: NumType) => number;
/**
 * @description
 * Subtracts two numbers and returns the result.
 * If additional numbers are provided, it subtracts them sequentially.
 *
 * @param num1 The first number to subtract.
 * @param num2 The second number to subtract.
 * @param others Additional numbers to subtract.
 * @returns The result of the subtraction.
 *
 * @docsCategory preference/utils/number
 * @codeFilter minus
 */
export declare const minus: (num1: NumType, num2: NumType, ...others: NumType[]) => number;
/**
 * @description
 * Adds two or more numbers together.
 *
 * @param num1 The first number to add.
 * @param num2 The second number to add.
 * @param others Additional numbers to add.
 * @returns The sum of all the numbers.
 *
 * @docsCategory preference/utils/number
 * @codeFilter plus
 */
export declare const plus: (num1: NumType, num2: NumType, ...others: NumType[]) => number;
/**
 * @description
 * Rounds a number to a specified decimal place.
 *
 * @param num - The number to round.
 * @param ratio - The number of decimal places to round to.
 * @returns The rounded number.
 *
 * @docsCategory preference/utils/number
 * @codeFilter round
 */
export declare const round: (num: NumType, ratio: number) => number;
/**
 * @description
 * Fix wrong number input.
 * strip(0.09999999999999998)=0.1
 *
 * @docsCategory preference/utils/number
 * @codeFilter strip
 */
export declare const strip: (num: NumType, precision?: number) => number;
/**
 * @description
 * Multiplies two numbers together.
 *
 * @param num1 The first number to multiply.
 * @param num2 The second number to multiply.
 * @param others Additional numbers to multiply.
 * @returns The result of multiplying all the numbers together.
 *
 * @docsCategory preference/utils/number
 * @codeFilter times
 */
export declare const times: (num1: NumType, num2: NumType, ...others: NumType[]) => number;

export {};
