{"version":3,"file":"enable-boundary-checking.js","sources":["@dimjs/utils/src/number/enable-boundary-checking.ts"],"sourcesContent":["/**\n * @description\n * Checks if the given number is within the safe integer boundary.\n * If the number is beyond the boundary, a warning message is logged.\n *\n * @param num - The number to be checked.\n *\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nexport const checkBoundary = (num: number) => {\n  if (\n    boundaryCheckingState &&\n    (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER)\n  ) {\n    console.warn(\n      `${num} is beyond boundary when transfer to integer, the results may not be accurate`\n    );\n  }\n};\n\n/**\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nlet boundaryCheckingState = true;\n\n/**\n * @description\n * Whether to perform boundary check.\n *\n * @param flag - A boolean value indicating whether to enable or disable boundary checking. Default is true.\n *\n * @docsCategory preference/utils/number\n * @docsPage types-number\n */\nexport const enableBoundaryChecking = (flag = true) => {\n  boundaryCheckingState = flag;\n};\n"],"names":["checkBoundary","num","boundaryCheckingState","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","console","warn","concat","enableBoundaryChecking","flag","arguments","length","undefined"],"mappings":";IAUaA,EAAgB,SAAhBA,EAAiBC,GAC5B,GACEC,IACCD,EAAME,OAAOC,kBAAoBH,EAAME,OAAOE,kBAC/C,CACAC,QAAQC,KAAI,GAAAC,OACPP,mFAEP,CACF,EAMA,IAAIC,EAAwB,SAWfO,EAAyB,SAAzBA,IAA0C,IAAhBC,EAAIC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,KAC5CT,EAAwBQ,CAC1B"}