{"version":3,"file":"times.js","sources":["@dimjs/utils/src/number/times.ts"],"sourcesContent":["import { digitLength } from './digit-length.js';\nimport { checkBoundary } from './enable-boundary-checking.js';\nimport { float2Fixed } from './float2-fixed.js';\nimport { type NumType } from './types.js';\n\n/**\n * @description\n * Multiplies two numbers together.\n *\n * @param num1 The first number to multiply.\n * @param num2 The second number to multiply.\n * @param others Additional numbers to multiply.\n * @returns The result of multiplying all the numbers together.\n *\n * @docsCategory preference/utils/number\n * @codeFilter times\n */\nexport const times = (\n  num1: NumType,\n  num2: NumType,\n  ...others: NumType[]\n): number => {\n  if (others.length > 0) {\n    return times(times(num1, num2), others[0], ...others.slice(1));\n  }\n  const num1Changed = float2Fixed(num1);\n  const num2Changed = float2Fixed(num2);\n  const baseNum = digitLength(num1) + digitLength(num2);\n  const leftValue = num1Changed * num2Changed;\n\n  checkBoundary(leftValue);\n\n  return leftValue / Math.pow(10, baseNum);\n};\n"],"names":["times","num1","num2","_len","arguments","length","others","Array","_key","apply","concat","_toConsumableArray","slice","num1Changed","float2Fixed","num2Changed","baseNum","digitLength","leftValue","checkBoundary","Math","pow"],"mappings":";8OAiBaA,IAAAA,EAAQ,SAARA,EACXC,EACAC,GAEW,IAAAC,IAAAA,EAAAC,UAAAC,OADRC,MAAMC,MAAAJ,EAAAA,EAAAA,OAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAANF,EAAME,EAAAJ,GAAAA,UAAAI,EAAA,CAET,GAAIF,EAAOD,OAAS,EAAG,CACrB,OAAOL,EAAKS,WAACT,EAAAA,CAAAA,EAAMC,EAAMC,GAAOI,EAAO,IAAEI,OAAAC,EAAKL,EAAOM,MAAM,KAC7D,CACA,IAAMC,EAAcC,EAAYb,GAChC,IAAMc,EAAcD,EAAYZ,GAChC,IAAMc,EAAUC,EAAYhB,GAAQgB,EAAYf,GAChD,IAAMgB,EAAYL,EAAcE,EAEhCI,EAAcD,GAEd,OAAOA,EAAYE,KAAKC,IAAI,GAAIL,EAClC"}