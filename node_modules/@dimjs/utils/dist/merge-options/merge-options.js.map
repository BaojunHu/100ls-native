{"version":3,"file":"merge-options.js","sources":["@dimjs/utils/src/merge-options/merge-options.ts"],"sourcesContent":["/**\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nimport {\n  isClassInstance,\n  isObject,\n  simpleDeepClone,\n} from './simple-deep-clone.js';\n\n/**\n * @description\n * A recursive implementation of the Partial\\<T\\> type.\n * Source: https://stackoverflow.com/a/49936686/772859\n *\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?:\n    | null\n    | (T[P] extends Array<infer U>\n        ? Array<DeepPartial<U>>\n        : T[P] extends ReadonlyArray<infer U>\n          ? ReadonlyArray<DeepPartial<U>>\n          : DeepPartial<T[P]>);\n};\n\n/**\n * @docsCategory preference/utils/merge-options\n * @docsPage types-types-merge\n */\nconst needMerge = (source, mergeUndefined?: boolean) => {\n  return !(typeof source === 'undefined' && !mergeUndefined);\n};\n\n/**\n * @description\n * Performs a deep merge of two Plugin options merge objects. Unlike `Object.assign()` the `target` object is\n * not mutated, instead the function returns a new object which is the result of deeply merging the\n * values of `source` into `target`.\n *\n * Arrays do not get merged, they are treated as a single value that will be replaced. So if merging the\n * `plugins` array, you must explicitly concatenate the array.\n *\n * @example\n * ``` ts\n * const result = mergeOptions(defaultConfig, {\n *   assetOptions: {\n *     uploadMaxFileSize: 5000,\n *   },\n *   plugins: [\n *     ...defaultConfig.plugins,\n *     MyPlugin,\n *   ]\n * };\n * ```\n *\n * @param {T} target - The target object to merge into.\n * @param {DeepPartial<T>} source - The source object to merge from.\n * @param {boolean} [mergeUndefined=false] - Whether to merge undefined values.\n * @param {number} [depth=0] - The current depth of the merge operation.\n * @returns {T} - The merged object.\n *\n * @docsCategory preference/utils/merge-options\n * @codeFilter merge-options\n * @docsPage merge-options\n */\nexport function mergeOptions<T>(\n  target: T,\n  source: DeepPartial<T>,\n  mergeUndefined = false,\n  depth = 0\n): T {\n  if (!source) {\n    return target;\n  }\n\n  if (depth === 0) {\n    target = simpleDeepClone(target as any);\n  }\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        // `target[key]=true` we also need to assign {} as key\n        if (!isObject((target as any)[key])) {\n          Object.assign(target, { [key]: {} });\n        }\n        if (!isClassInstance(source[key])) {\n          mergeOptions(\n            (target as any)[key],\n            (source as any)[key],\n            mergeUndefined,\n            depth + 1\n          );\n        } else {\n          if (needMerge(source[key], mergeUndefined)) {\n            (target as any)[key] = source[key];\n          }\n        }\n      } else {\n        if (needMerge(source[key], mergeUndefined)) {\n          Object.assign(target, { [key]: source[key] });\n        }\n      }\n    }\n  }\n  return target;\n}\n"],"names":["needMerge","source","mergeUndefined","mergeOptions","target","arguments","length","undefined","depth","simpleDeepClone","isObject","key","Object","assign","_defineProperty","isClassInstance"],"mappings":";yJAgCA,IAAMA,EAAY,SAAZA,EAAaC,EAAQC,GACzB,eAAgBD,IAAW,cAAgBC,EAC7C,EAkCO,SAASC,EACdC,EACAH,GAGG,IAFHC,EAAcG,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAAK,IACtBG,EAAKH,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,EAER,IAAKJ,EAAQ,CACX,OAAOG,CACT,CAEA,GAAII,IAAU,EAAG,CACfJ,EAASK,EAAgBL,EAC3B,CAEA,GAAIM,EAASN,IAAWM,EAAST,GAAS,CACxC,IAAK,IAAMU,KAAOV,EAAQ,CACxB,GAAIS,EAAST,EAAOU,IAAO,CAEzB,IAAKD,EAAUN,EAAeO,IAAO,CACnCC,OAAOC,OAAOT,EAAMU,EAAKH,CAAAA,EAAAA,EAAM,CAAA,GACjC,CACA,IAAKI,EAAgBd,EAAOU,IAAO,CACjCR,EACGC,EAAeO,GACfV,EAAeU,GAChBT,EACAM,EAAQ,EAEZ,KAAO,CACL,GAAIR,EAAUC,EAAOU,GAAMT,GAAiB,CACzCE,EAAeO,GAAOV,EAAOU,EAChC,CACF,CACF,KAAO,CACL,GAAIX,EAAUC,EAAOU,GAAMT,GAAiB,CAC1CU,OAAOC,OAAOT,EAAMU,EAAA,CAAA,EAAKH,EAAMV,EAAOU,IACxC,CACF,CACF,CACF,CACA,OAAOP,CACT"}