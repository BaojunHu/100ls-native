/**
 * @description
 * A recursive implementation of the Partial\<T\> type.
 * Source: https://stackoverflow.com/a/49936686/772859
 *
 * @docsCategory preference/utils/merge-options
 * @docsPage types-types-merge
 */
export type DeepPartial<T> = {
	[P in keyof T]?: null | (T[P] extends Array<infer U> ? Array<DeepPartial<U>> : T[P] extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : DeepPartial<T[P]>);
};
/**
 * @description
 * Performs a deep merge of two Plugin options merge objects. Unlike `Object.assign()` the `target` object is
 * not mutated, instead the function returns a new object which is the result of deeply merging the
 * values of `source` into `target`.
 *
 * Arrays do not get merged, they are treated as a single value that will be replaced. So if merging the
 * `plugins` array, you must explicitly concatenate the array.
 *
 * @example
 * ``` ts
 * const result = mergeOptions(defaultConfig, {
 *   assetOptions: {
 *     uploadMaxFileSize: 5000,
 *   },
 *   plugins: [
 *     ...defaultConfig.plugins,
 *     MyPlugin,
 *   ]
 * };
 * ```
 *
 * @param {T} target - The target object to merge into.
 * @param {DeepPartial<T>} source - The source object to merge from.
 * @param {boolean} [mergeUndefined=false] - Whether to merge undefined values.
 * @param {number} [depth=0] - The current depth of the merge operation.
 * @returns {T} - The merged object.
 *
 * @docsCategory preference/utils/merge-options
 * @codeFilter merge-options
 * @docsPage merge-options
 */
export declare function mergeOptions<T>(target: T, source: DeepPartial<T>, mergeUndefined?: boolean, depth?: number): T;

export {};
