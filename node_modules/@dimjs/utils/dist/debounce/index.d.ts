/**
 * @docsCategory preference/utils/debounce
 * @docsPage types-debounce
 */
export type Procedure = (...args: any[]) => void;
/**
 * @docsCategory preference/utils/debounce
 * @docsPage types-debounce
 */
export interface DebounceOptions {
	isImmediate: boolean;
}
/**
 * @description
 * Debounce create a new function g, which when called will delay the invocation of the original function f until n milliseconds after it was last called.
 *
 * @example
 * ``` ts
 * const debouncedFunction = debounce(func, 100);
 * ```
 *
 * @param func the function which we want to debounce
 * @param waitMilliseconds how many seconds must pass after most recent function call, for the original function to be called
 * @param options
 *
 * @docsCategory preference/utils/debounce
 * @codeFilter debounce
 */
export declare function debounce<F extends Procedure>(func: F, waitMilliseconds?: number, options?: DebounceOptions): (this: any, ...args: any[]) => void;

export {};
