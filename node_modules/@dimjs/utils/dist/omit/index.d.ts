/**
 * @docsCategory preference/utils/omit
 * @docsPage omit
 */
export type RuleFn = (key: any, value?: any) => boolean;
/**
 * @description
 * Creates a new object or array by omitting specified properties or elements from the target object or array.
 *
 * @example
 * ```ts
 *  expect(omit('[0]', ['key1'])).toEqual([]);
 *  expect(omit(['[0]'], [1, 3, 4])).toEqual(expect.arrayContaining([3, 4]));
 *  expect(omit(['key1', 'sex.pwd', 'nest[0]', 'nest[2][0]', 'nest[3].arr.pwd'], {
 *    key: 'key1',
 *    nest: [1, 3, [0, 1, 3, null, undefined], { arr: { pwd: '111', name: 'name' } }],
 *    sex: {
 *      pwd: '',
 *      pwd1: '',
 *    },
 *  })).toMatchObject({
 *    key: 'key1',
 *    nest: [3, [1, 3, null, undefined], { arr: { name: 'name' } }],
 *    sex: {
 *      pwd1: '',
 *    },
 *  });
 * ```
 *
 * @param rules - The properties or elements to omit. Can be a string, an array of strings, or a custom rule function.
 * @param target - The object or array from which to omit properties or elements.
 * @returns A new object or array with the specified properties or elements omitted.
 *
 * @docsCategory preference/utils/omit
 * @codeFilter omit
 */
export declare const omit: <T extends object>(rules: string[] | string | RuleFn, target: T | T[]) => Record<string, any>;

export {};
