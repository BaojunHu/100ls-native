{"version":3,"file":"utils-DpRCUyzW.js","sources":["@dimjs/utils/src/semver/types.ts","@dimjs/utils/src/semver/utils.ts"],"sourcesContent":["/**\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport enum CompareResult {\n  Equal = 'EQ',\n  LessThan = 'LT',\n  GreaterThan = 'GT',\n}\n","import { verRegex } from './constant.js';\nimport { CompareResult } from './types.js';\nimport { validate } from './validate.js';\n\n/**\n * @description\n * Validates two version strings and throws an error if either of them is in an invalid format.\n *\n * @param verA - The first version string to validate.\n * @param verB - The second version string to validate.\n * @throws {Error} - If either verA or verB is in an invalid format.\n * @returns {boolean} - Returns true if both version strings are valid.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const validateWithError = (verA: string, verB: string) => {\n  if (!validate(verA)) {\n    throw new Error(`${verA} is invalid format`);\n  }\n  if (!validate(verB)) {\n    throw new Error(`${verB} is invalid format`);\n  }\n  return true;\n};\n\n/**\n * @description\n * Removes non-numeric characters from a version string and returns an array of numbers.\n *\n * @param ver - The version string to clean.\n * @returns An array of numbers representing the cleaned version.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const clean = (ver: string) => {\n  return ver.replace(verRegex, '').split('.').map(Number);\n};\n\n/**\n * @description\n * Compares two numbers and returns the comparison result.\n *\n * @param a The first number to compare.\n * @param b The second number to compare.\n * @returns The comparison result: Equal, GreaterThan, or LessThan.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const compare = (a: number, b: number) => {\n  return a === b\n    ? CompareResult.Equal\n    : a > b\n      ? CompareResult.GreaterThan\n      : CompareResult.LessThan;\n};\n\n/**\n * @description\n * Compares two version numbers.\n *\n * @param verA - The first version number as an array of numbers.\n * @param verB - The second version number as an array of numbers.\n * @returns The comparison result as CompareResult enum value.\n *\n * @docsCategory preference/utils/semver\n * @docsPage types-semver\n */\nexport const compareVersion = (verA: number[], verB: number[]) => {\n  if (verA.join('.') === verB.join('.')) {\n    return CompareResult.Equal;\n  }\n  for (let i = 0; i < verA.length; i++) {\n    const result = compare(verA[i], verB[i]);\n    if (result !== CompareResult.Equal) {\n      return result;\n    }\n  }\n  return CompareResult.Equal;\n};\n"],"names":["CompareResult","validateWithError","verA","verB","validate","Error","concat","clean","ver","replace","verRegex","split","map","Number","compare","a","b","Equal","GreaterThan","LessThan","compareVersion","join","i","length","result"],"mappings":";gGAIYA,IAAAA,WAAAA,GAAAA,EAAa,SAAA,KAAbA,EAAa,YAAA,KAAbA,EAAa,eAAA,KAAA,OAAbA,CAAa,EAAA,CAAA,GCYlB,IAAMC,EAAoB,SAApBA,EAAqBC,EAAcC,GAC9C,IAAKC,EAASF,GAAO,CACnB,MAAM,IAAIG,MAAK,GAAAC,OAAIJ,wBACrB,CACA,IAAKE,EAASD,GAAO,CACnB,MAAM,IAAIE,MAAK,GAAAC,OAAIH,wBACrB,CACA,OAAO,IACT,MAYaI,EAAQ,SAARA,EAASC,GACpB,OAAOA,EAAIC,QAAQC,EAAU,IAAIC,MAAM,KAAKC,IAAIC,OAClD,EAaO,IAAMC,EAAU,SAAVA,EAAWC,EAAWC,GACjC,OAAOD,IAAMC,EACThB,EAAciB,MACdF,EAAIC,EACFhB,EAAckB,YACdlB,EAAcmB,QACtB,EAaO,IAAMC,EAAiB,SAAjBA,EAAkBlB,EAAgBC,GAC7C,GAAID,EAAKmB,KAAK,OAASlB,EAAKkB,KAAK,KAAM,CACrC,OAAOrB,EAAciB,KACvB,CACA,IAAK,IAAIK,EAAI,EAAGA,EAAIpB,EAAKqB,OAAQD,IAAK,CACpC,IAAME,EAASV,EAAQZ,EAAKoB,GAAInB,EAAKmB,IACrC,GAAIE,IAAWxB,EAAciB,MAAO,CAClC,OAAOO,CACT,CACF,CACA,OAAOxB,EAAciB,KACvB"}